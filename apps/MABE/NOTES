In this third version of MABE, we are building wrappers that verify needed
functionality for modules and fill in optional functionality to streamline its
use.

BRAINS + GENOMES -> ORGANISMS (or build organisms directly)
ORGANISM + ENVIRONMENTS -> ORGANISM INTERFACE (to help organisms communicate with environment)

Organism wrappers should automatically loop in the associated OrganismInterface so that the
user never even needs to know that it exists.

When adding an Organism to a World, must indicate if its a new type of organism so that
a new OrganismInterface can be built.

When builing an organism template, you must indicate the brain and genome to use (including
NoBrain or NoGenome), but you can optionally add a third, numerical argument to have different
versions of that organisms type that can be configured independently.




Also, renaming Organism into OrganismType since that better describes the classes role
(and we will have indiviudal organisms as well).

Example code:

  #include "mabe.h"
  #include "controlers/MarkovBrain.h"
  #include "genomes/LinearGenome.h"
  #include "genomes/NetworkGenome.h"
  #include "environments/FarmEnvironment.h"
  #include "schemas/TournamentSelect.h"
  #include "watchers/TrackLineage.h"

  int main(int argc, char * argv[]) {
    // Determine the types of everything that you want to use to build the world.
    mabe::OrganismType<mabe::MarkovBrain, mabe::LinearGenome> sheep("Sheep");
    mabe::OrganismType<mabe::MarkovBrain, mabe::NetworkGenome> wolves("Wolves");
    mabe::FarmEnvironment farm("FarmEnvironment");
    mabe::TrackLineage lineage_tracker("LineageTracker");
    mabe::TournamentSelect tourny_schema("TournamentSelect");

    // Build the world using these types.
    mabe::World world(sheep, wolves, farm, lineage_tracker, tourny_schema);

    // Configure the world using the "farm.cfg" file and command-line overrides.
    world.Config("farm.cfg", argv, argc);

    // Running world will go for full configured duration; can also manually Update() it.
    return world.Run();
  }

