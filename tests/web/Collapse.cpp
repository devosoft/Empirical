/**
 *  @note This file is part of Empirical, https://github.com/devosoft/Empirical
 *  @copyright Copyright (C) Michigan State University, MIT Software license; see doc/LICENSE.md
 *  @date 2020
 *
 *  @file Collapse.cpp
 */

#include <functional>
#include <string>
#include <unordered_map>

#include "emp/base/assert.hpp"
#include "emp/prefab/Collapse.hpp"
#include "emp/web/Button.hpp"
#include "emp/web/Div.hpp"
#include "emp/web/Document.hpp"
#include "emp/web/js_utils.hpp"
#include "emp/web/_MochaTestRunner.hpp"
#include "emp/web/web.hpp"

struct Test_Collapse_String : emp::web::BaseTest {

  /*
   * Construct the following HTML structure:
   *
   * <div id="emp_test_container">
   *
   * <span aria-controls=".set1" aria-expanded="true" class="collapse_toggle" data-target=".set1" data-toggle="collapse" role="button">Controller 1</span>
   *
   * <span aria-controls=".set1" aria-expanded="true" class="collapse_toggle" data-target=".set1" data-toggle="collapse" role="button">Controller 1.2</span>
   *
   * <span class="collapse show set1">[1] Target Content (set1)</span>
   *
   * <span aria-controls=".set2" aria-expanded="false" class="collapse_toggle collapsed" data-target=".set2" data-toggle="collapse" role="button">Controller 2</span>
   *
   * <span class="collapse set2">[2] Target Content (set2)</span>
   *
   * <div id="target3" class="collapse set2">
   *  <span>[3] Target Content (set2)</span>
   * </div>
   *
   * <div id="master_controller" aria-controls=".set1 .set2" aria-expanded="true" class="collapse_toggle" data-target=".set1 .set2" data-toggle="collapse" role="button"><span id="emp__#">Controller of all</span></div>
   *
   * </div>
   */

  // variables to pass to javascript
  std::string class_name;
  std::vector<std::string> controller1_classes;

  Test_Collapse_String()
  : BaseTest({"emp_test_container"})
  {
    emp::prefab::CollapseCoupling couple1("Controller 1", "[1] Target Content (set1)", true, "set1");
    couple1.AddController("Controller 1.2", true);

    emp::web::Div container("target3");
    emp::prefab::CollapseCoupling couple2("Controller 2", "[2] Target Content (set2)", false, "set2");
    couple2.AddTarget(container, false);
    container << "[3] Target Content (set2)";

    Doc("emp_test_container") << couple1.GetControllerDiv();
    Doc("emp_test_container") << couple1.GetControllerDiv(1);
    Doc("emp_test_container") << couple1.GetTargetDiv();

    emp::web::Div master("master_controller");
    couple1.AddController(master, true);
    couple2.AddController(couple1.GetControllerDiv(2), true);
    master << "Controller of all";

    Doc("emp_test_container") << couple2.GetControllerDiv();
    Doc("emp_test_container") << couple2.GetTargetDiv();
    Doc("emp_test_container") << couple2.GetTargetDiv(1);

    Doc("emp_test_container") << couple2.GetControllerDiv(1);

    // set values to pass to javascript
    class_name = couple1.GetTargetClass();
    std::vector<emp::web::Widget> targets = couple2.GetTargetDivs();
    // put the classes of all the couple2 targets in controller1_classes vector
    std::transform(targets.begin(), targets.end(), std::back_inserter(controller1_classes), [](emp::web::Widget widget) -> std::string {return widget.GetAttr("class");});
  }

  void Describe() override {
    // Pass vector of controllers to JavaScript
    emp::pass_array_to_javascript(controller1_classes);
    // Test that the HTML components created in constructor are correct.
    EM_ASM({

      describe("emp::prefab::Collapse HTML Layout", function() {
        describe("#emp_test_container", function() {
          it('should have 7 children', function() {
            chai.assert.equal(document.getElementById("emp_test_container").childElementCount, 7);
          });
        });

        /*
         * Since the IDs of the collapse elements are generated by Emscripten,
         * we can find out their values here.
         * Note: If the loading modal is removed from DOM, decrement all indicies by 1
         */
        const ctrl_1_id = document.getElementsByTagName("span")[1].getAttribute("id");
        const ctrl_2_id = document.getElementsByTagName("span")[2].getAttribute("id");
        const target_1_id = document.getElementsByTagName("span")[3].getAttribute("id");
        const ctrl_3_id = document.getElementsByTagName("span")[4].getAttribute("id");
        const target_2_id = document.getElementsByTagName("span")[5].getAttribute("id");
        const target_3_id = "target3";
        const ctrl_4_id = "master_controller";

        describe("Controller 1 Initial HTML", function() {
          const controller = document.getElementById(ctrl_1_id);
          it('should have parent #emp_test_container', function() {
            const parent_id = controller.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have no children', function() {
            chai.assert.equal(controller.childElementCount, 0);
          });

          it('should be of type span', function() {
            chai.assert.equal(controller.nodeName, "SPAN");
          });

          it('should have aria-controls set to the class set1', function() {
            chai.assert.equal(controller.getAttribute("aria-controls"), ".set1");
          });

          it('should have aria-expanded set to true', function() {
            chai.assert.equal(controller.getAttribute("aria-expanded"), "true");
          });

          it('should have data-target set to the class set1', function() {
            chai.assert.equal($("#"+ctrl_1_id).attr("data-target"), ".set1");
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute("data-toggle"), "collapse");
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute("role"), "button");
          });

          it('should have class collapse_toggle', function() {
            chai.assert.isTrue(controller.classList.contains("collapse_toggle"));
          });

          it('should not have class collapsed', function() {
            chai.assert.isFalse(controller.classList.contains("collapsed"));
          });
        });

        describe("Controller 2 Initial HTML", function() {
          const controller = document.getElementById(ctrl_2_id);
          it('should have parent #emp_test_container', function() {
            const parent_id = controller.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have no children', function() {
            chai.assert.equal(controller.childElementCount, 0);
          });

          it('should be of type span', function() {
            chai.assert.equal(controller.nodeName, "SPAN");
          });

          it('should have aria-controls set to the class set1', function() {
            chai.assert.equal(controller.getAttribute("aria-controls"), ".set1");
          });

          it('should have aria-expanded set to true', function() {
            chai.assert.equal(controller.getAttribute("aria-expanded"), "true");
          });

          it('should have data-target set to the class set1', function() {
            chai.assert.equal(controller.getAttribute("data-target"), ".set1");
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute("data-toggle"), "collapse");
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute("role"), "button");
          });

          it('should have class collapse_toggle', function() {
            chai.assert.isTrue(controller.classList.contains("collapse_toggle"));
          });

          it('should not have class collapsed', function() {
            chai.assert.isFalse(controller.classList.contains("collapsed"));
          });
        });

        describe("Target 1 Initial HTML", function() {
          const target = document.getElementById(target_1_id);
          it('should have parent #emp_test_container', function() {
            const parent_id = target.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have no children', function() {
            chai.assert.equal(target.childElementCount, 0);
          });

          it('should be of type span', function() {
            chai.assert.equal(target.nodeName, "SPAN");
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(target.classList.contains("collapse"));
          });

          it('should have class show', function() {
            chai.assert.isTrue(target.classList.contains("show"));
          });

          it('should have class set1', function() {
            chai.assert.isTrue(target.classList.contains("set1"));
          });
        });

        describe("Controller 3 Initial HTML", function() {
          const controller = document.getElementById(ctrl_3_id);
          it('should have parent #emp_test_container', function() {
            const parent_id = controller.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have no children', function() {
            chai.assert.equal(controller.childElementCount, 0);
          });

          it('should be of type span', function() {
            chai.assert.equal(controller.nodeName, "SPAN");
          });

          it('should have aria-controls set to the class set2', function() {
            chai.assert.equal(controller.getAttribute("aria-controls"), ".set2");
          });

          it('should have aria-expanded set to false', function() {
            chai.assert.equal(controller.getAttribute("aria-expanded"), "false");
          });

          it('should have data-target set to the class set2', function() {
            chai.assert.equal(controller.getAttribute("data-target"), ".set2");
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute("data-toggle"), "collapse");
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute("role"), "button");
          });

          it('should have class collapse_toggle', function() {
            chai.assert.isTrue(controller.classList.contains("collapse_toggle"));
          });

          // collapsed class only added after controller is clicked, even if the target is initially closed
          it('should not have class collapsed', function() {
            chai.assert.isTrue(controller.classList.contains("collapsed"));
          });
        });

        describe("Target 2 Initial HTML", function() {
          const target = document.getElementById(target_2_id);
          it('should have parent #emp_test_container', function() {
            const parent_id = target.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have no children', function() {
            chai.assert.equal(target.childElementCount, 0);
          });

          it('should be of type span', function() {
            chai.assert.equal(target.nodeName, "SPAN");
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(target.classList.contains("collapse"));
          });

          it('should not have class show', function() {
            chai.assert.isFalse(target.classList.contains("show"));
          });

          it('should have class set2', function() {
            chai.assert.isTrue(target.classList.contains("set2"));
          });
        });

        describe("Target 3 Initial HTML (#target3)", function() {
          const target = document.getElementById(target_3_id);
          it('should have parent #emp_test_container', function() {
            const parent_id = target.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have 1 child', function() {
            chai.assert.equal(target.childElementCount, 1);
          });

          it('should be of type div', function() {
            chai.assert.equal(target.nodeName, "DIV");
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(target.classList.contains("collapse"));
          });

          it('should not have class show', function() {
            chai.assert.isFalse(target.classList.contains("show"));
          });

          it('should have class set2', function() {
            chai.assert.isTrue(target.classList.contains("set2"));
          });
        });

        describe("#target3 child", function() {
          const child = document.getElementById("target3").children[0];
          it('should have parent target wrapper given by CollapseCoupling class', function() {
            const parent_id = child.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, target_3_id);
          });

          it('should have no children', function() {
            chai.assert.equal(child.childElementCount, 0);
          });

          it('should be of type span', function() {
            chai.assert.equal(child.nodeName, "SPAN");
          });
        });

        describe("Controller 4 Initial HTML (#master_controller)", function() {
          const controller = document.getElementById(ctrl_4_id);
          it('should have parent #emp_test_container', function() {
            const parent_id = controller.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have 1 child', function() {
            chai.assert.equal(controller.childElementCount, 1);
          });

          it('should be of type div', function() {
            chai.assert.equal(controller.nodeName, "DIV");
          });

          it('should have aria-controls set to the classes set1 and set2', function() {
            chai.assert.equal(controller.getAttribute("aria-controls"), ".set1 .set2");
          });

          it('should have aria-expanded set to true', function() {
            chai.assert.equal(controller.getAttribute("aria-expanded"), "true");
          });

          it('should have data-target set to the classes set1 set2', function() {
            chai.assert.equal(controller.getAttribute("data-target"), ".set1 .set2");
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute("data-toggle"), "collapse");
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute("role"), "button");
          });

          it('should have class collapse_toggle', function() {
          chai.assert.isTrue(controller.classList.contains("collapse_toggle"));
          });

          it('should false have class collapsed', function() {
          chai.assert.isFalse(controller.classList.contains("collapsed"));
          });
        });

        describe("#master_controller child", function() {
          const child = document.getElementById("master_controller").children[0];
          it('should have parent #master_controller', function() {
            const parent_id = child.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "master_controller");
          });

          it('should have not children', function(){
            chai.assert.equal(child.childElementCount, 0);
          });

          it('should have type span', function(){
            chai.assert.equal(child.nodeName, "SPAN");
          });
        });
      });

      describe("GetClass method for couple1", function() {
        it('should return "set1"', function() {
          chai.assert.equal(UTF8ToString($0), "set1");
        });
      });

      describe("GetTargetDivs method for couple2", function() {
        const js_targets = emp_i.__incoming_array;
        it('should have two targets', function() {
          chai.assert.equal(js_targets.length, 2);
        });

        it('should have class set2 for target 1', function() {
          chai.assert.isTrue(js_targets[0].includes("set2"));
        });

        it('should have class set2 for target 2', function() {
          chai.assert.isTrue(js_targets[1].includes("set2"));
        });
      });

      /*
       * TODO: Once we figure out a way to trigger clicks, run tests to see if
       * target areas collaspse and expand as expected
       *
       *  first click ctrl_1_id --->
       *    ctrl_1_id should have class "collapsed" and aria-expanded="false"
       *    target_1_id should not have class "show"
       *  second click ctrl_1_id --->
       *    ctrl_1_id should not have class "collapsed" and should have aria-expanded="true"
       *    ctrl_2_id should not have class "collapsed" and should have aria-expanded="true"
       *    target_1_id should have class "show"
       *
       *  first click ctrl_2_id --->
       *    ctrl_1_id should have class "collapsed" and aria-expanded="false"
       *    ctrl_2_id should have class "collapsed" and aria-expanded="false"
       *    target_1_id should not have class "show"
       *  second click ctrl_2_id --->
       *    ctrl_1_id should not have class "collapsed" and should have aria-expanded="true"
       *    ctrl_2_id should not have class "collapsed" and should have aria-expanded="true"
       *    target_1_id should have class "show"
       *
       *  first click ctrl_3_id --->
       *    ctrl_3_id should not have class "collapsed" and should have aria-expanded="true"
       *    target_3_id should have class "show"
       *  second click ctrl_3_id --->
       *    ctrl_3_id should have class "collapsed" and aria-expanded="false"
       *    target_3_id should not have class "show"
       *
       *  first click ctrl_4_id --->
       *    ctrl_1_id should have class "collapsed" and aria-expanded="false"
       *    ctrl_2_id should have class "collapsed" and aria-expanded="false"
       *    target_1_id should not have class "show"
       *    ctrl_3_id should not have class "collapsed" and should have aria-expanded="true"
       *    target_3_id should have class "show"
       *  second click ctrl_4_id --->
       *    ctrl_1_id should not have class "collapsed" and should have aria-expanded="true"
       *    ctrl_2_id should not have class "collapsed" and should have aria-expanded="true"
       *    target_1_id should have class "show"
       *    ctrl_3_id should have class "collapsed" and aria-expanded="false"
       *    target_2_id should not have class "show"
       *    target_3_id should not have class "show"
       *
       * Note: Since ctrl_4_id controls multiple targets, it hard to predict its value for aria-expaned
       * and if it will have class collapsed. It seems to depend on which target area was changed last.
       */
    }, class_name.c_str());
  }
};

struct Test_Collapse_Widget : emp::web::BaseTest {

  /*
   * Construct the following HTML structure:
   *
   * <div id="emp_test_container">
   *
   * <div id="btn1" aria-controls=".emp__collapse_class_0" aria-expanded="true" class="btn btn-info collapse_toggle" data-target=".emp__collapse_class_0" data-toggle="collapse" role="button">
   *  <span>Button 1: controls box 1</span>
   * </div>
   *
   * <div id="box1" class="collapse show emp__collapse_class_0">
   *  <span><h3>Box 1</h3></span>
   * </div>
   *
   * <div id="btn2" aria-controls=".emp__collapse_class_1" aria-expanded="false" class="btn btn-info collapse_toggle collapsed" data-target=".emp__collapse_class_1" data-toggle="collapse" role="button">
   *  <span>Button 2: controls box 2</span>
   * </div>
   *
   * <div id="box2" class="collapse emp__collapse_class_1">
   *  <span><h3>Box 2</h3></span>
   * </div>
   *
   * <div id="btn3" aria-controls=".emp__collapse_class_0 .emp__collapse_class_1" aria-expanded="true" class="btn btn-success" data-target=".emp__collapse_class_0 .emp__collapse_class_1" data-toggle="collapse" role="button">
   *  <span>Button 3: controls all boxes</span>
   * </div>
   *
   * </div>
   */

  // variables to pass to javascript
  std::string class_name;
  std::vector<std::string> collapse2_data_targets;

  Test_Collapse_Widget()
  : BaseTest({"emp_test_container"})
  {
    emp::web::Div box1("box1");
    emp::web::Div btn1("btn1");

    box1 << "<h3>Box 1</h3>";
    btn1.SetAttr("class", "btn btn-info");
    btn1 << "Button 1: controls box 1";

    emp::prefab::CollapseCoupling collapse1(btn1, box1, true);
    Doc("emp_test_container") << collapse1.GetControllerDiv();
    Doc("emp_test_container") << collapse1.GetTargetDiv();

    emp::web::Div box2("box2");
    emp::web::Div btn2("btn2");

    box2 << "<h3>Box 2</h3>";
    btn2.SetAttr("class", "btn btn-info");
    btn2 << "Button 2: controls box 2";

    emp::prefab::CollapseCoupling collapse2(btn2, box2, false);
    Doc("emp_test_container") << collapse2.GetControllerDiv();
    Doc("emp_test_container") << collapse2.GetTargetDiv();

    emp::web::Div btn3("btn3");
    collapse1.AddController(btn3, true);
    collapse2.AddController(collapse1.GetControllerDiv(1), true);

    btn3.SetAttr("class", "btn btn-success");
    btn3 << "Button 3: controls all boxes";

    Doc("emp_test_container") << collapse2.GetControllerDiv(1);

    // set values to pass to javascript
    class_name = collapse2.GetTargetClass();
    std::vector<emp::web::Widget> controllers = collapse2.GetControllerDivs();
    // put the data-targets of all the collapse2 controllers in collapse2_data_targets vector
    std::transform(controllers.begin(), controllers.end(), std::back_inserter(collapse2_data_targets), [](emp::web::Widget widget) -> std::string {return widget.GetAttr("data-target");});
  }

  void Describe() override {
    emp::pass_array_to_javascript(collapse2_data_targets);

    // Test that the HTML components created in constructor are correct.
    EM_ASM({

      describe("emp::prefab::Collapse HTML Layout", function() {
        describe("#emp_test_container", function() {
          it('should have 5 children', function() {
            chai.assert.equal(document.getElementById("emp_test_container").childElementCount, 5);
          });
        });

        describe("#btn1 Initial HTML", function() {
          const controller = document.getElementById("btn1");
          it('should have parent #emp_test_container', function() {
            const parent_id = controller.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have 1 child', function() {
            chai.assert.equal(controller.childElementCount, 1);
          });

          it('should be of type div', function() {
            chai.assert.equal(controller.nodeName, "DIV");
          });

          it('should have aria-controls set to the class emp__collapse_class_0', function() {
            chai.assert.equal(controller.getAttribute("aria-controls"), ".emp__collapse_class_0");
          });

          it('should have aria-expanded set to true', function() {
            chai.assert.equal(controller.getAttribute("aria-expanded"), "true");
          });

          it('should have data-target set to the class emp__collapse_class_0', function() {
            chai.assert.equal(controller.getAttribute("data-target"), ".emp__collapse_class_0");
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute("data-toggle"), "collapse");
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute("role"), "button");
          });

          it('should have class collapse_toggle', function() {
            chai.assert.isTrue(controller.classList.contains("collapse_toggle"));
          });

          it('should not have class collapsed', function() {
            chai.assert.isFalse(controller.classList.contains("collapsed"));
          });

          it('should have class btn', function() {
            chai.assert.isTrue(controller.classList.contains("btn"));
          });

          it('should have class btn-info', function() {
            chai.assert.isTrue(controller.classList.contains("btn-info"));
          });
        });

        describe("#btn1 child", function() {
            const child = document.getElementById("btn1").children[0];
            it('should have parent #btn1', function() {
              chai.assert.equal(child.parentElement.getAttribute("id"), "btn1");
            });

            it('should not have children', function() {
              chai.assert.equal(child.childElementCount, 0);
            });

            it('should be type span', function() {
              chai.assert.equal(child.nodeName, "SPAN");
            });
        });

        describe("#box1 Initial HTML", function() {
          const target = document.getElementById("box1");
          it('should have parent #emp_test_container', function() {
            const parent_id = target.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have 1 child', function() {
            chai.assert.equal(target.childElementCount, 1);
          });

          it('should be of type div', function() {
            chai.assert.equal(target.nodeName, "DIV");
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(target.classList.contains("collapse"));
          });

          it('should have class show', function() {
            chai.assert.isTrue(target.classList.contains("show"));
          });

          it('should have class emp__collapse_class_0', function() {
            chai.assert.isTrue(target.classList.contains("emp__collapse_class_0"));
          });
        });

        describe("#box1 child", function() {
          const child = document.getElementById("box1").children[0];
          it('should have parent #box1', function() {
            chai.assert.equal(child.parentElement.getAttribute("id"), "box1");
          });

          it('should have child', function() {
            chai.assert.equal(child.childElementCount, 1);
          });

          it('should have child element h3', function() {
            chai.assert.equal(child.children[0].nodeName, "H3");
          });

          it('should be type span', function() {
            chai.assert.equal(child.nodeName, "SPAN");
          });
        });

        describe("#btn2 Initial HTML", function() {
          const controller = document.getElementById("btn2");
          it('should have parent #emp_test_container', function() {
            const parent_id = controller.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have 1 child', function() {
            chai.assert.equal(controller.childElementCount, 1);
          });

          it('should be of type div', function() {
            chai.assert.equal(controller.nodeName, "DIV");
          });

          it('should have aria-controls set to the class emp__collapse_class_1', function() {
            chai.assert.equal(controller.getAttribute("aria-controls"), ".emp__collapse_class_1");
          });

          it('should have aria-expanded set to false', function() {
            chai.assert.equal(controller.getAttribute("aria-expanded"), "false");
          });

          it('should have data-target set to the class emp__collapse_class_1', function() {
            chai.assert.equal(controller.getAttribute("data-target"), ".emp__collapse_class_1");
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute("data-toggle"), "collapse");
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute("role"), "button");
          });

          it('should have class collapse_toggle', function() {
            chai.assert.isTrue(controller.classList.contains("collapse_toggle"));
          });

          it('should have class collapsed', function() {
            chai.assert.isTrue(controller.classList.contains("collapsed"));
          });

          it('should have class btn', function() {
            chai.assert.isTrue(controller.classList.contains("btn"));
          });

          it('should have class btn-info', function() {
            chai.assert.isTrue(controller.classList.contains("btn-info"));
          });
        });

        describe("#btn2 child", function() {
          const child = document.getElementById("btn2").children[0];
          it('should have parent #btn2', function() {
            chai.assert.equal(child.parentElement.getAttribute("id"), "btn2");
          });

          it('should not have children', function() {
            chai.assert.equal(child.childElementCount, 0);
          });

          it('should be type span', function() {
            chai.assert.equal(child.nodeName, "SPAN");
          });
        });

        describe("#box2 Initial HTML", function() {
          const target = document.getElementById("box2");
          it('should have parent #emp_test_container', function() {
            const parent_id = target.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have 1 child', function() {
            chai.assert.equal(target.childElementCount, 1);
          });

          it('should be of type div', function() {
            chai.assert.equal(target.nodeName, "DIV");
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(target.classList.contains("collapse"));
          });

          it('should not have class show', function() {
            chai.assert.isFalse(target.classList.contains("show"));
          });

          it('should have class emp__collapse_class_1', function() {
            chai.assert.isTrue(target.classList.contains("emp__collapse_class_1"));
          });
        });

        describe("#box2 child", function() {
          const child = document.getElementById("box2").children[0];
          it('should have parent #box2', function() {
            chai.assert.equal(child.parentElement.getAttribute("id"), "box2");
          });

          it('should have 1 child', function() {
            chai.assert.equal(child.childElementCount, 1);
          });

          it('should have child of type h3', function() {
            chai.assert.equal(child.children[0].nodeName, "H3");
          });

          it('should be type span', function() {
            chai.assert.equal(child.nodeName, "SPAN");
          });
        });

        describe("#btn3 Initial HTML", function() {
          const controller = document.getElementById("btn3");
          it('should have parent #emp_test_container', function() {
            const parent_id = controller.parentElement.getAttribute("id");
            chai.assert.equal(parent_id, "emp_test_container");
          });

          it('should have 1 child', function() {
            chai.assert.equal(controller.childElementCount, 1);
          });

          it('should be of type div', function() {
            chai.assert.equal(controller.nodeName, "DIV");
          });

          it('should have aria-controls set to emp__collapse_class_0 and emp__collapse_class_1 ', function() {
            chai.assert.equal(controller.getAttribute("aria-controls"), ".emp__collapse_class_0 .emp__collapse_class_1");
          });

          it('should have aria-expanded set to true', function() {
            chai.assert.equal(controller.getAttribute("aria-expanded"), "true");
          });

          it('should have data-target set to class emp__collapse_class_0 and emp__collapse_class_1', function() {
            chai.assert.equal(controller.getAttribute("data-target"), ".emp__collapse_class_0 .emp__collapse_class_1");
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute("data-toggle"), "collapse");
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute("role"), "button");
          });

          it('should not have class collapse_toggle', function() {
            chai.assert.isFalse(controller.classList.contains("collapse_toggle"));
          });

          // collapsed class only added after controller is clicked, even if the target is initially closed
          it('should not have class collapsed', function() {
            chai.assert.isFalse(controller.classList.contains("collapsed"));
          });

          it('should have class btn', function() {
            chai.assert.isTrue(controller.classList.contains("btn"));
          });

          it('should have class btn-success', function() {
            chai.assert.isTrue(controller.classList.contains("btn-success"));
          });
        });

        describe("#btn3 child", function() {
          const child = document.getElementById("btn3").children[0];
          it('should have parent #btn3', function() {
            chai.assert.equal(child.parentElement.getAttribute("id"), "btn3");
          });

          it('should not have children', function() {
            chai.assert.equal(child.childElementCount, 0);
          });

          it('should be type span', function() {
            chai.assert.equal(child.nodeName, "SPAN");
          });
        });
      });

      describe("GetClass method for collapse2", function(){
        it('should return emp__collapse_class_1', function(){
          chai.assert.equal(UTF8ToString($0), "emp__collapse_class_1");
        });
      });

      describe("GetControllerDivs method for collapse2", function() {
      const js_controllers = emp_i.__incoming_array;
      it('should have two controllers', function() {
        chai.assert.equal(js_controllers.length, 2);
      });

      it('should have the first controller controlling emp__collapse_class_1', function(){
        chai.assert.equal(js_controllers[0], ".emp__collapse_class_1");
      });

      it('should have the second controller controlling emp__collapse_class_0 and emp__collapse_class_1', function(){
        chai.assert.equal(js_controllers[1], ".emp__collapse_class_0 .emp__collapse_class_1");
      });
    });

        /*
         * TODO: Once we figure out a way to trigger clicks, run tests to see if
         * target areas collaspse and expand as expected
         *
         * first click #btn1 --->
         *    #btn1 should have class "collapsed" and aria-expaned="false"
         *    #box1 should not have class "show"
         * second click #btn1 --->
         *    #btn1 should not have class "collapsed" and should have aria-expaned="true"
         *    #box1 should have class "show"
         *
         * first click #btn2 --->
         *    #btn2 should have aria-expaned="true"
         *    #box2 should have class "show"
         * second click #btn2 --->
         *    #btn2 should have class "collapsed" and aria-expaned="false"
         *    #box2 should not have class "show"
         *
         * first click #btn3 --->
         *    #btn1 should have class "collapsed" and aria-expaned="false"
         *    #box1 should not have class "show"
         *    #btn2 should not have class "collapsed" and should have aria-expaned="true"
         *    #box2 should have class "show"
         * second click #btn3 --->
         *    #btn1 should have not class "collapsed" and should have aria-expaned="true"
         *    #box1 should have class "show"
         *    #btn2 should have class "collapsed" and aria-expaned="false"
         *    #box2 should not have class "show"
         *
         * Note: Since btn3 controls multiple targets, it hard to predict its value for aria-expaned and
         * if it will have class collapsed. It seems to depend on which target area was changed last.
         */
    }, class_name.c_str());
  }
};

struct Test_Collapse_Vector : emp::web::BaseTest {

  /*
   * Construct the following HTML structure:
   *
   * <div id="c1" aria-controls=".collapse_id" aria-expanded="true" class="collapse_toggle" data-target=".collapse_id" data-toggle="collapse" role="button">
   *  <span id="emp__0">controller 1</span>
   * </div>
   * <button id="c2" aria-controls=".collapse_id" aria-expanded="true" class="collapse_toggle" data-target=".collapse_id" data-toggle="collapse" onclick="emp.Callback(2)" role="button">
   *  button controller
   * </button>
   *
   * <div id="t1" class="collapse show collapse_id">
   *  <span id="emp__2">target 1</span>
   * </div>
   * <div id="t2" class="collapse show collapse_id">
   *  <span id="emp__3">target 2</span>
   * </div>
   * <div id="t3" class="collapse show collapse_id">
   *  <span id="emp__4">target 2</span>
   * </div>
   */

  Test_Collapse_Vector()
  : BaseTest({"emp_test_container"})
  {
    emp::vector<emp::web::Widget> controllers;
    emp::vector<emp::web::Widget> targets;

    emp::web::Div c1("c1");
    emp::web::Button c2([](){}, "button controller", "c2");
    emp::web::Div t1("t1");
    emp::web::Div t2("t2");
    emp::web::Div t3("t3");

    c1 << "controller 1";
    t1 << "target 1";
    t2 << "target 2";
    t3 << "target 2";

    controllers.push_back(c1);
    controllers.push_back(c2);
    targets.push_back(t1);
    targets.push_back(t2);
    targets.push_back(t3);

    emp::prefab::CollapseCoupling collapsed(controllers, targets, true, "collapse_id");
    Doc("emp_test_container") << collapsed.GetControllerDiv(0);
    Doc("emp_test_container") << collapsed.GetControllerDiv(1);
    Doc("emp_test_container") << collapsed.GetTargetDiv(0);
    Doc("emp_test_container") << collapsed.GetTargetDiv(1);
    Doc("emp_test_container") << collapsed.GetTargetDiv(2);
  }

  void Describe() override {
    EM_ASM({

      describe("Initial HTML - Collapse Vector Constructor", function() {
        const test_container = document.getElementById('emp_test_container');
        it('should have 5 elements on the page', function() {
          chai.assert.equal(test_container.childElementCount, 5);
        });

        describe("Child 1 - Controller 1", function() {
          const controller = test_container.children[0];
          it('should have id c1', function() {
            chai.assert.equal(controller.id, "c1");
          });

          it('should be a DIV element', function() {
            chai.assert.equal(controller.nodeName, "DIV");
          });

          it('should have 1 child', function() {
            chai.assert.equal(controller.childElementCount, 1);
          });

          it('should have aria-controls set to collapse_id', function() {
            chai.assert.equal(controller.getAttribute("aria-controls"), ".collapse_id");
          });

          it('should have aria-expanded set to true', function() {
            chai.assert.equal(controller.getAttribute("aria-expanded"), "true");
          });

          it('should have data-target set to collapse_id', function() {
            chai.assert.equal(controller.getAttribute("data-target"), ".collapse_id");
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute("data-toggle"), "collapse");
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute("role"), "button");
          });

          it('should have class collapse_toggle', function() {
            chai.assert.isTrue(controller.classList.contains("collapse_toggle"));
          });
        });

        describe("Child 2 - Controller 2", function() {
          const controller = test_container.children[1];
          it('should have id c2', function() {
            chai.assert.equal(controller.id, "c2");
          });

          it('should be a BUTTON element', function() {
            chai.assert.equal(controller.nodeName, "BUTTON");
          });

          it('should have no children', function() {
            chai.assert.equal(controller.childElementCount, 0);
          });

          it('should have aria-controls set to collapse_id', function() {
            chai.assert.equal(controller.getAttribute("aria-controls"), ".collapse_id");
          });

          it('should have aria-expanded set to true', function() {
            chai.assert.equal(controller.getAttribute("aria-expanded"), "true");
          });

          it('should have data-target set to collapse_id', function() {
            chai.assert.equal(controller.getAttribute("data-target"), ".collapse_id");
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute("data-toggle"), "collapse");
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute("role"), "button");
          });

          it('should have class collapse_toggle', function() {
            chai.assert.isTrue(controller.classList.contains("collapse_toggle"));
          });
        });

        describe("Child 3 - Target 1", function() {
          const child = test_container.children[2];
          it('should have id t1', function() {
            chai.assert.equal(child.id, "t1");
          });

          it('should be a DIV element', function() {
            chai.assert.equal(child.nodeName, "DIV");
          });

          it('should have 1 child', function() {
            chai.assert.equal(child.childElementCount, 1);
          });

          it('should have class collapse_id', function() {
            chai.assert.isTrue(child.classList.contains("collapse_id"));
          });

          it('should have class show', function() {
            chai.assert.isTrue(child.classList.contains("show"));
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(child.classList.contains("collapse"));
          });
        });

        describe("Child 4 - Target 2", function() {
          const child = test_container.children[3];
          it('should have id t2', function() {
            chai.assert.equal(child.id, "t2");
          });

          it('should be a DIV element', function() {
            chai.assert.equal(child.nodeName, "DIV");
          });

          it('should have 1 child', function() {
            chai.assert.equal(child.childElementCount, 1);
          });

          it('should have class collapse_id', function() {
            chai.assert.isTrue(child.classList.contains("collapse_id"));
          });

          it('should have class show', function() {
            chai.assert.isTrue(child.classList.contains("show"));
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(child.classList.contains("collapse"));
          });
        });

        describe("Child 5 - Target 3", function() {
          const child = test_container.children[4];
          it('should have id t3', function() {
            chai.assert.equal(child.id, "t3");
          });

          it('should be a DIV element', function() {
            chai.assert.equal(child.nodeName, "DIV");
          });

          it('should have 1 child', function() {
            chai.assert.equal(child.childElementCount, 1);
          });

          it('should have class collapse_id', function() {
            chai.assert.isTrue(child.classList.contains("collapse_id"));
          });

          it('should have class show', function() {
            chai.assert.isTrue(child.classList.contains("show"));
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(child.classList.contains("collapse"));
          });
        });

      }); // end initial HTML

      /* TODO: Click tests
       * first click #c1 --->
       *    #c1 should have class "collapsed" and aria-expaned="false"
       *    #c2 should have class "collapsed" and aria-expaned="false"
       *    #t1 should not have class "show"
       *    #t2 should not have class "show"
       *    #t3 should not have class "show"
       * second click #c1 --->
       *    #c1 should not have class "collapsed" and should have aria-expaned="true"
       *    #c2 should not have class "collapsed" and should have aria-expaned="true"
       *    #t1 should have class "show"
       *    #t2 should have class "show"
       *    #t3 should have class "show"
       *
       * first click #c2 --->
       *    #c1 should have class "collapsed" and aria-expaned="false"
       *    #c2 should have class "collapsed" and aria-expaned="false"
       *    #t1 should not have class "show"
       *    #t2 should not have class "show"
       *    #t3 should not have class "show"
       * second click #c2 --->
       *    #c1 should not have class "collapsed" and should have aria-expaned="true"
       *    #c2 should not have class "collapsed" and should have aria-expaned="true"
       *    #t2 should have class "show"
       *    #t3 should have class "show"
      */

    }); // end EM_ASM
  }
};

struct Test_Expand_On_Click : emp::web::BaseTest {

  /*
   * Construct the following HTML structure:
   *
   * <span id="emp__1" aria-controls=".collapse_id" aria-expanded="false" class="collapse_toggle collapsed" data-target=".collapse_id" data-toggle="collapse" role="button">
   * Controller1
   * </span>
   *
   * <span id="emp__3" class="collapse collapse_id">Target1</span>
   */

  Test_Expand_On_Click()
  : BaseTest({"emp_test_container"})
  {

    emp::prefab::CollapseCoupling collapsed("Controller1", "Target1", false, "collapse_id");
    Doc("emp_test_container") << collapsed.GetControllerDiv();
    Doc("emp_test_container") << collapsed.GetTargetDiv();

  }

  void Describe() override {
    EM_ASM({
      const controller = document.getElementsByClassName('collapse_toggle')[0];
      const target = document.getElementsByClassName('collapse_id')[0];

      describe("Initial DOM, Collapsed", function() {

        describe("Controller", function() {
          it('should have aria-controls set to collapse_id class', function() {
            chai.assert.equal(controller.getAttribute('aria-controls'), '.collapse_id');
          });

          it('should have aria-expanded set to false', function() {
            chai.assert.equal(controller.getAttribute('aria-expanded'), 'false');
          });

          it('should have class collapse_toggle', function() {
            chai.assert.isTrue(controller.classList.contains('collapse_toggle'));
          });

          it('should have class collapsed', function() {
            chai.assert.isTrue(controller.classList.contains('collapsed'));
          });

          it('should have data-target set to .collapse_id', function() {
            chai.assert.equal(controller.getAttribute('data-target'), '.collapse_id');
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute('data-toggle'), 'collapse');
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute('role'), 'button');
          });
        });

        describe("Target", function() {
          it('should have class collapse_id', function() {
            chai.assert.isTrue(target.classList.contains('collapse_id'));
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(target.classList.contains('collapse'));
          });

          it('should not have class show', function() {
            chai.assert.isFalse(target.classList.contains('show'));
          });
        });

      });

      describe("DOM after first click of controller", function() {

        describe("Controller", function() {
          it('should have aria-expanded set to true', function() {
            controller.click();
            chai.assert.equal(controller.getAttribute('aria-expanded'), 'true');
          });

          it('should not have class collapsed', function() {
            chai.assert.isFalse(controller.classList.contains('collapsed'));
          });
        });

        describe("Target", function() {
          it('should have class show', function() {
            setTimeout(function() {
              chai.assert.isTrue(target.classList.contains("show"));
            }, 3000);
          });
        });

      });

      // TODO: When Issue 368 is resolved, implement here
      // https://github.com/devosoft/Empirical/issues/368
      // describe("DOM after second click of controller", function() {

        // describe("Controller", function() {
        //   it('should have aria-expanded set to false', function() {
        //     controller.click();
        //     chai.assert.equal(controller.getAttribute('aria-expanded'), 'false');
        //   });

        //   it('should have class collapsed', function() {
        //     chai.assert.isTrue(controller.classList.contains('collapsed'));
        //   });
        // });

        // describe("Target", function() {
        //   it('should not have class show', function() {
        //     chai.assert.isFalse(target.classList.contains('show'));
        //   });
        // });

      });

    }
  };

struct Test_Collapse_On_Click : emp::web::BaseTest {

  /*
   * Construct the following HTML structure:
   *
   * <span id="emp__1" aria-controls=".collapse_id" aria-expanded="true" class="collapse_toggle" data-target=".collapse_id" data-toggle="collapse" role="button">
   * Controller1
   * </span>
   *
   * <span id="emp__3" class="collapse show collapse_id">Target1</span>
   */

  Test_Collapse_On_Click()
  : BaseTest({"emp_test_container"})
  {
    emp::prefab::CollapseCoupling collapsed("Controller1", "Target1", true, "collapse_id");
    Doc("emp_test_container") << collapsed.GetControllerDiv();
    Doc("emp_test_container") << collapsed.GetTargetDiv();
  }

  void Describe() override {
    EM_ASM({
      const controller = document.getElementsByClassName('collapse_toggle')[0];
      const target = document.getElementsByClassName('collapse_id')[0];

      describe("Initial DOM, Expanded", function() {

        describe("Controller", function() {
          it('should have aria-controls set to collapse_id class', function() {
            chai.assert.equal(controller.getAttribute('aria-controls'), '.collapse_id');
          });

          it('should have aria-expanded set to true', function() {
            chai.assert.equal(controller.getAttribute('aria-expanded'), 'true');
          });

          it('should have class collapse_toggle', function() {
            chai.assert.isTrue(controller.classList.contains('collapse_toggle'));
          });

          it('should not have class collapsed', function() {
            chai.assert.isFalse(controller.classList.contains('collapsed'));
          });

          it('should have data-target set to .collapse_id', function() {
            chai.assert.equal(controller.getAttribute('data-target'), '.collapse_id');
          });

          it('should have data-toggle set to collapse', function() {
            chai.assert.equal(controller.getAttribute('data-toggle'), 'collapse');
          });

          it('should have role set to button', function() {
            chai.assert.equal(controller.getAttribute('role'), 'button');
          });
        });

        describe("Target", function() {
          it('should have class collapse_id', function() {
            chai.assert.isTrue(target.classList.contains('collapse_id'));
          });

          it('should have class collapse', function() {
            chai.assert.isTrue(target.classList.contains('collapse'));
          });

          it('should have class show', function() {
            setTimeout(function() {
              chai.assert.isTrue(target.classList.contains("show"));
            }, 3000);
          });
        });

      });

      describe("DOM after first click of controller", function() {

        describe("Controller", function() {
          it('should have aria-expanded set to false', function() {
            controller.click();
            chai.assert.equal(controller.getAttribute('aria-expanded'), 'false');
          });

          it('should have class collapsed', function() {
            chai.assert.isTrue(controller.classList.contains('collapsed'));
          });
        });

        describe("Target", function() {
          it('should not have class show', function() {
            chai.assert.isFalse(target.classList.contains('show'));
          });
        });

      });

      // TODO: When Issue 368 is resolved, implement here
      // https://github.com/devosoft/Empirical/issues/368
      // describe("DOM after second click of controller", function() {

      //   describe("Controller", function() {
      //     it('should have aria-expanded set to true', function() {
      //       controller.click();
      //       chai.assert.equal(controller.getAttribute('aria-expanded'), 'true');
      //     });

      //     it('should not have class collapsed', function() {
      //       chai.assert.isFalse(controller.classList.contains('collapsed'));
      //     });
      //   });

      //   describe("Target", function() {
      //     it('should have class show', function() {
      //       setTimeout(function() {
      //         chai.assert.isTrue(target.classList.contains("show"));
      //       }, 3000);
      //     });
      //   });

      // });

    });
  }
};

emp::web::MochaTestRunner test_runner;
int main() {

  test_runner.Initialize({"emp_test_container"});

  test_runner.AddTest<Test_Collapse_String>("Test emp::prefab::Collapse String Constructor");
  test_runner.AddTest<Test_Collapse_Widget>("Test emp::prefab::Collapse Widget Constructor");
  test_runner.AddTest<Test_Collapse_Vector>("Test emp::prefab::Collapse Vector Constructor");
  test_runner.AddTest<Test_Expand_On_Click>("Test emp::prefab::Collapse Initially Collapsed");
  test_runner.AddTest<Test_Collapse_On_Click>("Test emp::prefab::Collapse Initially Expanded");

  test_runner.Run();
}
