selector_to_html = {"a[href=\"api/Lexer.html#_CPPv4N11TokenStream11TokenStreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream11TokenStreamERKNSt6stringE\">\n<span id=\"_CPPv3N11TokenStream11TokenStreamERKNSt6stringE\"></span><span id=\"_CPPv2N11TokenStream11TokenStreamERKNSt6stringE\"></span><span id=\"TokenStream::TokenStream__ssCR\"></span><span class=\"target\" id=\"classTokenStream_1a9ba8f01fe52e87fc8e70a9a9fc4ee957\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_name</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA6IsStopE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA6IsStopE6size_t\">\n<span id=\"_CPPv3NK4tNFA6IsStopE6size_t\"></span><span id=\"_CPPv2NK4tNFA6IsStopE6size_t\"></span><span id=\"tNFA::IsStop__sC\"></span><span class=\"target\" id=\"classtNFA_1a863072918322e96f406d1146c90cb598\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Test if this state is a legal endpoint for the NFA. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx8GenerateEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx8GenerateEv\">\n<span id=\"_CPPv3NK5RegEx8GenerateEv\"></span><span id=\"_CPPv2NK5RegEx8GenerateEv\"></span><span id=\"RegEx::GenerateC\"></span><span class=\"target\" id=\"classRegEx_1af6f8af3571bec840cd9d7b7e77f334b1\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Generate</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Assume the RegEx is ready and setup processing for it. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx7re_star8AddToNFAER3NFA6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx7re_star8AddToNFAER3NFA6size_t6size_t\">\n<span id=\"_CPPv3NK5RegEx7re_star8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"_CPPv2NK5RegEx7re_star8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"RegEx::re_star::AddToNFA__NFAR.s.sC\"></span><span class=\"target\" id=\"structRegEx_1_1re__star_1a6d3bf1803edbec79cfb3354423bdf822\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA17AddFreeTransitionE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA17AddFreeTransitionE6size_t6size_t\">\n<span id=\"_CPPv3N4tNFA17AddFreeTransitionE6size_t6size_t\"></span><span id=\"_CPPv2N4tNFA17AddFreeTransitionE6size_t6size_t\"></span><span id=\"tNFA::AddFreeTransition__s.s\"></span><span class=\"target\" id=\"classtNFA_1aee61629c585ab480d73dd21fb790115e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddFreeTransition</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">to</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Create a free transition between \u2018from\u2019 and \u2018to\u2019. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9dfa_readyE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9dfa_readyE\">\n<span id=\"_CPPv3N5RegEx9dfa_readyE\"></span><span id=\"_CPPv2N5RegEx9dfa_readyE\"></span><span id=\"RegEx::dfa_ready__b\"></span><span class=\"target\" id=\"classRegEx_1a5c208c5332ce090fe44bff2bff8a25b9\"></span><span class=\"k\"><span class=\"pre\">mutable</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">dfa_ready</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><br/></dt><dd><p>Is the dfa ready? (or does it need to be generated?) </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_base7AsBlockEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_base7AsBlockEv\">\n<span id=\"_CPPv3N5RegEx7re_base7AsBlockEv\"></span><span id=\"_CPPv2N5RegEx7re_base7AsBlockEv\"></span><span id=\"RegEx::re_base::AsBlock\"></span><span class=\"target\" id=\"structRegEx_1_1re__base_1af85e0d1237e0b9054550ba8fb81a2835\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx8re_blockE\" title=\"RegEx::re_block\"><span class=\"n\"><span class=\"pre\">re_block</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AsBlock</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_string8AsStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_string8AsStringEv\">\n<span id=\"_CPPv3N5RegEx9re_string8AsStringEv\"></span><span id=\"_CPPv2N5RegEx9re_string8AsStringEv\"></span><span id=\"RegEx::re_string::AsString\"></span><span class=\"target\" id=\"structRegEx_1_1re__string_1a4d7e51b4ece8bc99f281d895eb277c56\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_stringE\" title=\"RegEx::re_string\"><span class=\"n\"><span class=\"pre\">re_string</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AsString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv49NFA_State\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49NFA_State\">\n<span id=\"_CPPv39NFA_State\"></span><span id=\"_CPPv29NFA_State\"></span><span class=\"target\" id=\"NFA_8hpp_1a853fbe64b1cb376cd90366b8b4b7135f\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NFA_State</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E10tNFA_State\" title=\"tNFA_State\"><span class=\"n\"><span class=\"pre\">tNFA_State</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"m\"><span class=\"pre\">128</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>NFA_State is the most standard tNFA_State setup. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx7re_plus5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx7re_plus5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK5RegEx7re_plus5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK5RegEx7re_plus5PrintERNSt7ostreamE\"></span><span id=\"RegEx::re_plus::Print__osRC\"></span><span class=\"target\" id=\"structRegEx_1_1re__plus_1aa7f67945904aad0ce0f432400c089315\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3N4tDFA5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2N4tDFA5PrintERNSt7ostreamE\"></span><span id=\"tDFA::Print__osR\"></span><span class=\"target\" id=\"classtDFA_1a7bed400c9786765a40ef2bd6ad7021d1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Print details about this DFA. </p></dd>", "a[href=\"api/lexer_utils.html#_CPPv4I0E8MergeNFA3NFARR2T1\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E8MergeNFA3NFARR2T1\">\n<span id=\"_CPPv3I0E8MergeNFARR2T1\"></span><span id=\"_CPPv2I0E8MergeNFARR2T1\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T1</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"group__lexer__utilities_1ga4b727106d906a24fb25bf80921ba194c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MergeNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E8MergeNFA3NFARR2T1\" title=\"MergeNFA::T1\"><span class=\"n\"><span class=\"pre\">T1</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Merge multiple automata into one NFA (base case, single conversion) </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8Iterator8GetIndexEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8Iterator8GetIndexEv\">\n<span id=\"_CPPv3NK11TokenStream8Iterator8GetIndexEv\"></span><span id=\"_CPPv2NK11TokenStream8Iterator8GetIndexEv\"></span><span id=\"TokenStream::Iterator::GetIndexC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1aa6766773adfb469e992ad8bbc1d466fc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA6opts_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA6opts_tE\">\n<span id=\"_CPPv3N4tNFA6opts_tE\"></span><span id=\"_CPPv2N4tNFA6opts_tE\"></span><span class=\"target\" id=\"classtNFA_1ab037f20d5ecf6572022453327c233508\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">opts_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4I_6size_tE6BitSet\" title=\"BitSet\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA11NUM_SYMBOLSE\" title=\"tNFA::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA4NextEi6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA4NextEi6size_t\">\n<span id=\"_CPPv3NK4tDFA4NextEi6size_t\"></span><span id=\"_CPPv2NK4tDFA4NextEi6size_t\"></span><span id=\"tDFA::Next__i.sC\"></span><span class=\"target\" id=\"classtDFA_1ac8aa66eeb4cc761e9ade6779958900bd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Next</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sym</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the new state after a symbol occurs. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4IDpEN5RegEx5ErrorEvDpRR1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IDpEN5RegEx5ErrorEvDpRR1T\">\n<span id=\"_CPPv3IDpEN5RegEx5ErrorEDpRR1T\"></span><span id=\"_CPPv2IDpEN5RegEx5ErrorEDpRR1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classRegEx_1a8f3ebc07e5d4e4c43883187cb81327f2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Error</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4IDpEN5RegEx5ErrorEvDpRR1T\" title=\"RegEx::Error::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">args</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer9lexer_dfaE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer9lexer_dfaE\">\n<span id=\"_CPPv3N5Lexer9lexer_dfaE\"></span><span id=\"_CPPv2N5Lexer9lexer_dfaE\"></span><span id=\"Lexer::lexer_dfa__DFA\"></span><span class=\"target\" id=\"classLexer_1a4faaf2de94c9dc6683223100a5143510\"></span><span class=\"k\"><span class=\"pre\">mutable</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/DFA.html#_CPPv43DFA\" title=\"DFA\"><span class=\"n\"><span class=\"pre\">DFA</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">lexer_dfa</span></span></span><br/></dt><dd><p>Table driven lexer implementation. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer8TokenizeERK6vectorINSt6stringEERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer8TokenizeERK6vectorINSt6stringEERKNSt6stringE\">\n<span id=\"_CPPv3NK5Lexer8TokenizeERK6vectorINSt6stringEERKNSt6stringE\"></span><span id=\"_CPPv2NK5Lexer8TokenizeERK6vectorINSt6stringEERKNSt6stringE\"></span><span id=\"Lexer::Tokenize__vector:ss:CR.ssCRC\"></span><span class=\"target\" id=\"classLexer_1af9821433f7bbd851acbe4b70a961feb3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Tokenize</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str_v</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">name</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"in_string</span> <span class=\"pre\">vector\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Turn a vector of strings into a vector of tokens. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer6lexemeE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer6lexemeE\">\n<span id=\"_CPPv3N5Lexer6lexemeE\"></span><span id=\"_CPPv2N5Lexer6lexemeE\"></span><span id=\"Lexer::lexeme__ss\"></span><span class=\"target\" id=\"classLexer_1a2df0f3b2ce2bbc03da92459d68c365d6\"></span><span class=\"k\"><span class=\"pre\">mutable</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">lexeme</span></span></span><br/></dt><dd><p>Current state of lexeme being generated. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx9re_string8AddToNFAER3NFA6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx9re_string8AddToNFAER3NFA6size_t6size_t\">\n<span id=\"_CPPv3NK5RegEx9re_string8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"_CPPv2NK5RegEx9re_string8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"RegEx::re_string::AddToNFA__NFAR.s.sC\"></span><span class=\"target\" id=\"structRegEx_1_1re__string_1a135028c95e3868993630b3fd9e4a9424\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfoaSERR9TokenInfo\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfoaSERR9TokenInfo\">\n<span id=\"_CPPv3N9TokenInfoaSERR9TokenInfo\"></span><span id=\"_CPPv2N9TokenInfoaSERR9TokenInfo\"></span><span id=\"TokenInfo::assign-operator__TokenInfoRR\"></span><span class=\"target\" id=\"structTokenInfo_1a7d65d5ef2a85e40f2b4381a6f6eff79c\"></span><a class=\"reference internal\" href=\"#_CPPv49TokenInfo\" title=\"TokenInfo\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv49TokenInfo\" title=\"TokenInfo\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"#api\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">API<a class=\"headerlink\" href=\"#api\" title=\"Link to this heading\">\uf0c1</a></h2>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK11TokenStream5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK11TokenStream5PrintERNSt7ostreamE\"></span><span id=\"TokenStream::Print__osRC\"></span><span class=\"target\" id=\"classTokenStream_1a44c955528a6c5ab9381b136e2c8a7caf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">RegEx.hpp<a class=\"headerlink\" href=\"#regex-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Basic regular expression handler. </p><p>\nA fully (well, mostly) functional regular expression processor.</p>", "a[href=\"api/NFA.html#_CPPv4N4tNFA13AddTransitionE6size_t6size_tRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA13AddTransitionE6size_t6size_tRKNSt6stringE\">\n<span id=\"_CPPv3N4tNFA13AddTransitionE6size_t6size_tRKNSt6stringE\"></span><span id=\"_CPPv2N4tNFA13AddTransitionE6size_t6size_tRKNSt6stringE\"></span><span id=\"tNFA::AddTransition__s.s.ssCR\"></span><span class=\"target\" id=\"classtNFA_1a1394648b4c75807e1cbaa46a74dfe436\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddTransition</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">to</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">sym_set</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add a transition between states \u2018from\u2019 and \u2018to\u2019 that can be taken with the provided symbols. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx10re_charset5FirstEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx10re_charset5FirstEv\">\n<span id=\"_CPPv3NK5RegEx10re_charset5FirstEv\"></span><span id=\"_CPPv2NK5RegEx10re_charset5FirstEv\"></span><span id=\"RegEx::re_charset::FirstC\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset_1a20108cd74515ab64ff3ec37e4c83844e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">First</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State10tNFA_StateERK4tNFAI11NUM_SYMBOLS9STOP_TYPEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State10tNFA_StateERK4tNFAI11NUM_SYMBOLS9STOP_TYPEE\">\n<span id=\"_CPPv3N10tNFA_State10tNFA_StateERK4tNFAI11NUM_SYMBOLS9STOP_TYPEE\"></span><span id=\"_CPPv2N10tNFA_State10tNFA_StateERK4tNFAI11NUM_SYMBOLS9STOP_TYPEE\"></span><span id=\"tNFA_State::tNFA_State__tNFA:NUM_SYMBOLS.STOP_TYPE:CR\"></span><span class=\"target\" id=\"classtNFA__State_1a2a2d7357147714934acc8973f9eb5bb3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tNFA_State</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E10tNFA_State\" title=\"tNFA_State::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E10tNFA_State\" title=\"tNFA_State::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_nfa</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_parent8AsParentEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_parent8AsParentEv\">\n<span id=\"_CPPv3N5RegEx9re_parent8AsParentEv\"></span><span id=\"_CPPv2N5RegEx9re_parent8AsParentEv\"></span><span id=\"RegEx::re_parent::AsParent\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent_1a43ebf3b788877274f1eada6eec4a5bc4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_parentE\" title=\"RegEx::re_parent\"><span class=\"n\"><span class=\"pre\">re_parent</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AsParent</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream11TokenStreamERK6vectorI5TokenERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream11TokenStreamERK6vectorI5TokenERKNSt6stringE\">\n<span id=\"_CPPv3N11TokenStream11TokenStreamERK6vectorI5TokenERKNSt6stringE\"></span><span id=\"_CPPv2N11TokenStream11TokenStreamERK6vectorI5TokenERKNSt6stringE\"></span><span id=\"TokenStream::TokenStream__vector:Token:CR.ssCR\"></span><span class=\"target\" id=\"classTokenStream_1ad1a1157fedf941cc5dbdb05222dbe4df\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_tokens</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_name</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer12GetSaveTokenEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer12GetSaveTokenEi\">\n<span id=\"_CPPv3NK5Lexer12GetSaveTokenEi\"></span><span id=\"_CPPv2NK5Lexer12GetSaveTokenEi\"></span><span id=\"Lexer::GetSaveToken__iC\"></span><span class=\"target\" id=\"classLexer_1ad7d56cac0eedf8fb253a8bb96277e6ce\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSaveToken</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Identify if a token should be saved. </p></dd>", "a[href=\"api/RegEx.html#_CPPv46to_DFARK5RegEx\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46to_DFARK5RegEx\">\n<span id=\"_CPPv36to_DFARK5RegEx\"></span><span id=\"_CPPv26to_DFARK5RegEx\"></span><span id=\"to_DFA__RegExCR\"></span><span class=\"target\" id=\"RegEx_8hpp_1ad98491cb6e0de7f368d60030032160eb\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/DFA.html#_CPPv43DFA\" title=\"DFA\"><span class=\"n\"><span class=\"pre\">DFA</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_DFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">regex</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Conversion of RegEx to DFA, via NFA intermediate. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_base9AsCharSetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_base9AsCharSetEv\">\n<span id=\"_CPPv3N5RegEx7re_base9AsCharSetEv\"></span><span id=\"_CPPv2N5RegEx7re_base9AsCharSetEv\"></span><span id=\"RegEx::re_base::AsCharSet\"></span><span class=\"target\" id=\"structRegEx_1_1re__base_1a257abfca343c79b209852c6c72607304\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx10re_charsetE\" title=\"RegEx::re_charset\"><span class=\"n\"><span class=\"pre\">re_charset</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AsCharSet</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer5LexerERK5Lexer\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer5LexerERK5Lexer\">\n<span id=\"_CPPv3N5Lexer5LexerERK5Lexer\"></span><span id=\"_CPPv2N5Lexer5LexerERK5Lexer\"></span><span id=\"Lexer::Lexer__LexerCR\"></span><span class=\"target\" id=\"classLexer_1ae868294d65394f011a29ed122c883f6b\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N5Lexer5LexerERK5Lexer\" title=\"Lexer::Lexer\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8IteratorE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8IteratorE\">\n<span id=\"_CPPv3N11TokenStream8IteratorE\"></span><span id=\"_CPPv2N11TokenStream8IteratorE\"></span><span id=\"TokenStream::Iterator\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5regexE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5regexE\">\n<span id=\"_CPPv3N5RegEx5regexE\"></span><span id=\"_CPPv2N5RegEx5regexE\"></span><span id=\"RegEx::regex__ss\"></span><span class=\"target\" id=\"classRegEx_1a4289a755cf62790cf9ee74a2c1d554fb\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">regex</span></span></span><br/></dt><dd><p>Original string to define this RegEx. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5TokencviEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5TokencviEv\">\n<span id=\"_CPPv3NK5TokencviEv\"></span><span id=\"_CPPv2NK5TokencviEv\"></span><span id=\"Token::castto-i-operatorC\"></span><span class=\"target\" id=\"structToken_1ae9a4eb419bd82fc8eda72543a4a1d452\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Token will automatically convert to its ID if used as an int. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx3dfaE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx3dfaE\">\n<span id=\"_CPPv3N5RegEx3dfaE\"></span><span id=\"_CPPv2N5RegEx3dfaE\"></span><span id=\"RegEx::dfa__DFA\"></span><span class=\"target\" id=\"classRegEx_1a36f9be1f858b2836342649ceaa29bbcf\"></span><span class=\"k\"><span class=\"pre\">mutable</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/DFA.html#_CPPv43DFA\" title=\"DFA\"><span class=\"n\"><span class=\"pre\">DFA</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">dfa</span></span></span><br/></dt><dd><p>DFA that this RegEx translates to. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_parentD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_parentD0Ev\">\n<span id=\"_CPPv3N5RegEx9re_parentD0Ev\"></span><span id=\"_CPPv2N5RegEx9re_parentD0Ev\"></span><span id=\"RegEx::re_parent::~re_parent\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent_1adf5719392978c25ee34a1804b903d516\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~re_parent</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA14PrintFreeMovesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA14PrintFreeMovesEv\">\n<span id=\"_CPPv3N4tNFA14PrintFreeMovesEv\"></span><span id=\"_CPPv2N4tNFA14PrintFreeMovesEv\"></span><span id=\"tNFA::PrintFreeMoves\"></span><span class=\"target\" id=\"classtNFA_1a4383e831a3563a1bffff20023e207850\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintFreeMoves</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Identify free moves in NFA (for debugging) </p></dd>", "a[href=\"api/NFA.html#_CPPv4NK10tNFA_State6IsStopEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK10tNFA_State6IsStopEv\">\n<span id=\"_CPPv3NK10tNFA_State6IsStopEv\"></span><span id=\"_CPPv2NK10tNFA_State6IsStopEv\"></span><span id=\"tNFA_State::IsStopC\"></span><span class=\"target\" id=\"classtNFA__State_1ab3d3580004f3bb38c0a00742cfb09c29\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Can we legally stop in any of the current states? </p></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA7SetStopE6size_t6stop_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA7SetStopE6size_t6stop_t\">\n<span id=\"_CPPv3N4tDFA7SetStopE6size_t6stop_t\"></span><span id=\"_CPPv2N4tDFA7SetStopE6size_t6stop_t\"></span><span id=\"tDFA::SetStop__s.stop_t\"></span><span class=\"target\" id=\"classtDFA_1a345916fa30bed9825de17145d099d8d1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span>, <a class=\"reference internal\" href=\"#_CPPv4N4tDFA6stop_tE\" title=\"tDFA::stop_t\"><span class=\"n\"><span class=\"pre\">stop_t</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set the stop value (no matter what it currently is) </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx10re_charset7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx10re_charset7GetSizeEv\">\n<span id=\"_CPPv3NK5RegEx10re_charset7GetSizeEv\"></span><span id=\"_CPPv2NK5RegEx10re_charset7GetSizeEv\"></span><span id=\"RegEx::re_charset::GetSizeC\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset_1a14c52e59f02da477452f6d3d66cdd83d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_parent5ClearEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_parent5ClearEv\">\n<span id=\"_CPPv3N5RegEx9re_parent5ClearEv\"></span><span id=\"_CPPv2N5RegEx9re_parent5ClearEv\"></span><span id=\"RegEx::re_parent::Clear\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent_1a533032cab1c827ea6573ab7d5ab14090\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx10re_charset10re_charsetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx10re_charset10re_charsetEv\">\n<span id=\"_CPPv3N5RegEx10re_charset10re_charsetEv\"></span><span id=\"_CPPv2N5RegEx10re_charset10re_charsetEv\"></span><span id=\"RegEx::re_charset::re_charset\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset_1a40c4afdd0d319ccee4d6ef060a0ef027\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_charset</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8IteratorppEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8IteratorppEi\">\n<span id=\"_CPPv3N11TokenStream8IteratorppEi\"></span><span id=\"_CPPv2N11TokenStream8IteratorppEi\"></span><span id=\"TokenStream::Iterator::inc-operator__i\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1ab44c6663b2826677ceb155f9661584e1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">++</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/lexer_utils.html#_CPPv411FindExampleRK3DFAK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411FindExampleRK3DFAK6size_t\">\n<span id=\"_CPPv311FindExampleRK3DFAK6size_t\"></span><span id=\"_CPPv211FindExampleRK3DFAK6size_t\"></span><span id=\"FindExample__DFACR.sC\"></span><span class=\"target\" id=\"group__lexer__utilities_1gac560765f5cef36272a32a17f19186764\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindExample</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/DFA.html#_CPPv43DFA\" title=\"DFA\"><span class=\"n\"><span class=\"pre\">DFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">dfa</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">min_size</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Method to find an example string that satisfies a DFA. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx10re_charset10re_charsetERKNSt6stringEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx10re_charset10re_charsetERKNSt6stringEb\">\n<span id=\"_CPPv3N5RegEx10re_charset10re_charsetERKNSt6stringEb\"></span><span id=\"_CPPv2N5RegEx10re_charset10re_charsetERKNSt6stringEb\"></span><span id=\"RegEx::re_charset::re_charset__ssCR.b\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset_1a169a8434767c56aec92a0d4fcb26c067\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_charset</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">s</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">neg</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK9TokenInfo5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9TokenInfo5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK9TokenInfo5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK9TokenInfo5PrintERNSt7ostreamE\"></span><span id=\"TokenInfo::Print__osRC\"></span><span class=\"target\" id=\"structTokenInfo_1a746db74f417534756734c84ec0eb0947\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print out the status of this token (for debugging) </p></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA8GetStartEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA8GetStartEv\">\n<span id=\"_CPPv3NK4tNFA8GetStartEv\"></span><span id=\"_CPPv2NK4tNFA8GetStartEv\"></span><span id=\"tNFA::GetStartC\"></span><span class=\"target\" id=\"classtNFA_1a94f0be18b15e3afa2f324c78292225c9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetStart</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return start state and all others reachable through empty transitions. </p></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA11transitionsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA11transitionsE\">\n<span id=\"_CPPv3N4tDFA11transitionsE\"></span><span id=\"_CPPv2N4tDFA11transitionsE\"></span><span id=\"tDFA::transitions__vector:array:i.NUM_SYMBOLS::\"></span><span class=\"target\" id=\"classtDFA_1ad903901b9b152e96144c3dd7b575c93d\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../base/api/array.html#_CPPv4I0_6size_tE5array\" title=\"array\"><span class=\"n\"><span class=\"pre\">array</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_i0E4tDFA\" title=\"tDFA::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">transitions</span></span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">DFA.hpp<a class=\"headerlink\" href=\"#dfa-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A Deterministic Finite Automata simulator. </p>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA7GetNextE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA7GetNextE6size_t6size_t\">\n<span id=\"_CPPv3NK4tNFA7GetNextE6size_t6size_t\"></span><span id=\"_CPPv2NK4tNFA7GetNextE6size_t6size_t\"></span><span id=\"tNFA::GetNext__s.sC\"></span><span class=\"target\" id=\"classtNFA_1ad20f98721b7dbf56fc02df599f75bd5a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNext</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sym</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_id</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the states reachable from the current state given the provided symbol. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo9TokenInfoERKNSt6stringERKNSt6stringEibbRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo9TokenInfoERKNSt6stringERKNSt6stringEibbRKNSt6stringE\">\n<span id=\"_CPPv3N9TokenInfo9TokenInfoERKNSt6stringERKNSt6stringEibbRKNSt6stringE\"></span><span id=\"_CPPv2N9TokenInfo9TokenInfoERKNSt6stringERKNSt6stringEibbRKNSt6stringE\"></span><span id=\"TokenInfo::TokenInfo__ssCR.ssCR.i.b.b.ssCR\"></span><span class=\"target\" id=\"structTokenInfo_1a46b8bd0f1a4f07edbde37edea1f01ec5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_name</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_regex</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">_id</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">_save_l</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">_save_t</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_desc</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8Iterator7IsValidEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8Iterator7IsValidEv\">\n<span id=\"_CPPv3NK11TokenStream8Iterator7IsValidEv\"></span><span id=\"_CPPv2NK11TokenStream8Iterator7IsValidEv\"></span><span id=\"TokenStream::Iterator::IsValidC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a8267a47c5dbbb3c377321f8efa5c7df2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsValid</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer5ResetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer5ResetEv\">\n<span id=\"_CPPv3N5Lexer5ResetEv\"></span><span id=\"_CPPv2N5Lexer5ResetEv\"></span><span id=\"Lexer::Reset\"></span><span class=\"target\" id=\"classLexer_1a48dbb740d0329148e7df9e03a7fabc22\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA7GetStopE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA7GetStopE6size_t\">\n<span id=\"_CPPv3NK4tNFA7GetStopE6size_t\"></span><span id=\"_CPPv2NK4tNFA7GetStopE6size_t\"></span><span id=\"tNFA::GetStop__sC\"></span><span class=\"target\" id=\"classtNFA_1ad70b5a8a01ae2c5978932f6ce6fba375\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA6stop_tE\" title=\"tNFA::stop_t\"><span class=\"n\"><span class=\"pre\">stop_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get any stop value associated with the provided state. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_StateD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_StateD0Ev\">\n<span id=\"_CPPv3N10tNFA_StateD0Ev\"></span><span id=\"_CPPv2N10tNFA_StateD0Ev\"></span><span id=\"tNFA_State::~tNFA_State\"></span><span class=\"target\" id=\"classtNFA__State_1ac260f8690c74f26d4a2c339947d174f8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~tNFA_State</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8IteratorgtERK8Iterator\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8IteratorgtERK8Iterator\">\n<span id=\"_CPPv3NK11TokenStream8IteratorgtERK8Iterator\"></span><span id=\"_CPPv2NK11TokenStream8IteratorgtERK8Iterator\"></span><span id=\"TokenStream::Iterator::gt-operator__IteratorCRC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a5ecdeb5adbcda027b4e76365f440dd6b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx12ConstructSetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx12ConstructSetEv\">\n<span id=\"_CPPv3N5RegEx12ConstructSetEv\"></span><span id=\"_CPPv2N5RegEx12ConstructSetEv\"></span><span id=\"RegEx::ConstructSet\"></span><span class=\"target\" id=\"classRegEx_1ac34b12edded7f41061c142cc9b8825f3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx10re_charsetE\" title=\"RegEx::re_charset\"><span class=\"n\"><span class=\"pre\">re_charset</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ConstructSet</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a character range. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5LexerD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5LexerD0Ev\">\n<span id=\"_CPPv3N5LexerD0Ev\"></span><span id=\"_CPPv2N5LexerD0Ev\"></span><span id=\"Lexer::~Lexer\"></span><span class=\"target\" id=\"classLexer_1a7a26f238ff21f31d754e5770d3501c71\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~Lexer</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_starE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_starE\">\n<span id=\"_CPPv3N5RegEx7re_starE\"></span><span id=\"_CPPv2N5RegEx7re_starE\"></span><span id=\"RegEx::re_star\"></span><span class=\"target\" id=\"structRegEx_1_1re__star\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_star</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_parentE\" title=\"RegEx::re_parent\"><span class=\"n\"><span class=\"pre\">re_parent</span></span></a><br/></dt><dd><p>Representations of zero-or-more instances of a component. e.g., a*. </p></dd>", "a[href=\"api/lexer_utils.html#_CPPv4N9DFAStatus8sequenceE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9DFAStatus8sequenceE\">\n<span id=\"_CPPv3N9DFAStatus8sequenceE\"></span><span id=\"_CPPv2N9DFAStatus8sequenceE\"></span><span id=\"DFAStatus::sequence__ss\"></span><span class=\"target\" id=\"structDFAStatus_1a7d9fa4288543031f31afcc83e85113cf\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">sequence</span></span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_plusE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_plusE\">\n<span id=\"_CPPv3N5RegEx7re_plusE\"></span><span id=\"_CPPv2N5RegEx7re_plusE\"></span><span id=\"RegEx::re_plus\"></span><span class=\"target\" id=\"structRegEx_1_1re__plus\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_plus</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_parentE\" title=\"RegEx::re_parent\"><span class=\"n\"><span class=\"pre\">re_parent</span></span></a><br/></dt><dd><p>Representations of one-or-more instances of a component. e.g., a+. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_stringE\">\n<span id=\"_CPPv3N5RegEx9re_stringE\"></span><span id=\"_CPPv2N5RegEx9re_stringE\"></span><span id=\"RegEx::re_string\"></span><span class=\"target\" id=\"structRegEx_1_1re__string\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_string</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><br/></dt><dd><p>Representation of strings stored in a RegEx. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8Iterator5AtEndEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8Iterator5AtEndEv\">\n<span id=\"_CPPv3NK11TokenStream8Iterator5AtEndEv\"></span><span id=\"_CPPv2NK11TokenStream8Iterator5AtEndEv\"></span><span id=\"TokenStream::Iterator::AtEndC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a71378589074cd6ba211995bad00e57a0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AtEnd</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA7GetNextE6size_tKNSt3setI6size_tEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA7GetNextE6size_tKNSt3setI6size_tEE\">\n<span id=\"_CPPv3NK4tNFA7GetNextE6size_tKNSt3setI6size_tEE\"></span><span id=\"_CPPv2NK4tNFA7GetNextE6size_tKNSt3setI6size_tEE\"></span><span id=\"tNFA::GetNext__s.std::set:s:CC\"></span><span class=\"target\" id=\"classtNFA_1aa5f22a857f891647d9a5b787835ac6e1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNext</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sym</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_set</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>return the states reachable from the current set of states given the provided symbol. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7ProcessE3PtrI8re_blockE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7ProcessE3PtrI8re_blockE\">\n<span id=\"_CPPv3N5RegEx7ProcessE3PtrI8re_blockE\"></span><span id=\"_CPPv2N5RegEx7ProcessE3PtrI8re_blockE\"></span><span id=\"RegEx::Process__Ptr:re_block:\"></span><span class=\"target\" id=\"classRegEx_1aeade0bb4eacbd93fce1ea088fdcb771a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx8re_blockE\" title=\"RegEx::re_block\"><span class=\"n\"><span class=\"pre\">re_block</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Process</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx8re_blockE\" title=\"RegEx::re_block\"><span class=\"n\"><span class=\"pre\">re_block</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">cur_block</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">nullptr</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Process the input regex into a tree representaion. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream4nameE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream4nameE\">\n<span id=\"_CPPv3N11TokenStream4nameE\"></span><span id=\"_CPPv2N11TokenStream4nameE\"></span><span id=\"TokenStream::name__ss\"></span><span class=\"target\" id=\"classTokenStream_1a3d1bc6ec0e90496a19e01081a24ed768\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">name</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\"</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5re_qm5re_qmE3PtrI7re_baseE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5re_qm5re_qmE3PtrI7re_baseE\">\n<span id=\"_CPPv3N5RegEx5re_qm5re_qmE3PtrI7re_baseE\"></span><span id=\"_CPPv2N5RegEx5re_qm5re_qmE3PtrI7re_baseE\"></span><span id=\"RegEx::re_qm::re_qm__Ptr:re_base:\"></span><span class=\"target\" id=\"structRegEx_1_1re__qm_1a993304fd8a8200c37286c3826ddd8b22\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_qm</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">c</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/lexer_utils.html#_CPPv4N9DFAStatus5stateE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9DFAStatus5stateE\">\n<span id=\"_CPPv3N9DFAStatus5stateE\"></span><span id=\"_CPPv2N9DFAStatus5stateE\"></span><span id=\"DFAStatus::state__s\"></span><span class=\"target\" id=\"structDFAStatus_1a3313503edc0466655608f3823026d85b\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">state</span></span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFAD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFAD0Ev\">\n<span id=\"_CPPv3N4tNFAD0Ev\"></span><span id=\"_CPPv2N4tNFAD0Ev\"></span><span id=\"tNFA::~tNFA\"></span><span class=\"target\" id=\"classtNFA_1ac87e6c1ee208b814dddbb3362dd2dabe\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~tNFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA5State5StateEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA5State5StateEv\">\n<span id=\"_CPPv3N4tNFA5State5StateEv\"></span><span id=\"_CPPv2N4tNFA5State5StateEv\"></span><span id=\"tNFA::State::State\"></span><span class=\"target\" id=\"structtNFA_1_1State_1aa50988d5098919af0a0052135343f7e5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">State</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA11AddNewStateEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA11AddNewStateEv\">\n<span id=\"_CPPv3N4tNFA11AddNewStateEv\"></span><span id=\"_CPPv2N4tNFA11AddNewStateEv\"></span><span id=\"tNFA::AddNewState\"></span><span class=\"target\" id=\"classtNFA_1a464bd3e2415079636acaed559d063920\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddNewState</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add a new state into the NFA and return its id. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx8re_block7AsBlockEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx8re_block7AsBlockEv\">\n<span id=\"_CPPv3N5RegEx8re_block7AsBlockEv\"></span><span id=\"_CPPv2N5RegEx8re_block7AsBlockEv\"></span><span id=\"RegEx::re_block::AsBlock\"></span><span class=\"target\" id=\"structRegEx_1_1re__block_1a5bde645520af23f91d2baffdad65016e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx8re_blockE\" title=\"RegEx::re_block\"><span class=\"n\"><span class=\"pre\">re_block</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AsBlock</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream9push_backERK5Token\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream9push_backERK5Token\">\n<span id=\"_CPPv3N11TokenStream9push_backERK5Token\"></span><span id=\"_CPPv2N11TokenStream9push_backERK5Token\"></span><span id=\"TokenStream::push_back__TokenCR\"></span><span class=\"target\" id=\"classTokenStream_1aa27e5a03e2596310834798b27366e282\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">push_back</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA6ResizeE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA6ResizeE6size_t\">\n<span id=\"_CPPv3N4tNFA6ResizeE6size_t\"></span><span id=\"_CPPv2N4tNFA6ResizeE6size_t\"></span><span id=\"tNFA::Resize__s\"></span><span class=\"target\" id=\"classtNFA_1ab197514c8d5940ccc6dd890df9972caa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Resize</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">new_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Change the number of available states. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo4descE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo4descE\">\n<span id=\"_CPPv3N9TokenInfo4descE\"></span><span id=\"_CPPv2N9TokenInfo4descE\"></span><span id=\"TokenInfo::desc__ss\"></span><span class=\"target\" id=\"structTokenInfo_1a4af2c75d6b6059f88a35309cfed43219\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">desc</span></span></span><br/></dt><dd><p>More detailed description of this token type. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer5LexerEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer5LexerEv\">\n<span id=\"_CPPv3N5Lexer5LexerEv\"></span><span id=\"_CPPv2N5Lexer5LexerEv\"></span><span id=\"Lexer::Lexer\"></span><span class=\"target\" id=\"classLexer_1a4ece67400cc4fdf07d1dae1b586fa0e1\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFAaSERR6this_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFAaSERR6this_t\">\n<span id=\"_CPPv3N4tDFAaSERR6this_t\"></span><span id=\"_CPPv2N4tDFAaSERR6this_t\"></span><span id=\"tDFA::assign-operator__this_tRR\"></span><span class=\"target\" id=\"classtDFA_1a8ce494431a683b38ed0ec49f3c9ec1cf\"></span><a class=\"reference internal\" href=\"#_CPPv4N4tDFA6this_tE\" title=\"tDFA::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4N4tDFA6this_tE\" title=\"tDFA::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx8re_block5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx8re_block5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK5RegEx8re_block5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK5RegEx8re_block5PrintERNSt7ostreamE\"></span><span id=\"RegEx::re_block::Print__osRC\"></span><span class=\"target\" id=\"structRegEx_1_1re__block_1a742791d7d63c3af4455ff5966f9c403d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Token5TokenERK5Token\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Token5TokenERK5Token\">\n<span id=\"_CPPv3N5Token5TokenERK5Token\"></span><span id=\"_CPPv2N5Token5TokenERK5Token\"></span><span id=\"Token::Token__TokenCR\"></span><span class=\"target\" id=\"structToken_1a350ebd7ea16caa846b858ecdb1c273c6\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Token</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N5Token5TokenERK5Token\" title=\"Token::Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA6ResizeE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA6ResizeE6size_t\">\n<span id=\"_CPPv3N4tDFA6ResizeE6size_t\"></span><span id=\"_CPPv2N4tDFA6ResizeE6size_t\"></span><span id=\"tDFA::Resize__s\"></span><span class=\"target\" id=\"classtDFA_1a87d0536deabe87a53df868c473575a9f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Resize</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">new_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add Additional empty states. </p></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA7is_stopE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA7is_stopE\">\n<span id=\"_CPPv3N4tDFA7is_stopE\"></span><span id=\"_CPPv2N4tDFA7is_stopE\"></span><span id=\"tDFA::is_stop__vector:STOP_TYPE:\"></span><span class=\"target\" id=\"classtDFA_1a32124f271741fb08d4977a81d910e9d4\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_i0E4tDFA\" title=\"tDFA::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_stop</span></span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo11save_lexemeE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo11save_lexemeE\">\n<span id=\"_CPPv3N9TokenInfo11save_lexemeE\"></span><span id=\"_CPPv2N9TokenInfo11save_lexemeE\"></span><span id=\"TokenInfo::save_lexeme__b\"></span><span class=\"target\" id=\"structTokenInfo_1a55baf57b47fb25de1cbeb2e78e2250a2\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">save_lexeme</span></span></span><br/></dt><dd><p>Preserve the lexeme for this token? </p></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA7GetSizeEv\">\n<span id=\"_CPPv3NK4tDFA7GetSizeEv\"></span><span id=\"_CPPv2NK4tDFA7GetSizeEv\"></span><span id=\"tDFA::GetSizeC\"></span><span class=\"target\" id=\"classtDFA_1aab669eeadee5446c0f854f35029ef2b9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many states is this DFA using? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo9TokenInfoEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo9TokenInfoEv\">\n<span id=\"_CPPv3N9TokenInfo9TokenInfoEv\"></span><span id=\"_CPPv2N9TokenInfo9TokenInfoEv\"></span><span id=\"TokenInfo::TokenInfo\"></span><span class=\"target\" id=\"structTokenInfo_1a2c5574dee34a4ba209ca1b976a1b51d0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx4headE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx4headE\">\n<span id=\"_CPPv3N5RegEx4headE\"></span><span id=\"_CPPv2N5RegEx4headE\"></span><span id=\"RegEx::head__re_block\"></span><span class=\"target\" id=\"classRegEx_1a3dd299ef39f1b19a667e012fb1ade830\"></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx8re_blockE\" title=\"RegEx::re_block\"><span class=\"n\"><span class=\"pre\">re_block</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">head</span></span></span><br/></dt><dd></dd>", "a[href=\"#compiler\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Compiler<a class=\"headerlink\" href=\"#compiler\" title=\"Link to this heading\">\uf0c1</a></h1><h2>API<a class=\"headerlink\" href=\"#api\" title=\"Link to this heading\">\uf0c1</a></h2>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State4NextERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State4NextERKNSt6stringE\">\n<span id=\"_CPPv3N10tNFA_State4NextERKNSt6stringE\"></span><span id=\"_CPPv2N10tNFA_State4NextERKNSt6stringE\"></span><span id=\"tNFA_State::Next__ssCR\"></span><span class=\"target\" id=\"classtNFA__State_1a686967cc849e1f25aaf80320d5c026a5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Next</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">sym_set</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update states given a new series of input symbols (as a string) </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_parent8SimplifyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_parent8SimplifyEv\">\n<span id=\"_CPPv3N5RegEx9re_parent8SimplifyEv\"></span><span id=\"_CPPv2N5RegEx9re_parent8SimplifyEv\"></span><span id=\"RegEx::re_parent::Simplify\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent_1a9c782c1684a8acd6369cc8d9f20b0e3d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Simplify</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_parent5nodesE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_parent5nodesE\">\n<span id=\"_CPPv3N5RegEx9re_parent5nodesE\"></span><span id=\"_CPPv2N5RegEx9re_parent5nodesE\"></span><span id=\"RegEx::re_parent::nodes__vector:Ptr:re_base::\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent_1acafca14abfeae9e3ddd1d23e4da9c71e\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">nodes</span></span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA4tNFAE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA4tNFAE6size_t6size_t\">\n<span id=\"_CPPv3N4tNFA4tNFAE6size_t6size_t\"></span><span id=\"_CPPv2N4tNFA4tNFAE6size_t6size_t\"></span><span id=\"tNFA::tNFA__s.s\"></span><span class=\"target\" id=\"classtNFA_1a3f02638a77f3dd44f2d5d8fe40d05aa4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_states</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_state</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State7GetSizeEv\">\n<span id=\"_CPPv3N10tNFA_State7GetSizeEv\"></span><span id=\"_CPPv2N10tNFA_State7GetSizeEv\"></span><span id=\"tNFA_State::GetSize\"></span><span class=\"target\" id=\"classtNFA__State_1a9f1495dcb2b0d464248fc7a79754d3f3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>How many states are currently included? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo10save_tokenE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo10save_tokenE\">\n<span id=\"_CPPv3N9TokenInfo10save_tokenE\"></span><span id=\"_CPPv2N9TokenInfo10save_tokenE\"></span><span id=\"TokenInfo::save_token__b\"></span><span class=\"target\" id=\"structTokenInfo_1ab7c84c22d121dc6f5d57ee86ed8915bb\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">save_token</span></span></span><br/></dt><dd><p>Keep token at all? (Whitespace and comments are often discarded). </p></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA4tDFAERR6this_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA4tDFAERR6this_t\">\n<span id=\"_CPPv3N4tDFA4tDFAERR6this_t\"></span><span id=\"_CPPv2N4tDFA4tDFAERR6this_t\"></span><span id=\"tDFA::tDFA__this_tRR\"></span><span class=\"target\" id=\"classtDFA_1a28302952f3a6508074af4027bb2fa56b\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tDFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4N4tDFA6this_tE\" title=\"tDFA::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx5re_qm8AddToNFAER3NFA6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx5re_qm8AddToNFAER3NFA6size_t6size_t\">\n<span id=\"_CPPv3NK5RegEx5re_qm8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"_CPPv2NK5RegEx5re_qm8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"RegEx::re_qm::AddToNFA__NFAR.s.sC\"></span><span class=\"target\" id=\"structRegEx_1_1re__qm_1a32b8e3bc808358a708cd15c0d35407e4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream4sizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream4sizeEv\">\n<span id=\"_CPPv3NK11TokenStream4sizeEv\"></span><span id=\"_CPPv2NK11TokenStream4sizeEv\"></span><span id=\"TokenStream::sizeC\"></span><span class=\"target\" id=\"classTokenStream_1af4c880ec98557424099c0dcdafbd0023\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">size</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_parent3popEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_parent3popEv\">\n<span id=\"_CPPv3N5RegEx9re_parent3popEv\"></span><span id=\"_CPPv2N5RegEx9re_parent3popEv\"></span><span id=\"RegEx::re_parent::pop\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent_1a057e7ad0ef47e62be600ea6413153d4c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pop</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA13AddTransitionE6size_t6size_tRK6BitSetI11NUM_SYMBOLSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA13AddTransitionE6size_t6size_tRK6BitSetI11NUM_SYMBOLSE\">\n<span id=\"_CPPv3N4tNFA13AddTransitionE6size_t6size_tRK6BitSetI11NUM_SYMBOLSE\"></span><span id=\"_CPPv2N4tNFA13AddTransitionE6size_t6size_tRK6BitSetI11NUM_SYMBOLSE\"></span><span id=\"tNFA::AddTransition__s.s.BitSet:NUM_SYMBOLS:CR\"></span><span class=\"target\" id=\"classtNFA_1a1782fd82e4479c521e9a24ed6876c72b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddTransition</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">to</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4I_6size_tE6BitSet\" title=\"BitSet\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA11NUM_SYMBOLSE\" title=\"tNFA::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">sym_set</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add a transition between states \u2018from\u2019 and \u2018to\u2019 that can be taken with the provided symbols. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer11ERROR_TOKENEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer11ERROR_TOKENEv\">\n<span id=\"_CPPv3N5Lexer11ERROR_TOKENEv\"></span><span id=\"_CPPv2N5Lexer11ERROR_TOKENEv\"></span><span id=\"Lexer::ERROR_TOKEN\"></span><span class=\"target\" id=\"classLexer_1ad7bfcef82c597fc6c7c93f38fc5ddfd0\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv49TokenInfo\" title=\"TokenInfo\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ERROR_TOKEN</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8IteratorcvbEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8IteratorcvbEv\">\n<span id=\"_CPPv3NK11TokenStream8IteratorcvbEv\"></span><span id=\"_CPPv2NK11TokenStream8IteratorcvbEv\"></span><span id=\"TokenStream::Iterator::castto-b-operatorC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a3987d7642c477b664f83a7a8feefd6d8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/lexer_utils.html#_CPPv46to_DFARK3NFAi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46to_DFARK3NFAi\">\n<span id=\"_CPPv36to_DFARK3NFAi\"></span><span id=\"_CPPv26to_DFARK3NFAi\"></span><span id=\"to_DFA__NFACR.i\"></span><span class=\"target\" id=\"group__lexer__utilities_1gae94b20491b436670fe9bda89bffd3df9\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/DFA.html#_CPPv43DFA\" title=\"DFA\"><span class=\"n\"><span class=\"pre\">DFA</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_DFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_invalid</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Systematic conversion of NFA to DFA\u2026 </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer12GetTokenInfoEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer12GetTokenInfoEi\">\n<span id=\"_CPPv3NK5Lexer12GetTokenInfoEi\"></span><span id=\"_CPPv2NK5Lexer12GetTokenInfoEi\"></span><span id=\"Lexer::GetTokenInfo__iC\"></span><span class=\"target\" id=\"classLexer_1a557a0b9627431e279525fb52c8074e00\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv49TokenInfo\" title=\"TokenInfo\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetTokenInfo</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the full information about a token (you provide the id) </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA10TransitionE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA10TransitionE\">\n<span id=\"_CPPv3N4tNFA10TransitionE\"></span><span id=\"_CPPv2N4tNFA10TransitionE\"></span><span id=\"tNFA::Transition\"></span><span class=\"target\" id=\"structtNFA_1_1Transition\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Transition</span></span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Token7line_idE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Token7line_idE\">\n<span id=\"_CPPv3N5Token7line_idE\"></span><span id=\"_CPPv2N5Token7line_idE\"></span><span id=\"Token::line_id__s\"></span><span class=\"target\" id=\"structToken_1afcc9709a3eb24b02ea3525947bdced94\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">line_id</span></span></span><br/></dt><dd><p>Which line did this token start on? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo9TokenInfoERK9TokenInfo\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo9TokenInfoERK9TokenInfo\">\n<span id=\"_CPPv3N9TokenInfo9TokenInfoERK9TokenInfo\"></span><span id=\"_CPPv2N9TokenInfo9TokenInfoERK9TokenInfo\"></span><span id=\"TokenInfo::TokenInfo__TokenInfoCR\"></span><span class=\"target\" id=\"structTokenInfo_1a45a98a617f3544811472d9927ba7ba3d\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N9TokenInfo9TokenInfoERK9TokenInfo\" title=\"TokenInfo::TokenInfo\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8Iterator3posE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8Iterator3posE\">\n<span id=\"_CPPv3N11TokenStream8Iterator3posE\"></span><span id=\"_CPPv2N11TokenStream8Iterator3posE\"></span><span id=\"TokenStream::Iterator::pos__s\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a5d95c1f4ec63e7c9b89a32acda530c16\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pos</span></span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA6IsStopE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA6IsStopE6size_t\">\n<span id=\"_CPPv3NK4tDFA6IsStopE6size_t\"></span><span id=\"_CPPv2NK4tDFA6IsStopE6size_t\"></span><span id=\"tDFA::IsStop__sC\"></span><span class=\"target\" id=\"classtDFA_1a831d01113832416fc850112f8a415162\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/regex_utils.html#_CPPv4NSt15string_literalsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NSt15string_literalsE\">\n<span id=\"_CPPv3NSt15string_literalsE\"></span><span id=\"_CPPv2NSt15string_literalsE\"></span><span id=\"std::string_literals\"></span><span class=\"target\" id=\"namespacestd_1_1string__literals\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_literals</span></span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv411TokenStream\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411TokenStream\">\n<span id=\"_CPPv311TokenStream\"></span><span id=\"_CPPv211TokenStream\"></span><span id=\"TokenStream\"></span><span class=\"target\" id=\"classTokenStream\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_parent4pushE3PtrI7re_baseE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_parent4pushE3PtrI7re_baseE\">\n<span id=\"_CPPv3N5RegEx9re_parent4pushE3PtrI7re_baseE\"></span><span id=\"_CPPv2N5RegEx9re_parent4pushE3PtrI7re_baseE\"></span><span id=\"RegEx::re_parent::push__Ptr:re_base:\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent_1a3db6e4c70f4ab2d0ca68b2a98786cd1b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">push</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4I_6size_t0E4tNFA\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t0E4tNFA\">\n<span id=\"_CPPv3I_6size_t0E4tNFA\"></span><span id=\"_CPPv2I_6size_t0E4tNFA\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">S</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">128</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classtNFA\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></span><br/></dt><dd><p>A dynamic NFA class, for easily building non-determanistic finite automata. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA19AddTransitionSymbolE6size_t6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA19AddTransitionSymbolE6size_t6size_t6size_t\">\n<span id=\"_CPPv3N4tNFA19AddTransitionSymbolE6size_t6size_t6size_t\"></span><span id=\"_CPPv2N4tNFA19AddTransitionSymbolE6size_t6size_t6size_t\"></span><span id=\"tNFA::AddTransitionSymbol__s.s.s\"></span><span class=\"target\" id=\"classtNFA_1abd46d3af85c1241df34382401208b3f8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddTransitionSymbol</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">to</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sym</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add a transition between states \u2018from\u2019 and \u2018to\u2019 that can be taken with the provided symbol. </p></dd>", "a[href=\"api/NFA.html#_CPPv4NK10tNFA_State8IsActiveEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK10tNFA_State8IsActiveEv\">\n<span id=\"_CPPv3NK10tNFA_State8IsActiveEv\"></span><span id=\"_CPPv2NK10tNFA_State8IsActiveEv\"></span><span id=\"tNFA_State::IsActiveC\"></span><span class=\"target\" id=\"classtNFA__State_1a5cb008e21ffb6b725ffbd7a92b2338bb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsActive</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Are there currently any legal NFA states? </p></dd>", "a[href=\"api/NFA.html#_CPPv4NK10tNFA_State11GetStateSetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK10tNFA_State11GetStateSetEv\">\n<span id=\"_CPPv3NK10tNFA_State11GetStateSetEv\"></span><span id=\"_CPPv2NK10tNFA_State11GetStateSetEv\"></span><span id=\"tNFA_State::GetStateSetC\"></span><span class=\"target\" id=\"classtNFA__State_1a7494917f825c44441cf354257cf457d7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetStateSet</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get a set of states that are currently active. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStreamaSERR11TokenStream\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStreamaSERR11TokenStream\">\n<span id=\"_CPPv3N11TokenStreamaSERR11TokenStream\"></span><span id=\"_CPPv2N11TokenStreamaSERR11TokenStream\"></span><span id=\"TokenStream::assign-operator__TokenStreamRR\"></span><span class=\"target\" id=\"classTokenStream_1aff0dacefcb6415cb69efc771e84c3d79\"></span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFAaSERK6this_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFAaSERK6this_t\">\n<span id=\"_CPPv3N4tDFAaSERK6this_t\"></span><span id=\"_CPPv2N4tDFAaSERK6this_t\"></span><span id=\"tDFA::assign-operator__this_tCR\"></span><span class=\"target\" id=\"classtDFA_1a85e4202edbc85348136fbebffd8553f7\"></span><a class=\"reference internal\" href=\"#_CPPv4N4tDFA6this_tE\" title=\"tDFA::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tDFA6this_tE\" title=\"tDFA::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Token6lexemeE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Token6lexemeE\">\n<span id=\"_CPPv3N5Token6lexemeE\"></span><span id=\"_CPPv2N5Token6lexemeE\"></span><span id=\"Token::lexeme__ss\"></span><span class=\"target\" id=\"structToken_1abbff29ede445ed4a8520580f12490832\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">lexeme</span></span></span><br/></dt><dd><p>Sequence matched by this token (or empty if not saved) </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx10re_charset10re_charsetEcb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx10re_charset10re_charsetEcb\">\n<span id=\"_CPPv3N5RegEx10re_charset10re_charsetEcb\"></span><span id=\"_CPPv2N5RegEx10re_charset10re_charsetEcb\"></span><span id=\"RegEx::re_charset::re_charset__c.b\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset_1a79f2593f2ce2b2aa3947bddfaad41c6f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_charset</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">neg</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx9re_string7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx9re_string7GetSizeEv\">\n<span id=\"_CPPv3NK5RegEx9re_string7GetSizeEv\"></span><span id=\"_CPPv2NK5RegEx9re_string7GetSizeEv\"></span><span id=\"RegEx::re_string::GetSizeC\"></span><span class=\"target\" id=\"structRegEx_1_1re__string_1a22e23a72d1442b97f069863cc2498b8f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA11NUM_SYMBOLSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA11NUM_SYMBOLSE\">\n<span id=\"_CPPv3N4tNFA11NUM_SYMBOLSE\"></span><span id=\"_CPPv2N4tNFA11NUM_SYMBOLSE\"></span><span id=\"tNFA::NUM_SYMBOLS__sC\"></span><span class=\"target\" id=\"classtNFA_1a1353636c70e842665afdcc0f06955153\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::S\"><span class=\"n\"><span class=\"pre\">S</span></span></a><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA4tDFAE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA4tDFAE6size_t\">\n<span id=\"_CPPv3N4tDFA4tDFAE6size_t\"></span><span id=\"_CPPv2N4tDFA4tDFAE6size_t\"></span><span id=\"tDFA::tDFA__s\"></span><span class=\"target\" id=\"classtDFA_1ad919183a5335d43551df7d34d98b4a91\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tDFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_states</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA16GetSymbolOptionsERKNSt3setI6size_tEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA16GetSymbolOptionsERKNSt3setI6size_tEE\">\n<span id=\"_CPPv3NK4tNFA16GetSymbolOptionsERKNSt3setI6size_tEE\"></span><span id=\"_CPPv2NK4tNFA16GetSymbolOptionsERKNSt3setI6size_tEE\"></span><span id=\"tNFA::GetSymbolOptions__std::set:s:CRC\"></span><span class=\"target\" id=\"classtNFA_1a19ca4b0af107db80461836cee96000da\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA6opts_tE\" title=\"tNFA::opts_t\"><span class=\"n\"><span class=\"pre\">opts_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSymbolOptions</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">test_set</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return an BitSet indicating the symbols available from the provided set of states. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Token2idE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Token2idE\">\n<span id=\"_CPPv3N5Token2idE\"></span><span id=\"_CPPv2N5Token2idE\"></span><span id=\"Token::id__i\"></span><span class=\"target\" id=\"structToken_1aa17500abc453e3d873c385f9eb47fa53\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">id</span></span></span><br/></dt><dd><p>Which type of token is this? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8IteratormmEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8IteratormmEv\">\n<span id=\"_CPPv3N11TokenStream8IteratormmEv\"></span><span id=\"_CPPv2N11TokenStream8IteratormmEv\"></span><span id=\"TokenStream::Iterator::dec-operator\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1adec2d376f5e5008e57308e016b9bb8ed\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">--</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx7re_plus8AddToNFAER3NFA6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx7re_plus8AddToNFAER3NFA6size_t6size_t\">\n<span id=\"_CPPv3NK5RegEx7re_plus8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"_CPPv2NK5RegEx7re_plus8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"RegEx::re_plus::AddToNFA__NFAR.s.sC\"></span><span class=\"target\" id=\"structRegEx_1_1re__plus_1a9e8dba966e5ddcef4c2249a5ca607a53\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv49TokenInfo\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49TokenInfo\">\n<span id=\"_CPPv39TokenInfo\"></span><span id=\"_CPPv29TokenInfo\"></span><span id=\"TokenInfo\"></span><span class=\"target\" id=\"structTokenInfo\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></span><br/></dt><dd><p>Information about an individual TYPE of token to be processed within a Lexer. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA5startE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA5startE\">\n<span id=\"_CPPv3N4tNFA5startE\"></span><span id=\"_CPPv2N4tNFA5startE\"></span><span id=\"tNFA::start__s\"></span><span class=\"target\" id=\"classtNFA_1ab16606ad34a89f56d30ad3547b5bb6cc\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">start</span></span></span><br/></dt><dd><p>Main start state (others might be reached for free.) </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5TokenaSERR5Token\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5TokenaSERR5Token\">\n<span id=\"_CPPv3N5TokenaSERR5Token\"></span><span id=\"_CPPv2N5TokenaSERR5Token\"></span><span id=\"Token::assign-operator__TokenRR\"></span><span class=\"target\" id=\"structToken_1a4f45441b8d2dfe881c448377d4ca2cd4\"></span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5re_qmE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5re_qmE\">\n<span id=\"_CPPv3N5RegEx5re_qmE\"></span><span id=\"_CPPv2N5RegEx5re_qmE\"></span><span id=\"RegEx::re_qm\"></span><span class=\"target\" id=\"structRegEx_1_1re__qm\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_qm</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_parentE\" title=\"RegEx::re_parent\"><span class=\"n\"><span class=\"pre\">re_parent</span></span></a><br/></dt><dd><p>Representations of zero-or-one instances of a component. e.g., a? </p></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA6stop_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA6stop_tE\">\n<span id=\"_CPPv3N4tDFA6stop_tE\"></span><span id=\"_CPPv2N4tDFA6stop_tE\"></span><span class=\"target\" id=\"classtDFA_1ac209245cdab6305eda570ea282fda8fe\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">stop_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_i0E4tDFA\" title=\"tDFA::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8IteratoraSERK8Iterator\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8IteratoraSERK8Iterator\">\n<span id=\"_CPPv3N11TokenStream8IteratoraSERK8Iterator\"></span><span id=\"_CPPv2N11TokenStream8IteratoraSERK8Iterator\"></span><span id=\"TokenStream::Iterator::assign-operator__IteratorCR\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1aa8095229e2cb0bd93bc17cf38c7be80e\"></span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_base8AsParentEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_base8AsParentEv\">\n<span id=\"_CPPv3N5RegEx7re_base8AsParentEv\"></span><span id=\"_CPPv2N5RegEx7re_base8AsParentEv\"></span><span id=\"RegEx::re_base::AsParent\"></span><span class=\"target\" id=\"structRegEx_1_1re__base_1ac62232a639e02a82a6862e6b8bc24ac6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_parentE\" title=\"RegEx::re_parent\"><span class=\"n\"><span class=\"pre\">re_parent</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AsParent</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/lexer_utils.html#_CPPv46to_DFARK3DFA\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46to_DFARK3DFA\">\n<span id=\"_CPPv36to_DFARK3DFA\"></span><span id=\"_CPPv26to_DFARK3DFA\"></span><span id=\"to_DFA__DFACR\"></span><span class=\"target\" id=\"group__lexer__utilities_1ga90b35165db31201b4092a7309c184f07\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/DFA.html#_CPPv43DFA\" title=\"DFA\"><span class=\"n\"><span class=\"pre\">DFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_DFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/DFA.html#_CPPv43DFA\" title=\"DFA\"><span class=\"n\"><span class=\"pre\">DFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">dfa</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Converting DFA to DFA &amp;#8212; no change needed. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer8GenerateEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer8GenerateEv\">\n<span id=\"_CPPv3NK5Lexer8GenerateEv\"></span><span id=\"_CPPv2NK5Lexer8GenerateEv\"></span><span id=\"Lexer::GenerateC\"></span><span class=\"target\" id=\"classLexer_1a1d50338fb1866797103228bbce5b966b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Generate</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Create the NFA that will identify the current set of tokens in a sequence. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA6stop_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA6stop_tE\">\n<span id=\"_CPPv3N4tNFA6stop_tE\"></span><span id=\"_CPPv2N4tNFA6stop_tE\"></span><span class=\"target\" id=\"classtNFA_1aa3b5c3380b574732e29193a1b986c0b8\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">stop_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State5PrintEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State5PrintEv\">\n<span id=\"_CPPv3N10tNFA_State5PrintEv\"></span><span id=\"_CPPv2N10tNFA_State5PrintEv\"></span><span id=\"tNFA_State::Print\"></span><span class=\"target\" id=\"classtNFA__State_1a3ade343ca726d0f2e71e455dbbb83e51\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Print out current information about this NFA State (for debugging) </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegExaSERK5RegEx\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegExaSERK5RegEx\">\n<span id=\"_CPPv3N5RegExaSERK5RegEx\"></span><span id=\"_CPPv2N5RegExaSERK5RegEx\"></span><span id=\"RegEx::assign-operator__RegExCR\"></span><span class=\"target\" id=\"classRegEx_1a30061db1344651b6af8aaeaa9988ded4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">r</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set this RegEx equal to another. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx10PrintNotesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx10PrintNotesEv\">\n<span id=\"_CPPv3NK5RegEx10PrintNotesEv\"></span><span id=\"_CPPv2NK5RegEx10PrintNotesEv\"></span><span id=\"RegEx::PrintNotesC\"></span><span class=\"target\" id=\"classRegEx_1a15f14129cffc21e581796524805638ec\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintNotes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>For debugging: print any internal notes generated about this regex. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Token5TokenERR5Token\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Token5TokenERR5Token\">\n<span id=\"_CPPv3N5Token5TokenERR5Token\"></span><span id=\"_CPPv2N5Token5TokenERR5Token\"></span><span id=\"Token::Token__TokenRR\"></span><span class=\"target\" id=\"structToken_1afc9d412fe95cc74013031eb46eb5d924\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Token</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4N5Token5TokenERR5Token\" title=\"Token::Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Lexer.hpp<a class=\"headerlink\" href=\"#lexer-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A general-purpose, fast lexer. </p><p>\nBuild a lexer that can convert input strings or streams into a series of provided tokens.</p>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer9GetLexemeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer9GetLexemeEv\">\n<span id=\"_CPPv3NK5Lexer9GetLexemeEv\"></span><span id=\"_CPPv2NK5Lexer9GetLexemeEv\"></span><span id=\"Lexer::GetLexemeC\"></span><span class=\"target\" id=\"classLexer_1a20b5c02c882a9ddf905d8db13804a940\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetLexeme</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the lexeme associated with the last token identified. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer11IgnoreTokenERKNSt6stringERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer11IgnoreTokenERKNSt6stringERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3N5Lexer11IgnoreTokenERKNSt6stringERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2N5Lexer11IgnoreTokenERKNSt6stringERKNSt6stringERKNSt6stringE\"></span><span id=\"Lexer::IgnoreToken__ssCR.ssCR.ssCR\"></span><span class=\"target\" id=\"classLexer_1a996a512b38750ba70bdd65c01e62ddd9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IgnoreToken</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">name</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">regex</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">desc</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add a token to ignore, specified by a name and the regex used to identify it. </p></dd>", "a[href=\"api/RegEx.html#_CPPv46to_NFARK5RegEx6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46to_NFARK5RegEx6size_t\">\n<span id=\"_CPPv36to_NFARK5RegEx6size_t\"></span><span id=\"_CPPv26to_NFARK5RegEx6size_t\"></span><span id=\"to_NFA__RegExCR.s\"></span><span class=\"target\" id=\"RegEx_8hpp_1af795231c51f8ed5ec4cea33e96ce5739\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_NFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">regex</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_id</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Simple conversion of RegEx to NFA (mostly implemented in RegEx) </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA4tNFAERK4tNFAI1S9STOP_TYPEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA4tNFAERK4tNFAI1S9STOP_TYPEE\">\n<span id=\"_CPPv3N4tNFA4tNFAERK4tNFAI1S9STOP_TYPEE\"></span><span id=\"_CPPv2N4tNFA4tNFAERK4tNFAI1S9STOP_TYPEE\"></span><span id=\"tNFA::tNFA__tNFA:S.STOP_TYPE:CR\"></span><span class=\"target\" id=\"classtNFA_1a90032871f7526e36de9b85ee1ffaf2fc\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA4tNFAERK4tNFAI1S9STOP_TYPEE\" title=\"tNFA::tNFA\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::S\"><span class=\"n\"><span class=\"pre\">S</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx8AddToNFAER3NFA6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx8AddToNFAER3NFA6size_t6size_t\">\n<span id=\"_CPPv3NK5RegEx8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"_CPPv2NK5RegEx8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"RegEx::AddToNFA__NFAR.s.sC\"></span><span class=\"target\" id=\"classRegEx_1ab608016883a6e5a226c07ec4aa57ca33\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Add this regex to an NFA being built. </p></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA7GetStopEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA7GetStopEi\">\n<span id=\"_CPPv3NK4tDFA7GetStopEi\"></span><span id=\"_CPPv2NK4tDFA7GetStopEi\"></span><span id=\"tDFA::GetStop__iC\"></span><span class=\"target\" id=\"classtDFA_1a5e4f3412943cab40575b1787b7b1fe13\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tDFA6stop_tE\" title=\"tDFA::stop_t\"><span class=\"n\"><span class=\"pre\">stop_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the stop value associated with a state. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8IteratorneERK8Iterator\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8IteratorneERK8Iterator\">\n<span id=\"_CPPv3NK11TokenStream8IteratorneERK8Iterator\"></span><span id=\"_CPPv2NK11TokenStream8IteratorneERK8Iterator\"></span><span id=\"TokenStream::Iterator::neq-operator__IteratorCRC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a531a9217b953269b30725fc120025f43\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">!=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx16ConstructSegmentEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx16ConstructSegmentEv\">\n<span id=\"_CPPv3N5RegEx16ConstructSegmentEv\"></span><span id=\"_CPPv2N5RegEx16ConstructSegmentEv\"></span><span id=\"RegEx::ConstructSegment\"></span><span class=\"target\" id=\"classRegEx_1ac3d3bd1f68c4801a37c4b5436518dece\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ConstructSegment</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Should only be called when we know we have a single unit to produce. Build and return it. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5re_or5re_orE3PtrI7re_baseE3PtrI7re_baseE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5re_or5re_orE3PtrI7re_baseE3PtrI7re_baseE\">\n<span id=\"_CPPv3N5RegEx5re_or5re_orE3PtrI7re_baseE3PtrI7re_baseE\"></span><span id=\"_CPPv2N5RegEx5re_or5re_orE3PtrI7re_baseE3PtrI7re_baseE\"></span><span id=\"RegEx::re_or::re_or__Ptr:re_base:.Ptr:re_base:\"></span><span class=\"target\" id=\"structRegEx_1_1re__or_1af3191cd54cd8866fda701586fc291a7a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_or</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">l</span></span>, <a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">r</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer11DebugStringENSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer11DebugStringENSt6stringE\">\n<span id=\"_CPPv3NK5Lexer11DebugStringENSt6stringE\"></span><span id=\"_CPPv2NK5Lexer11DebugStringENSt6stringE\"></span><span id=\"Lexer::DebugString__ssC\"></span><span class=\"target\" id=\"classLexer_1aa2380789f12974f433012f2be35a83ab\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DebugString</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">test_string</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Try out the lexer on a string and demonstrate how it\u2019s tokenized. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx10re_charset5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx10re_charset5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK5RegEx10re_charset5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK5RegEx10re_charset5PrintERNSt7ostreamE\"></span><span id=\"RegEx::re_charset::Print__osRC\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset_1a6bf9bdc4c0d1a398f84ab256c977d069\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_plus7re_plusE3PtrI7re_baseE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_plus7re_plusE3PtrI7re_baseE\">\n<span id=\"_CPPv3N5RegEx7re_plus7re_plusE3PtrI7re_baseE\"></span><span id=\"_CPPv2N5RegEx7re_plus7re_plusE3PtrI7re_baseE\"></span><span id=\"RegEx::re_plus::re_plus__Ptr:re_base:\"></span><span class=\"target\" id=\"structRegEx_1_1re__plus_1abea7f14a045f277213d7caaf8612f1bf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_plus</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">c</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_string9re_stringEc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_string9re_stringEc\">\n<span id=\"_CPPv3N5RegEx9re_string9re_stringEc\"></span><span id=\"_CPPv2N5RegEx9re_string9re_stringEc\"></span><span id=\"RegEx::re_string::re_string__c\"></span><span class=\"target\" id=\"structRegEx_1_1re__string_1a0abdb4c03cad97e3463df3288b2c693e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">c</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/regex_utils.html#_CPPv412regex_nestedcc6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412regex_nestedcc6size_tb\">\n<span id=\"_CPPv312regex_nestedcc6size_tb\"></span><span id=\"_CPPv212regex_nestedcc6size_tb\"></span><span id=\"regex_nested__c.c.s.b\"></span><span class=\"target\" id=\"regex__utils_8hpp_1afc4ba1b2f2356bc0b5686b97375b44c7\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">regex_nested</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">open</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">'('</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">close</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">')'</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">depth</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_at_newline</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8IteratormlEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8IteratormlEv\">\n<span id=\"_CPPv3NK11TokenStream8IteratormlEv\"></span><span id=\"_CPPv2NK11TokenStream8IteratormlEv\"></span><span id=\"TokenStream::Iterator::mul-operatorC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1af300691a30bc28351ce53346503de113\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">*</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx3posE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx3posE\">\n<span id=\"_CPPv3N5RegEx3posE\"></span><span id=\"_CPPv2N5RegEx3posE\"></span><span id=\"RegEx::pos__s\"></span><span class=\"target\" id=\"classRegEx_1a3db5a780b9a26ed94b65757831545daa\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pos</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><br/></dt><dd><p>Position being read in regex. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_parentE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_parentE\">\n<span id=\"_CPPv3N5RegEx9re_parentE\"></span><span id=\"_CPPv2N5RegEx9re_parentE\"></span><span id=\"RegEx::re_parent\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_parent</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><br/></dt><dd><p>Intermediate base class for RegEx components that have children (such as \u201cand\u201d and \u201cor\u201d) </p></dd>", "a[href=\"api/lexer_utils.html#_CPPv46to_NFARK3DFA\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46to_NFARK3DFA\">\n<span id=\"_CPPv36to_NFARK3DFA\"></span><span id=\"_CPPv26to_NFARK3DFA\"></span><span id=\"to_NFA__DFACR\"></span><span class=\"target\" id=\"group__lexer__utilities_1ga83dca02a7f1443e14dfab94c293bcddb\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_NFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/DFA.html#_CPPv43DFA\" title=\"DFA\"><span class=\"n\"><span class=\"pre\">DFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">dfa</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Systematic up-conversion of DFA to NFA\u2026 </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA5State9free_fromE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA5State9free_fromE\">\n<span id=\"_CPPv3N4tNFA5State9free_fromE\"></span><span id=\"_CPPv2N4tNFA5State9free_fromE\"></span><span id=\"tNFA::State::free_from__std::set:s:\"></span><span class=\"target\" id=\"structtNFA_1_1State_1af16fd51f791f10f4d3f41776772deb4f\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">free_from</span></span></span><br/></dt><dd><p>What other states can move here for free? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream11TokenStreamERK11TokenStream\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream11TokenStreamERK11TokenStream\">\n<span id=\"_CPPv3N11TokenStream11TokenStreamERK11TokenStream\"></span><span id=\"_CPPv2N11TokenStream11TokenStreamERK11TokenStream\"></span><span id=\"TokenStream::TokenStream__TokenStreamCR\"></span><span class=\"target\" id=\"classTokenStream_1afcd8356a1a1ade7f31372f6c99f98c65\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream11TokenStreamERK11TokenStream\" title=\"TokenStream::TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx5re_qm5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx5re_qm5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK5RegEx5re_qm5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK5RegEx5re_qm5PrintERNSt7ostreamE\"></span><span id=\"RegEx::re_qm::Print__osRC\"></span><span class=\"target\" id=\"structRegEx_1_1re__qm_1aabc83c544e7c65f0204979c46cfc5965\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer7TokenOKEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer7TokenOKEi\">\n<span id=\"_CPPv3NK5Lexer7TokenOKEi\"></span><span id=\"_CPPv2NK5Lexer7TokenOKEi\"></span><span id=\"Lexer::TokenOK__iC\"></span><span class=\"target\" id=\"classLexer_1a6966ab288112eae2ea36b11fb6f5c1ea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenOK</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4I0EN4tNFA7SetStopEv6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN4tNFA7SetStopEv6size_t1T\">\n<span id=\"_CPPv3I0EN4tNFA7SetStopE6size_t1T\"></span><span id=\"_CPPv2I0EN4tNFA7SetStopE6size_t1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA6stop_tE\" title=\"tNFA::stop_t\"><span class=\"n\"><span class=\"pre\">stop_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classtNFA_1addd46f3af0898e0e902027c4f3f3dd1b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN4tNFA7SetStopEv6size_t1T\" title=\"tNFA::SetStop::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set the specified state to be a stop state (with an optional stop value.) </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx7re_base7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx7re_base7GetSizeEv\">\n<span id=\"_CPPv3NK5RegEx7re_base7GetSizeEv\"></span><span id=\"_CPPv2NK5RegEx7re_base7GetSizeEv\"></span><span id=\"RegEx::re_base::GetSizeC\"></span><span class=\"target\" id=\"structRegEx_1_1re__base_1a94140ca3b9a81a04c994272584c39cce\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer6MAX_IDE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer6MAX_IDE\">\n<span id=\"_CPPv3N5Lexer6MAX_IDE\"></span><span id=\"_CPPv2N5Lexer6MAX_IDE\"></span><span id=\"Lexer::MAX_ID__i\"></span><span class=\"target\" id=\"classLexer_1ae79ffdf7af4a152b2c5dab8523873a0c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MAX_ID</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">255</span></span><br/></dt><dd><p>IDs count down so that first ones have priority. </p></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA6IsStopEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA6IsStopEi\">\n<span id=\"_CPPv3NK4tDFA6IsStopEi\"></span><span id=\"_CPPv2NK4tDFA6IsStopEi\"></span><span id=\"tDFA::IsStop__iC\"></span><span class=\"target\" id=\"classtDFA_1a6e51fcb3fcca6c8ea9cc41d3dc29c1fe\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Test if a state has a stop. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_base8SimplifyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_base8SimplifyEv\">\n<span id=\"_CPPv3N5RegEx7re_base8SimplifyEv\"></span><span id=\"_CPPv2N5RegEx7re_base8SimplifyEv\"></span><span id=\"RegEx::re_base::Simplify\"></span><span class=\"target\" id=\"structRegEx_1_1re__base_1af605221512104b781bd61fae9b4165f2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Simplify</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx6opts_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx6opts_tE\">\n<span id=\"_CPPv3N5RegEx6opts_tE\"></span><span id=\"_CPPv2N5RegEx6opts_tE\"></span><span class=\"target\" id=\"classRegEx_1a8cdc804da1dc3a3e36609c7274c6f385\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">opts_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4I_6size_tE6BitSet\" title=\"BitSet\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx11NUM_SYMBOLSE\" title=\"RegEx::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State11SetStateSetERKNSt3setI6size_tEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State11SetStateSetERKNSt3setI6size_tEE\">\n<span id=\"_CPPv3N10tNFA_State11SetStateSetERKNSt3setI6size_tEE\"></span><span id=\"_CPPv2N10tNFA_State11SetStateSetERKNSt3setI6size_tEE\"></span><span id=\"tNFA_State::SetStateSet__std::set:s:CR\"></span><span class=\"target\" id=\"classtNFA__State_1a93c92c3b6128a6d540163bd59dfbe8bd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetStateSet</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set the current states. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx9re_parent7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx9re_parent7GetSizeEv\">\n<span id=\"_CPPv3NK5RegEx9re_parent7GetSizeEv\"></span><span id=\"_CPPv2NK5RegEx9re_parent7GetSizeEv\"></span><span id=\"RegEx::re_parent::GetSizeC\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent_1a4079c90b926a8443886750fb6808e1ea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo4nameE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo4nameE\">\n<span id=\"_CPPv3N9TokenInfo4nameE\"></span><span id=\"_CPPv2N9TokenInfo4nameE\"></span><span id=\"TokenInfo::name__ss\"></span><span class=\"target\" id=\"structTokenInfo_1abadb358d66ec14e22fe14be755eb9761\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">name</span></span></span><br/></dt><dd><p>Name of this token type. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA5StateE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA5StateE\">\n<span id=\"_CPPv3N4tNFA5StateE\"></span><span id=\"_CPPv2N4tNFA5StateE\"></span><span id=\"tNFA::State\"></span><span class=\"target\" id=\"structtNFA_1_1State\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">State</span></span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx9re_string5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx9re_string5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK5RegEx9re_string5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK5RegEx9re_string5PrintERNSt7ostreamE\"></span><span id=\"RegEx::re_string::Print__osRC\"></span><span class=\"target\" id=\"structRegEx_1_1re__string_1a51c75ab7f1f8ceb4cf723bb2c13c7203\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer9token_setE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer9token_setE\">\n<span id=\"_CPPv3N5Lexer9token_setE\"></span><span id=\"_CPPv2N5Lexer9token_setE\"></span><span id=\"Lexer::token_set__vector:TokenInfo:\"></span><span class=\"target\" id=\"classLexer_1a316b86ef0e93af1a93c55e3af5ed5694\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv49TokenInfo\" title=\"TokenInfo\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">token_set</span></span></span><br/></dt><dd><p>List of all active tokens types. </p></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA4tDFAERK6this_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA4tDFAERK6this_t\">\n<span id=\"_CPPv3N4tDFA4tDFAERK6this_t\"></span><span id=\"_CPPv2N4tDFA4tDFAERK6this_t\"></span><span id=\"tDFA::tDFA__this_tCR\"></span><span class=\"target\" id=\"classtDFA_1ac2e0f75ae58d04b079baadf09a8ec378\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tDFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tDFA6this_tE\" title=\"tDFA::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8IteratorptEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8IteratorptEv\">\n<span id=\"_CPPv3NK11TokenStream8IteratorptEv\"></span><span id=\"_CPPv2NK11TokenStream8IteratorptEv\"></span><span id=\"TokenStream::Iterator::pointer-operatorC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a28f6a96a8d5103e81552211939247ee8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">-&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8IteratorppEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8IteratorppEv\">\n<span id=\"_CPPv3N11TokenStream8IteratorppEv\"></span><span id=\"_CPPv2N11TokenStream8IteratorppEv\"></span><span id=\"TokenStream::Iterator::inc-operator\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1af1097226febec4f83dc7e0e5e66be740\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">++</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State3nfaE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State3nfaE\">\n<span id=\"_CPPv3N10tNFA_State3nfaE\"></span><span id=\"_CPPv2N10tNFA_State3nfaE\"></span><span id=\"tNFA_State::nfa__tNFA:NUM_SYMBOLS.STOP_TYPE:CR\"></span><span class=\"target\" id=\"classtNFA__State_1a591e1bc2b42cb12f3c8cabab8a11edca\"></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E10tNFA_State\" title=\"tNFA_State::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E10tNFA_State\" title=\"tNFA_State::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">nfa</span></span></span><br/></dt><dd><p>Which NFA is this state set associated with? </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegExD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegExD0Ev\">\n<span id=\"_CPPv3N5RegExD0Ev\"></span><span id=\"_CPPv2N5RegExD0Ev\"></span><span id=\"RegEx::~RegEx\"></span><span class=\"target\" id=\"classRegEx_1a4b914d4a518ce6ba6e636be05751abcc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~RegEx</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx8re_block8AddToNFAER3NFA6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx8re_block8AddToNFAER3NFA6size_t6size_t\">\n<span id=\"_CPPv3NK5RegEx8re_block8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"_CPPv2NK5RegEx8re_block8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"RegEx::re_block::AddToNFA__NFAR.s.sC\"></span><span class=\"target\" id=\"structRegEx_1_1re__block_1a0793711d186756ed3c5c5eeb65d4b5e9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_string9re_stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_string9re_stringERKNSt6stringE\">\n<span id=\"_CPPv3N5RegEx9re_string9re_stringERKNSt6stringE\"></span><span id=\"_CPPv2N5RegEx9re_string9re_stringERKNSt6stringE\"></span><span id=\"RegEx::re_string::re_string__ssCR\"></span><span class=\"target\" id=\"structRegEx_1_1re__string_1a6cc97e5f8e32417548d26491df0fa1b2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">s</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8Iterator2tsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8Iterator2tsE\">\n<span id=\"_CPPv3N11TokenStream8Iterator2tsE\"></span><span id=\"_CPPv2N11TokenStream8Iterator2tsE\"></span><span id=\"TokenStream::Iterator::ts__Ptr:TokenStreamC:\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a51ad8ad4cb3cba75f29414574777ca00\"></span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ts</span></span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA7IsEmptyE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA7IsEmptyE6size_t\">\n<span id=\"_CPPv3NK4tNFA7IsEmptyE6size_t\"></span><span id=\"_CPPv2NK4tNFA7IsEmptyE6size_t\"></span><span id=\"tNFA::IsEmpty__sC\"></span><span class=\"target\" id=\"classtNFA_1a52f047cd8c8363b48e3df8c766e54325\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsEmpty</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Test if this state has only empty transitions from it, and not stop state. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5RegExEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5RegExEv\">\n<span id=\"_CPPv3N5RegEx5RegExEv\"></span><span id=\"_CPPv2N5RegEx5RegExEv\"></span><span id=\"RegEx::RegEx\"></span><span class=\"target\" id=\"classRegEx_1a2ccf0ec26b72795461ad53a86d146752\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">delete</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv43NFA\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43NFA\">\n<span id=\"_CPPv33NFA\"></span><span id=\"_CPPv23NFA\"></span><span class=\"target\" id=\"NFA_8hpp_1a6264006192b7a64500e0b4d060e3e727\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NFA</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"m\"><span class=\"pre\">128</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>NFA is the most standard tNFA setup. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA13AddTransitionE6size_t6size_tPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA13AddTransitionE6size_t6size_tPKc\">\n<span id=\"_CPPv3N4tNFA13AddTransitionE6size_t6size_tPKc\"></span><span id=\"_CPPv2N4tNFA13AddTransitionE6size_t6size_tPKc\"></span><span id=\"tNFA::AddTransition__s.s.cCP\"></span><span class=\"target\" id=\"classtNFA_1ae0bceca405bf4ee8e3e33e0958b2c9ef\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddTransition</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">to</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">sym_set</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add a transition between states \u2018from\u2019 and \u2018to\u2019 that can be taken with the provided symbols. </p></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA5PrintEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA5PrintEv\">\n<span id=\"_CPPv3NK4tNFA5PrintEv\"></span><span id=\"_CPPv2NK4tNFA5PrintEv\"></span><span id=\"tNFA::PrintC\"></span><span class=\"target\" id=\"classtNFA_1a53c62f7447dbfe2a906219bcfb36b1d2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print information about this NFA (for debugging) </p></dd>", "a[href=\"api/lexer_utils.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">lexer_utils.hpp<a class=\"headerlink\" href=\"#lexer-utils-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A set of utilities to convert between NFAs and DFAs. </p>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream3endEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream3endEv\">\n<span id=\"_CPPv3NK11TokenStream3endEv\"></span><span id=\"_CPPv2NK11TokenStream3endEv\"></span><span id=\"TokenStream::endC\"></span><span class=\"target\" id=\"classTokenStream_1ab0c44af7debab9a0eb495a3092f52046\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">end</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5TokencvRKNSt6stringEEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5TokencvRKNSt6stringEEv\">\n<span id=\"_CPPv3NK5TokencvRKNSt6stringEEv\"></span><span id=\"_CPPv2NK5TokencvRKNSt6stringEEv\"></span><span id=\"Token::castto-ssCR-operatorC\"></span><span class=\"target\" id=\"structToken_1af9c9e4f69d42be9d5dde29690ceac51d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Token will automatically convert to its matched sequence (lexeme) is used as a string. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream6tokensE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream6tokensE\">\n<span id=\"_CPPv3N11TokenStream6tokensE\"></span><span id=\"_CPPv2N11TokenStream6tokensE\"></span><span id=\"TokenStream::tokens__vector:Token:\"></span><span class=\"target\" id=\"classTokenStream_1a4eeaae50cddfc0e5774a68145dec3299\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tokens</span></span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA7GetSizeEv\">\n<span id=\"_CPPv3NK4tNFA7GetSizeEv\"></span><span id=\"_CPPv2NK4tNFA7GetSizeEv\"></span><span id=\"tNFA::GetSizeC\"></span><span class=\"target\" id=\"classtNFA_1a331005efc42b2e116f4cc61fc3fec02c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the current number of states. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8Iterator8IteratorERK11TokenStream6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8Iterator8IteratorERK11TokenStream6size_t\">\n<span id=\"_CPPv3N11TokenStream8Iterator8IteratorERK11TokenStream6size_t\"></span><span id=\"_CPPv2N11TokenStream8Iterator8IteratorERK11TokenStream6size_t\"></span><span id=\"TokenStream::Iterator::Iterator__TokenStreamCR.s\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a4bdb39559ab0be00bc9d2786337d6a3d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_ts</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer12GetNumTokensEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer12GetNumTokensEv\">\n<span id=\"_CPPv3NK5Lexer12GetNumTokensEv\"></span><span id=\"_CPPv2NK5Lexer12GetNumTokensEv\"></span><span id=\"Lexer::GetNumTokensC\"></span><span class=\"target\" id=\"classLexer_1ad37622d2438b39ab5f489e04ba09b755\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNumTokens</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many types of tokens can be identified in this Lexer? </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_star7re_starE3PtrI7re_baseE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_star7re_starE3PtrI7re_baseE\">\n<span id=\"_CPPv3N5RegEx7re_star7re_starE3PtrI7re_baseE\"></span><span id=\"_CPPv2N5RegEx7re_star7re_starE3PtrI7re_baseE\"></span><span id=\"RegEx::re_star::re_star__Ptr:re_base:\"></span><span class=\"target\" id=\"structRegEx_1_1re__star_1a67814a6e7722fa570a3a2d1a702f193b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_star</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">c</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8IteratormmEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8IteratormmEi\">\n<span id=\"_CPPv3N11TokenStream8IteratormmEi\"></span><span id=\"_CPPv2N11TokenStream8IteratormmEi\"></span><span id=\"TokenStream::Iterator::dec-operator__i\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1ab6ff161bdaec9fd72440592ebbf3e4ba\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">--</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx10re_charset9AsCharSetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx10re_charset9AsCharSetEv\">\n<span id=\"_CPPv3N5RegEx10re_charset9AsCharSetEv\"></span><span id=\"_CPPv2N5RegEx10re_charset9AsCharSetEv\"></span><span id=\"RegEx::re_charset::AsCharSet\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset_1a21cb06ba71639c84f5d1eee974b7d82e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx10re_charsetE\" title=\"RegEx::re_charset\"><span class=\"n\"><span class=\"pre\">re_charset</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AsCharSet</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA7AddStopE6size_t6stop_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA7AddStopE6size_t6stop_t\">\n<span id=\"_CPPv3N4tDFA7AddStopE6size_t6stop_t\"></span><span id=\"_CPPv2N4tDFA7AddStopE6size_t6stop_t\"></span><span id=\"tDFA::AddStop__s.stop_t\"></span><span class=\"target\" id=\"classtDFA_1a3832691747c291b5a0de5db3090ebb8f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span>, <a class=\"reference internal\" href=\"#_CPPv4N4tDFA6stop_tE\" title=\"tDFA::stop_t\"><span class=\"n\"><span class=\"pre\">stop_t</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set the stop value only if it\u2019s higher than the current stop value. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8Iterator14GetTokenStreamEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8Iterator14GetTokenStreamEv\">\n<span id=\"_CPPv3NK11TokenStream8Iterator14GetTokenStreamEv\"></span><span id=\"_CPPv2NK11TokenStream8Iterator14GetTokenStreamEv\"></span><span id=\"TokenStream::Iterator::GetTokenStreamC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a8fd1682fc42b717db88aea145639644e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetTokenStream</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK5Lexer5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK5Lexer5PrintERNSt7ostreamE\"></span><span id=\"Lexer::Print__osRC\"></span><span class=\"target\" id=\"classLexer_1a5e67bfea5df55bf3218a78b07f5991fc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print the full information about this lexer (for debugging) </p></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFAD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFAD0Ev\">\n<span id=\"_CPPv3N4tDFAD0Ev\"></span><span id=\"_CPPv2N4tDFAD0Ev\"></span><span id=\"tDFA::~tDFA\"></span><span class=\"target\" id=\"classtDFA_1aa755749b423c8bcbe9ce3f0081465d8a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~tDFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer12cur_token_idE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer12cur_token_idE\">\n<span id=\"_CPPv3N5Lexer12cur_token_idE\"></span><span id=\"_CPPv2N5Lexer12cur_token_idE\"></span><span id=\"Lexer::cur_token_id__i\"></span><span class=\"target\" id=\"classLexer_1aa49f27c2807bedf7392ccd632ddcd8a8\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">cur_token_id</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N5Lexer6MAX_IDE\" title=\"Lexer::MAX_ID\"><span class=\"n\"><span class=\"pre\">MAX_ID</span></span></a><br/></dt><dd><p>Which ID should the next new token get? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer8TokenizeENSt11string_viewERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer8TokenizeENSt11string_viewERKNSt6stringE\">\n<span id=\"_CPPv3NK5Lexer8TokenizeENSt11string_viewERKNSt6stringE\"></span><span id=\"_CPPv2NK5Lexer8TokenizeENSt11string_viewERKNSt6stringE\"></span><span id=\"Lexer::Tokenize__std::string_view.ssCRC\"></span><span class=\"target\" id=\"classLexer_1af9f4c85f5d8e5d6f2dc9bf031fc36916\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Tokenize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">name</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"in_view\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Turn an input string into a vector of tokens. </p></dd>", "a[href=\"api/NFA.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">NFA.hpp<a class=\"headerlink\" href=\"#nfa-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A Non-deterministic Finite Automata simulator. </p><p>\nTo build a standard NFA, use NFA. If you want to have more symbols or more stop states, use tNFA&lt;S,T&gt; where S is the number of symbols and T is the type used for stop. (defaults are 128 for ASCII-128 and uint8_t respectively.)</p>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo2idE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo2idE\">\n<span id=\"_CPPv3N9TokenInfo2idE\"></span><span id=\"_CPPv2N9TokenInfo2idE\"></span><span id=\"TokenInfo::id__i\"></span><span class=\"target\" id=\"structTokenInfo_1ab9c0ff8ec2c582d0e55e80ae35ec6d7e\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">id</span></span></span><br/></dt><dd><p>Unique id for token. </p></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA7IsStartE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA7IsStartE6size_t\">\n<span id=\"_CPPv3NK4tNFA7IsStartE6size_t\"></span><span id=\"_CPPv2NK4tNFA7IsStartE6size_t\"></span><span id=\"tNFA::IsStart__sC\"></span><span class=\"target\" id=\"classtNFA_1a25859fbe5458e3e73a64ca9380babe4e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsStart</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Test if NFA begins at provided state (may have free transitions to other states) </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_base8AsStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_base8AsStringEv\">\n<span id=\"_CPPv3N5RegEx7re_base8AsStringEv\"></span><span id=\"_CPPv2N5RegEx7re_base8AsStringEv\"></span><span id=\"RegEx::re_base::AsString\"></span><span class=\"target\" id=\"structRegEx_1_1re__base_1aea14d78a463a418fb4a4ab5f2d0578fb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_stringE\" title=\"RegEx::re_string\"><span class=\"n\"><span class=\"pre\">re_string</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AsString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State9state_setE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State9state_setE\">\n<span id=\"_CPPv3N10tNFA_State9state_setE\"></span><span id=\"_CPPv2N10tNFA_State9state_setE\"></span><span id=\"tNFA_State::state_set__std::set:s:\"></span><span class=\"target\" id=\"classtNFA__State_1a97400cca4fc46d474cef81ecb5c82085\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">state_set</span></span></span><br/></dt><dd><p>Which states are currently legal? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5TokenaSERK5Token\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5TokenaSERK5Token\">\n<span id=\"_CPPv3N5TokenaSERK5Token\"></span><span id=\"_CPPv2N5TokenaSERK5Token\"></span><span id=\"Token::assign-operator__TokenCR\"></span><span class=\"target\" id=\"structToken_1a302f8febd87a9cca349ba76dfd782548\"></span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo9TokenInfoERR9TokenInfo\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo9TokenInfoERR9TokenInfo\">\n<span id=\"_CPPv3N9TokenInfo9TokenInfoERR9TokenInfo\"></span><span id=\"_CPPv2N9TokenInfo9TokenInfoERR9TokenInfo\"></span><span id=\"TokenInfo::TokenInfo__TokenInfoRR\"></span><span class=\"target\" id=\"structTokenInfo_1a15938284dd0d90adc602a0dc16a7e8fc\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4N9TokenInfo9TokenInfoERR9TokenInfo\" title=\"TokenInfo::TokenInfo\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA7GetStopE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA7GetStopE6size_t\">\n<span id=\"_CPPv3NK4tDFA7GetStopE6size_t\"></span><span id=\"_CPPv2NK4tDFA7GetStopE6size_t\"></span><span id=\"tDFA::GetStop__sC\"></span><span class=\"target\" id=\"classtDFA_1ab8125c4ba87801c66232f925a892871c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tDFA6stop_tE\" title=\"tDFA::stop_t\"><span class=\"n\"><span class=\"pre\">stop_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetStop</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream6GetPtrE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream6GetPtrE6size_t\">\n<span id=\"_CPPv3NK11TokenStream6GetPtrE6size_t\"></span><span id=\"_CPPv2NK11TokenStream6GetPtrE6size_t\"></span><span id=\"TokenStream::GetPtr__sC\"></span><span class=\"target\" id=\"classTokenStream_1ae5ab9c0530e5dd9f0246fd9bb26b5ac2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetPtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5notesE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5notesE\">\n<span id=\"_CPPv3N5RegEx5notesE\"></span><span id=\"_CPPv2N5RegEx5notesE\"></span><span id=\"RegEx::notes__vector:ss:\"></span><span class=\"target\" id=\"classRegEx_1a2947182a2d304ede92a6a50071a560f0\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">notes</span></span></span><br/></dt><dd><p>Any warnings or errors would be provided here. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx10re_charset8char_setE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx10re_charset8char_setE\">\n<span id=\"_CPPv3N5RegEx10re_charset8char_setE\"></span><span id=\"_CPPv2N5RegEx10re_charset8char_setE\"></span><span id=\"RegEx::re_charset::char_set__opts_t\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset_1ac281e2a48dedc5fe23e8f30038c40903\"></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx6opts_tE\" title=\"RegEx::opts_t\"><span class=\"n\"><span class=\"pre\">opts_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">char_set</span></span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx7re_star5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx7re_star5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK5RegEx7re_star5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK5RegEx7re_star5PrintERNSt7ostreamE\"></span><span id=\"RegEx::re_star::Print__osRC\"></span><span class=\"target\" id=\"structRegEx_1_1re__star_1a939a1f0a2d6c1adb0d01db31dd605dcb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/lexer_utils.html#_CPPv4I00DpE8MergeDFA3DFARR2T1RR2T2DpRR2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I00DpE8MergeDFA3DFARR2T1RR2T2DpRR2Ts\">\n<span id=\"_CPPv3I00DpE8MergeDFARR2T1RR2T2DpRR2Ts\"></span><span id=\"_CPPv2I00DpE8MergeDFARR2T1RR2T2DpRR2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T1</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"group__lexer__utilities_1gab95c63a8f97e717e82b5450c0fa1db62\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/DFA.html#_CPPv43DFA\" title=\"DFA\"><span class=\"n\"><span class=\"pre\">DFA</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MergeDFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I00DpE8MergeDFA3DFARR2T1RR2T2DpRR2Ts\" title=\"MergeDFA::T1\"><span class=\"n\"><span class=\"pre\">T1</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I00DpE8MergeDFA3DFARR2T1RR2T2DpRR2Ts\" title=\"MergeDFA::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I00DpE8MergeDFA3DFARR2T1RR2T2DpRR2Ts\" title=\"MergeDFA::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">others</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Merge multiple automata (DFA, NFA, RegEx) into one DFA. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx5re_or5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx5re_or5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK5RegEx5re_or5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK5RegEx5re_or5PrintERNSt7ostreamE\"></span><span id=\"RegEx::re_or::Print__osRC\"></span><span class=\"target\" id=\"structRegEx_1_1re__or_1aaed1f0dfb70ec1af56e34da29596e9da\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/lexer_utils.html#_CPPv46to_NFARK3NFA\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46to_NFARK3NFA\">\n<span id=\"_CPPv36to_NFARK3NFA\"></span><span id=\"_CPPv26to_NFARK3NFA\"></span><span id=\"to_NFA__NFACR\"></span><span class=\"target\" id=\"group__lexer__utilities_1gacc9595a4f5d2c70ac537ee325271078b\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_NFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Converting NFA to MFA &amp;#8212; no change needed. </p></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA14GetTransitionsE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA14GetTransitionsE6size_t\">\n<span id=\"_CPPv3NK4tDFA14GetTransitionsE6size_t\"></span><span id=\"_CPPv2NK4tDFA14GetTransitionsE6size_t\"></span><span id=\"tDFA::GetTransitions__sC\"></span><span class=\"target\" id=\"classtDFA_1a8419174423b0c40d7f8d2ef7f2fc880f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/array.html#_CPPv4I0_6size_tE5array\" title=\"array\"><span class=\"n\"><span class=\"pre\">array</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_i0E4tDFA\" title=\"tDFA::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetTransitions</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return an array of all transitions associated with a specified state. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream7GetNameEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream7GetNameEv\">\n<span id=\"_CPPv3NK11TokenStream7GetNameEv\"></span><span id=\"_CPPv2NK11TokenStream7GetNameEv\"></span><span id=\"TokenStream::GetNameC\"></span><span class=\"target\" id=\"classTokenStream_1aff8992ae17bd1c43ea6ca7dd7e99ea2f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetName</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA8IsActiveEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA8IsActiveEi\">\n<span id=\"_CPPv3NK4tDFA8IsActiveEi\"></span><span id=\"_CPPv2NK4tDFA8IsActiveEi\"></span><span id=\"tDFA::IsActive__iC\"></span><span class=\"target\" id=\"classtDFA_1a0f4b7e1481531e569cfd670dacf86ba1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsActive</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Test if a state is still valid. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream3GetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream3GetE6size_t\">\n<span id=\"_CPPv3NK11TokenStream3GetE6size_t\"></span><span id=\"_CPPv2NK11TokenStream3GetE6size_t\"></span><span id=\"TokenStream::Get__sC\"></span><span class=\"target\" id=\"classTokenStream_1a74328745796757322766a1b80137be6d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer10DebugTokenEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer10DebugTokenEi\">\n<span id=\"_CPPv3NK5Lexer10DebugTokenEi\"></span><span id=\"_CPPv2NK5Lexer10DebugTokenEi\"></span><span id=\"Lexer::DebugToken__iC\"></span><span class=\"target\" id=\"classLexer_1acc27061c0d357b5d9244bf7356614b6d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DebugToken</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">token_id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream4backEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream4backEv\">\n<span id=\"_CPPv3NK11TokenStream4backEv\"></span><span id=\"_CPPv2NK11TokenStream4backEv\"></span><span id=\"TokenStream::backC\"></span><span class=\"target\" id=\"classTokenStream_1af6c7dfe37b89aa95cf3ec9edd94ef80b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">back</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA7is_stopE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA7is_stopE\">\n<span id=\"_CPPv3N4tNFA7is_stopE\"></span><span id=\"_CPPv2N4tNFA7is_stopE\"></span><span id=\"tNFA::is_stop__vector:STOP_TYPE:\"></span><span class=\"target\" id=\"classtNFA_1a8e67ad9b68bd11cc29c92b41911e3752\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_stop</span></span></span><br/></dt><dd><p>0=no 1=yes (char instead of bool for speed) </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5LexeraSERK5Lexer\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5LexeraSERK5Lexer\">\n<span id=\"_CPPv3N5LexeraSERK5Lexer\"></span><span id=\"_CPPv2N5LexeraSERK5Lexer\"></span><span id=\"Lexer::assign-operator__LexerCR\"></span><span class=\"target\" id=\"classLexer_1a0cd1949b06fa81791ab4971532d1c093\"></span><a class=\"reference internal\" href=\"#_CPPv45Lexer\" title=\"Lexer\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Lexer\" title=\"Lexer\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_baseE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_baseE\">\n<span id=\"_CPPv3N5RegEx7re_baseE\"></span><span id=\"_CPPv2N5RegEx7re_baseE\"></span><span id=\"RegEx::re_base\"></span><span class=\"target\" id=\"structRegEx_1_1re__base\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_base</span></span></span><br/></dt><dd><p>Internal base representation of a portion of a regex. </p></dd>", "a[href=\"api/lexer_utils.html#_CPPv49DFAStatus\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49DFAStatus\">\n<span id=\"_CPPv39DFAStatus\"></span><span id=\"_CPPv29DFAStatus\"></span><span id=\"DFAStatus\"></span><span class=\"target\" id=\"structDFAStatus\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DFAStatus</span></span></span><br/></dt><dd><p>Structure to track the current status of a DFA. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx10EnsureNextEc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx10EnsureNextEc\">\n<span id=\"_CPPv3N5RegEx10EnsureNextEc\"></span><span id=\"_CPPv2N5RegEx10EnsureNextEc\"></span><span id=\"RegEx::EnsureNext__c\"></span><span class=\"target\" id=\"classRegEx_1a8c4a805e5dbbf642999ff875d937adbd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EnsureNext</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Make sure that there is another element in the RegEx (e.g., after an \u2018|\u2019) or else trigger and error to report the problem. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfoaSERK9TokenInfo\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfoaSERK9TokenInfo\">\n<span id=\"_CPPv3N9TokenInfoaSERK9TokenInfo\"></span><span id=\"_CPPv2N9TokenInfoaSERK9TokenInfo\"></span><span id=\"TokenInfo::assign-operator__TokenInfoCR\"></span><span class=\"target\" id=\"structTokenInfo_1a5c19aa66fceb35c69b51f874961e8216\"></span><a class=\"reference internal\" href=\"#_CPPv49TokenInfo\" title=\"TokenInfo\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv49TokenInfo\" title=\"TokenInfo\"><span class=\"n\"><span class=\"pre\">TokenInfo</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5RegExERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5RegExERKNSt6stringE\">\n<span id=\"_CPPv3N5RegEx5RegExERKNSt6stringE\"></span><span id=\"_CPPv2N5RegEx5RegExERKNSt6stringE\"></span><span id=\"RegEx::RegEx__ssCR\"></span><span class=\"target\" id=\"classRegEx_1aaf898055d7ecd015c66e998514231051\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">r</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA6this_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA6this_tE\">\n<span id=\"_CPPv3N4tDFA6this_tE\"></span><span id=\"_CPPv2N4tDFA6this_tE\"></span><span class=\"target\" id=\"classtDFA_1ab6cf7c338823ad1a2e081f80fac4274a\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">this_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_i0E4tDFA\" title=\"tDFA\"><span class=\"n\"><span class=\"pre\">tDFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_i0E4tDFA\" title=\"tDFA::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_i0E4tDFA\" title=\"tDFA::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFAaSERK4tNFAI1S9STOP_TYPEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFAaSERK4tNFAI1S9STOP_TYPEE\">\n<span id=\"_CPPv3N4tNFAaSERK4tNFAI1S9STOP_TYPEE\"></span><span id=\"_CPPv2N4tNFAaSERK4tNFAI1S9STOP_TYPEE\"></span><span id=\"tNFA::assign-operator__tNFA:S.STOP_TYPE:CR\"></span><span class=\"target\" id=\"classtNFA_1abc0f84e24835aebf58848a3333d92d98\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::S\"><span class=\"n\"><span class=\"pre\">S</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::S\"><span class=\"n\"><span class=\"pre\">S</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State5ResetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State5ResetEv\">\n<span id=\"_CPPv3N10tNFA_State5ResetEv\"></span><span id=\"_CPPv2N10tNFA_State5ResetEv\"></span><span id=\"tNFA_State::Reset\"></span><span class=\"target\" id=\"classtNFA__State_1a710f4e59630bb709cdf370876cc8896c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Change current states to start + free transitions from start. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx7re_base5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx7re_base5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK5RegEx7re_base5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK5RegEx7re_base5PrintERNSt7ostreamE\"></span><span id=\"RegEx::re_base::Print__osRC\"></span><span class=\"target\" id=\"structRegEx_1_1re__base_1aa5ef6e6b073510e30f8029037d0010cb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer14generate_lexerE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer14generate_lexerE\">\n<span id=\"_CPPv3N5Lexer14generate_lexerE\"></span><span id=\"_CPPv2N5Lexer14generate_lexerE\"></span><span id=\"Lexer::generate_lexer__b\"></span><span class=\"target\" id=\"classLexer_1a64f3c2ec2447f1b20504493f77d3f64c\"></span><span class=\"k\"><span class=\"pre\">mutable</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">generate_lexer</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><br/></dt><dd><p>Do we need to regenerate the lexer? </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5re_orE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5re_orE\">\n<span id=\"_CPPv3N5RegEx5re_orE\"></span><span id=\"_CPPv2N5RegEx5re_orE\"></span><span id=\"RegEx::re_or\"></span><span class=\"target\" id=\"structRegEx_1_1re__or\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_or</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_parentE\" title=\"RegEx::re_parent\"><span class=\"n\"><span class=\"pre\">re_parent</span></span></a><br/></dt><dd><p>Representation of two options in a regex, e.g., a|b. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_string3strE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_string3strE\">\n<span id=\"_CPPv3N5RegEx9re_string3strE\"></span><span id=\"_CPPv2N5RegEx9re_string3strE\"></span><span id=\"RegEx::re_string::str__ss\"></span><span class=\"target\" id=\"structRegEx_1_1re__string_1afc720abe8e39ef29b966839950b3ddf1\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">str</span></span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5RegExERK5RegEx\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5RegExERK5RegEx\">\n<span id=\"_CPPv3N5RegEx5RegExERK5RegEx\"></span><span id=\"_CPPv2N5RegEx5RegExERK5RegEx\"></span><span id=\"RegEx::RegEx__RegExCR\"></span><span class=\"target\" id=\"classRegEx_1af2922af31dd4667db9d978468d93fe44\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx5RegExERK5RegEx\" title=\"RegEx::RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">r</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx4TestERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx4TestERKNSt6stringE\">\n<span id=\"_CPPv3NK5RegEx4TestERKNSt6stringE\"></span><span id=\"_CPPv2NK5RegEx4TestERKNSt6stringE\"></span><span id=\"RegEx::Test__ssCRC\"></span><span class=\"target\" id=\"classRegEx_1aa362f45f6310b8a2a9fd1aba30f193cb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Test</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Test if a string statisfies this regex. </p></dd>", "a[href=\"api/NFA.html#_CPPv4I_6size_t0E10tNFA_State\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t0E10tNFA_State\">\n<span id=\"_CPPv3I_6size_t0E10tNFA_State\"></span><span id=\"_CPPv2I_6size_t0E10tNFA_State\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">128</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classtNFA__State\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tNFA_State</span></span></span><br/></dt><dd><p>Information about the current full state (i.e., set of legal states) of an NFA. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx15ConstructStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx15ConstructStringEv\">\n<span id=\"_CPPv3N5RegEx15ConstructStringEv\"></span><span id=\"_CPPv2N5RegEx15ConstructStringEv\"></span><span id=\"RegEx::ConstructString\"></span><span class=\"target\" id=\"classRegEx_1a4dc1fae624a48113961e5e6d2c4e2535\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_stringE\" title=\"RegEx::re_string\"><span class=\"n\"><span class=\"pre\">re_string</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ConstructString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a string, loading everything needed. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8IteratorleERK8Iterator\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8IteratorleERK8Iterator\">\n<span id=\"_CPPv3NK11TokenStream8IteratorleERK8Iterator\"></span><span id=\"_CPPv2NK11TokenStream8IteratorleERK8Iterator\"></span><span id=\"TokenStream::Iterator::lte-operator__IteratorCRC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a632c4a123237f29ae4050bfc4aa43cf5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA10Transition7symbolsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA10Transition7symbolsE\">\n<span id=\"_CPPv3N4tNFA10Transition7symbolsE\"></span><span id=\"_CPPv2N4tNFA10Transition7symbolsE\"></span><span id=\"tNFA::Transition::symbols__opts_t\"></span><span class=\"target\" id=\"structtNFA_1_1Transition_1aaef628c1146410f84bb686d5b185875a\"></span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA6opts_tE\" title=\"tNFA::opts_t\"><span class=\"n\"><span class=\"pre\">opts_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">symbols</span></span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv43DFA\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43DFA\">\n<span id=\"_CPPv33DFA\"></span><span id=\"_CPPv23DFA\"></span><span class=\"target\" id=\"DFA_8hpp_1ad1c1efdfe02f2da3144dbe50c2e10b8d\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DFA</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_i0E4tDFA\" title=\"tDFA\"><span class=\"n\"><span class=\"pre\">tDFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"m\"><span class=\"pre\">128</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>Setup DFA to be a simple tDFA with the basic character set for symbols. </p></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA8IsActiveE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA8IsActiveE6size_t\">\n<span id=\"_CPPv3NK4tDFA8IsActiveE6size_t\"></span><span id=\"_CPPv2NK4tDFA8IsActiveE6size_t\"></span><span id=\"tDFA::IsActive__sC\"></span><span class=\"target\" id=\"classtDFA_1accd9d83cc05366d87984267d64a949a7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsActive</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer12GetTokenNameEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer12GetTokenNameEi\">\n<span id=\"_CPPv3NK5Lexer12GetTokenNameEi\"></span><span id=\"_CPPv2NK5Lexer12GetTokenNameEi\"></span><span id=\"Lexer::GetTokenName__iC\"></span><span class=\"target\" id=\"classLexer_1a5b3577faf85dcdb9506710ea3f097f4e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetTokenName</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the name associated with a token type (you provide the ID) </p></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA18HasFreeTransitionsE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA18HasFreeTransitionsE6size_t\">\n<span id=\"_CPPv3NK4tNFA18HasFreeTransitionsE6size_t\"></span><span id=\"_CPPv2NK4tNFA18HasFreeTransitionsE6size_t\"></span><span id=\"tNFA::HasFreeTransitions__sC\"></span><span class=\"target\" id=\"classtNFA_1a0be608c8c01ec7c71cce7991e8c35d46\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">HasFreeTransitions</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Does the provided state have free transitions? </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx13PrintInternalEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx13PrintInternalEv\">\n<span id=\"_CPPv3NK5RegEx13PrintInternalEv\"></span><span id=\"_CPPv2NK5RegEx13PrintInternalEv\"></span><span id=\"RegEx::PrintInternalC\"></span><span class=\"target\" id=\"classRegEx_1a8b5ac1860872f62f3d46c50c92c598e2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintInternal</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>For debugging: print the internal representation of the regex. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx10PrintDebugEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx10PrintDebugEv\">\n<span id=\"_CPPv3NK5RegEx10PrintDebugEv\"></span><span id=\"_CPPv2NK5RegEx10PrintDebugEv\"></span><span id=\"RegEx::PrintDebugC\"></span><span class=\"target\" id=\"classRegEx_1a6a87340722c7b29159912f7e97703998\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintDebug</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print general debuging information about this regex. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer5LexerERR5Lexer\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer5LexerERR5Lexer\">\n<span id=\"_CPPv3N5Lexer5LexerERR5Lexer\"></span><span id=\"_CPPv2N5Lexer5LexerERR5Lexer\"></span><span id=\"Lexer::Lexer__LexerRR\"></span><span class=\"target\" id=\"classLexer_1a3275e598d15ba2c616ce3501160dbcac\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4N5Lexer5LexerERR5Lexer\" title=\"Lexer::Lexer\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA5State5transE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA5State5transE\">\n<span id=\"_CPPv3N4tNFA5State5transE\"></span><span id=\"_CPPv2N4tNFA5State5transE\"></span><span id=\"tNFA::State::trans__std::map:s.Transition:\"></span><span class=\"target\" id=\"structtNFA_1_1State_1ad89c6549c6b5698eff6267930fff440a\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">map</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA10TransitionE\" title=\"tNFA::Transition\"><span class=\"n\"><span class=\"pre\">Transition</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">trans</span></span></span><br/></dt><dd><p>What symbol transitions are available? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Token5TokenEiRKNSt6stringE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Token5TokenEiRKNSt6stringE6size_t\">\n<span id=\"_CPPv3N5Token5TokenEiRKNSt6stringE6size_t\"></span><span id=\"_CPPv2N5Token5TokenEiRKNSt6stringE6size_t\"></span><span id=\"Token::Token__i.ssCR.s\"></span><span class=\"target\" id=\"structToken_1a633aa731ad0a99df63a6e7c93574e83d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Token</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">_id</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\"</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">_line</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer8ERROR_IDE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer8ERROR_IDE\">\n<span id=\"_CPPv3N5Lexer8ERROR_IDE\"></span><span id=\"_CPPv2N5Lexer8ERROR_IDE\"></span><span id=\"Lexer::ERROR_ID__i\"></span><span class=\"target\" id=\"classLexer_1a521074d041690acc7e90ac072a076239\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ERROR_ID</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"m\"><span class=\"pre\">1</span></span><br/></dt><dd><p>Code for unknown token ID. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx7re_baseD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx7re_baseD0Ev\">\n<span id=\"_CPPv3N5RegEx7re_baseD0Ev\"></span><span id=\"_CPPv2N5RegEx7re_baseD0Ev\"></span><span id=\"RegEx::re_base::~re_base\"></span><span class=\"target\" id=\"structRegEx_1_1re__base_1af84bdb88c96f7c934ac7071477cc79e7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~re_base</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA4NextEiNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA4NextEiNSt6stringE\">\n<span id=\"_CPPv3NK4tDFA4NextEiNSt6stringE\"></span><span id=\"_CPPv2NK4tDFA4NextEiNSt6stringE\"></span><span id=\"tDFA::Next__i.ssC\"></span><span class=\"target\" id=\"classtDFA_1a4b44b7d910388a0a9e27522ba8c970ea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Next</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">state</span></span>, <a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sym_set</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the new state after a series of symbols. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx7re_base8AddToNFAER3NFA6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx7re_base8AddToNFAER3NFA6size_t6size_t\">\n<span id=\"_CPPv3NK5RegEx7re_base8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"_CPPv2NK5RegEx7re_base8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"RegEx::re_base::AddToNFA__NFAR.s.sC\"></span><span class=\"target\" id=\"structRegEx_1_1re__base_1a50974840c117d5eb1886335d870db890\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_string9re_stringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_string9re_stringEv\">\n<span id=\"_CPPv3N5RegEx9re_string9re_stringEv\"></span><span id=\"_CPPv2N5RegEx9re_string9re_stringEv\"></span><span id=\"RegEx::re_string::re_string\"></span><span class=\"target\" id=\"structRegEx_1_1re__string_1aa313a8d088637cc3b32219cc3d302e96\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer8TokenizeERNSt7istreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer8TokenizeERNSt7istreamERKNSt6stringE\">\n<span id=\"_CPPv3NK5Lexer8TokenizeERNSt7istreamERKNSt6stringE\"></span><span id=\"_CPPv2NK5Lexer8TokenizeERNSt7istreamERKNSt6stringE\"></span><span id=\"Lexer::Tokenize__isR.ssCRC\"></span><span class=\"target\" id=\"classLexer_1aad3233a4c4f0fc0d2fc1ed6b4dbe8f23\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Tokenize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">istream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">is</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">name</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"in_stream\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Turn an input stream of text into a vector of tokens. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStreamaSERK11TokenStream\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStreamaSERK11TokenStream\">\n<span id=\"_CPPv3N11TokenStreamaSERK11TokenStream\"></span><span id=\"_CPPv2N11TokenStreamaSERK11TokenStream\"></span><span id=\"TokenStream::assign-operator__TokenStreamCR\"></span><span class=\"target\" id=\"classTokenStream_1a9a71a6006ef5932b8f71fbd7f5da7371\"></span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv411TokenStream\" title=\"TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8IteratoreqERK8Iterator\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8IteratoreqERK8Iterator\">\n<span id=\"_CPPv3NK11TokenStream8IteratoreqERK8Iterator\"></span><span id=\"_CPPv2NK11TokenStream8IteratoreqERK8Iterator\"></span><span id=\"TokenStream::Iterator::eq-operator__IteratorCRC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1afcc9df0292f026d9c1bd6d43fd84c150\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">==</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx5validE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx5validE\">\n<span id=\"_CPPv3N5RegEx5validE\"></span><span id=\"_CPPv2N5RegEx5validE\"></span><span id=\"RegEx::valid__b\"></span><span class=\"target\" id=\"classRegEx_1aeca0ca4cf42a711428237f5577dddfd0\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">valid</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><br/></dt><dd><p>Set to false if regex cannot be processed. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA13AddTransitionE6size_t6size_tKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA13AddTransitionE6size_t6size_tKc\">\n<span id=\"_CPPv3N4tNFA13AddTransitionE6size_t6size_tKc\"></span><span id=\"_CPPv2N4tNFA13AddTransitionE6size_t6size_tKc\"></span><span id=\"tNFA::AddTransition__s.s.cC\"></span><span class=\"target\" id=\"classtNFA_1a102453ba815102c9adad820c013084f7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddTransition</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">to</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sym</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add a transition between states \u2018from\u2019 and \u2018to\u2019 that can be taken with a char symbol. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N9TokenInfo5regexE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9TokenInfo5regexE\">\n<span id=\"_CPPv3N9TokenInfo5regexE\"></span><span id=\"_CPPv2N9TokenInfo5regexE\"></span><span id=\"TokenInfo::regex__RegEx\"></span><span class=\"target\" id=\"structTokenInfo_1a7f8e3b809b36f567bb9abce40d6f73c3\"></span><a class=\"reference internal\" href=\"api/RegEx.html#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">regex</span></span></span><br/></dt><dd><p>Pattern to describe token type. </p></dd>", "a[href=\"api/regex_utils.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">regex_utils.hpp<a class=\"headerlink\" href=\"#regex-utils-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Helper functions for building regular expressions. </p>", "a[href=\"api/NFA.html#_CPPv4N4tNFA6statesE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA6statesE\">\n<span id=\"_CPPv3N4tNFA6statesE\"></span><span id=\"_CPPv2N4tNFA6statesE\"></span><span id=\"tNFA::states__vector:State:\"></span><span class=\"target\" id=\"classtNFA_1a065a18450cc8179f1904e893490a5fff\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA5StateE\" title=\"tNFA::State\"><span class=\"n\"><span class=\"pre\">State</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">states</span></span></span><br/></dt><dd><p>Information about available states. </p></dd>", "a[href=\"api/lexer_utils.html#_CPPv4I00DpE8MergeNFA3NFARR2T1RR2T2DpRR2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I00DpE8MergeNFA3NFARR2T1RR2T2DpRR2Ts\">\n<span id=\"_CPPv3I00DpE8MergeNFARR2T1RR2T2DpRR2Ts\"></span><span id=\"_CPPv2I00DpE8MergeNFARR2T1RR2T2DpRR2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T1</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"group__lexer__utilities_1gadce3bbc9ed385c58088b6a9133ec42f0\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MergeNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I00DpE8MergeNFA3NFARR2T1RR2T2DpRR2Ts\" title=\"MergeNFA::T1\"><span class=\"n\"><span class=\"pre\">T1</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I00DpE8MergeNFA3NFARR2T1RR2T2DpRR2Ts\" title=\"MergeNFA::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I00DpE8MergeNFA3NFARR2T1RR2T2DpRR2Ts\" title=\"MergeNFA::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">others</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Merge multiple automata (DFA, NFA, RegEx) into one NFA. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx8AsStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx8AsStringEv\">\n<span id=\"_CPPv3NK5RegEx8AsStringEv\"></span><span id=\"_CPPv2NK5RegEx8AsStringEv\"></span><span id=\"RegEx::AsStringC\"></span><span class=\"target\" id=\"classRegEx_1a1ac70f3ab9f0be7b7cabbe669b36cda9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AsString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert the RegEx to an standard string, readable from outsite this class. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream8Iterator8IteratorERK8Iterator\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream8Iterator8IteratorERK8Iterator\">\n<span id=\"_CPPv3N11TokenStream8Iterator8IteratorERK8Iterator\"></span><span id=\"_CPPv2N11TokenStream8Iterator8IteratorERK8Iterator\"></span><span id=\"TokenStream::Iterator::Iterator__IteratorCR\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a41552e2db87131cd9b4709241abc43f4\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8Iterator8IteratorERK8Iterator\" title=\"TokenStream::Iterator::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream5beginEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream5beginEv\">\n<span id=\"_CPPv3NK11TokenStream5beginEv\"></span><span id=\"_CPPv2NK11TokenStream5beginEv\"></span><span id=\"TokenStream::beginC\"></span><span class=\"target\" id=\"classTokenStream_1af96eafc7050ad7e7a7feb1d04ce395f8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">begin</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4I_i0E4tDFA\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_i0E4tDFA\">\n<span id=\"_CPPv3I_i0E4tDFA\"></span><span id=\"_CPPv2I_i0E4tDFA\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">128</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classtDFA\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">tDFA</span></span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4NK4tNFA17HasSymTransitionsE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tNFA17HasSymTransitionsE6size_t\">\n<span id=\"_CPPv3NK4tNFA17HasSymTransitionsE6size_t\"></span><span id=\"_CPPv2NK4tNFA17HasSymTransitionsE6size_t\"></span><span id=\"tNFA::HasSymTransitions__sC\"></span><span class=\"target\" id=\"classtNFA_1a8a4cc1f396000c04d82820ecf16439e5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">HasSymTransitions</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Does the provided state have symbol-transitions? </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx8re_block8SimplifyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx8re_block8SimplifyEv\">\n<span id=\"_CPPv3N5RegEx8re_block8SimplifyEv\"></span><span id=\"_CPPv2N5RegEx8re_block8SimplifyEv\"></span><span id=\"RegEx::re_block::Simplify\"></span><span class=\"target\" id=\"structRegEx_1_1re__block_1adcaa9a61a29a0841ad5a406cfeaba99f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Simplify</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv45Token\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv45Token\">\n<span id=\"_CPPv35Token\"></span><span id=\"_CPPv25Token\"></span><span id=\"Token\"></span><span class=\"target\" id=\"structToken\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Token</span></span></span><br/></dt><dd><p>Information about a token instance from an input stream. </p></dd>", "a[href=\"api/Lexer.html#_CPPv45Lexer\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv45Lexer\">\n<span id=\"_CPPv35Lexer\"></span><span id=\"_CPPv25Lexer\"></span><span id=\"Lexer\"></span><span class=\"target\" id=\"classLexer\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></span><br/></dt><dd><p>A lexer with a set of token types (and associated regular expressions) </p></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx5re_or8AddToNFAER3NFA6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx5re_or8AddToNFAER3NFA6size_t6size_t\">\n<span id=\"_CPPv3NK5RegEx5re_or8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"_CPPv2NK5RegEx5re_or8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"RegEx::re_or::AddToNFA__NFAR.s.sC\"></span><span class=\"target\" id=\"structRegEx_1_1re__or_1a4578f455bacfce11c5d3eb58a94a434a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer7ProcessERNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer7ProcessERNSt6stringE\">\n<span id=\"_CPPv3NK5Lexer7ProcessERNSt6stringE\"></span><span id=\"_CPPv2NK5Lexer7ProcessERNSt6stringE\"></span><span id=\"Lexer::Process__ssRC\"></span><span class=\"target\" id=\"classLexer_1a54878df84fc0cb5ecefa8307db5c71d6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Process</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_str</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Shortcut to process a string rather than a stream, chopping off one token each time. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA10Transition10TransitionEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA10Transition10TransitionEv\">\n<span id=\"_CPPv3N4tNFA10Transition10TransitionEv\"></span><span id=\"_CPPv2N4tNFA10Transition10TransitionEv\"></span><span id=\"tNFA::Transition::Transition\"></span><span class=\"target\" id=\"structtNFA_1_1Transition_1aabf8156ee1adae3371849f6dd17c895f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Transition</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer10GetTokenIDERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer10GetTokenIDERKNSt6stringE\">\n<span id=\"_CPPv3NK5Lexer10GetTokenIDERKNSt6stringE\"></span><span id=\"_CPPv2NK5Lexer10GetTokenIDERKNSt6stringE\"></span><span id=\"Lexer::GetTokenID__ssCRC\"></span><span class=\"target\" id=\"classLexer_1acf2b6229a72044c3f0fc75b2b5b3ce3b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetTokenID</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">name</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the ID associated with a token type (you provide the token name) </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx10re_charsetE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx10re_charsetE\">\n<span id=\"_CPPv3N5RegEx10re_charsetE\"></span><span id=\"_CPPv2N5RegEx10re_charsetE\"></span><span id=\"RegEx::re_charset\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_charset</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx7re_baseE\" title=\"RegEx::re_base\"><span class=\"n\"><span class=\"pre\">re_base</span></span></a><br/></dt><dd><p>Representation of a character set e.g., [abc]. </p></dd>", "a[href=\"api/RegEx.html#_CPPv45RegEx\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv45RegEx\">\n<span id=\"_CPPv35RegEx\"></span><span id=\"_CPPv25RegEx\"></span><span id=\"RegEx\"></span><span class=\"target\" id=\"classRegEx\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></span><br/></dt><dd><p>A basic regular expression handler. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8IteratorgeERK8Iterator\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8IteratorgeERK8Iterator\">\n<span id=\"_CPPv3NK11TokenStream8IteratorgeERK8Iterator\"></span><span id=\"_CPPv2NK11TokenStream8IteratorgeERK8Iterator\"></span><span id=\"TokenStream::Iterator::gte-operator__IteratorCRC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a9e772d9377cfa051f060eb3870b4aa3e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer9token_mapE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer9token_mapE\">\n<span id=\"_CPPv3N5Lexer9token_mapE\"></span><span id=\"_CPPv2N5Lexer9token_mapE\"></span><span id=\"Lexer::token_map__map:ss.i:\"></span><span class=\"target\" id=\"classLexer_1a906e844b0cd86beeccf3d2612883f73f\"></span><a class=\"reference internal\" href=\"../base/api/map.html#_CPPv4I00DpE3map\" title=\"map\"><span class=\"n\"><span class=\"pre\">map</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">token_map</span></span></span><br/></dt><dd><p>Map of token names to id. </p></dd>", "a[href=\"api/NFA.html#_CPPv4NK10tNFA_State6GetNFAEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK10tNFA_State6GetNFAEv\">\n<span id=\"_CPPv3NK10tNFA_State6GetNFAEv\"></span><span id=\"_CPPv2NK10tNFA_State6GetNFAEv\"></span><span id=\"tNFA_State::GetNFAC\"></span><span class=\"target\" id=\"classtNFA__State_1a6c8651372359f9e77dbcd13d17403dec\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E10tNFA_State\" title=\"tNFA_State::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E10tNFA_State\" title=\"tNFA_State::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNFA</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the NFA associated with this state. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State8HasStateE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State8HasStateE6size_t\">\n<span id=\"_CPPv3N10tNFA_State8HasStateE6size_t\"></span><span id=\"_CPPv2N10tNFA_State8HasStateE6size_t\"></span><span id=\"tNFA_State::HasState__s\"></span><span class=\"target\" id=\"classtNFA__State_1a77c7c938336da5c670fbf3a694b1b23e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">HasState</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Is a particular NFA state currently included? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8Iterator5ToPtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8Iterator5ToPtrEv\">\n<span id=\"_CPPv3NK11TokenStream8Iterator5ToPtrEv\"></span><span id=\"_CPPv2NK11TokenStream8Iterator5ToPtrEv\"></span><span id=\"TokenStream::Iterator::ToPtrC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1a08ea4bc38420c09928d31049227c1e02\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToPtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx9re_parent9re_parentEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx9re_parent9re_parentEv\">\n<span id=\"_CPPv3N5RegEx9re_parent9re_parentEv\"></span><span id=\"_CPPv2N5RegEx9re_parent9re_parentEv\"></span><span id=\"RegEx::re_parent::re_parent\"></span><span class=\"target\" id=\"structRegEx_1_1re__parent_1a57534367e5bee573dfefa28d97202aa7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_parent</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4NK5RegEx10re_charset8AddToNFAER3NFA6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5RegEx10re_charset8AddToNFAER3NFA6size_t6size_t\">\n<span id=\"_CPPv3NK5RegEx10re_charset8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"_CPPv2NK5RegEx10re_charset8AddToNFAER3NFA6size_t6size_t\"></span><span id=\"RegEx::re_charset::AddToNFA__NFAR.s.sC\"></span><span class=\"target\" id=\"structRegEx_1_1re__charset_1aaafd6405158dd421da4589e6982ea187\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToNFA</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/NFA.html#_CPPv43NFA\" title=\"NFA\"><span class=\"n\"><span class=\"pre\">NFA</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">override</span></span><br/></dt><dd></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx11NUM_SYMBOLSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx11NUM_SYMBOLSE\">\n<span id=\"_CPPv3N5RegEx11NUM_SYMBOLSE\"></span><span id=\"_CPPv2N5RegEx11NUM_SYMBOLSE\"></span><span id=\"RegEx::NUM_SYMBOLS__s\"></span><span class=\"target\" id=\"classRegEx_1a6527fdf3af0d02af9a58535c31c24fe2\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">128</span></span><br/></dt><dd><p>Maximum number of symbol the RegEx can handle. </p></dd>", "a[href=\"api/RegEx.html#_CPPv4N5RegEx8re_blockE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5RegEx8re_blockE\">\n<span id=\"_CPPv3N5RegEx8re_blockE\"></span><span id=\"_CPPv2N5RegEx8re_blockE\"></span><span id=\"RegEx::re_block\"></span><span class=\"target\" id=\"structRegEx_1_1re__block\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">re_block</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45RegEx\" title=\"RegEx\"><span class=\"n\"><span class=\"pre\">RegEx</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N5RegEx9re_parentE\" title=\"RegEx::re_parent\"><span class=\"n\"><span class=\"pre\">re_parent</span></span></a><br/></dt><dd><p>Representation of a series of components\u2026 </p></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA5MergeERK4tNFAI11NUM_SYMBOLS9STOP_TYPEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA5MergeERK4tNFAI11NUM_SYMBOLS9STOP_TYPEE\">\n<span id=\"_CPPv3N4tNFA5MergeERK4tNFAI11NUM_SYMBOLS9STOP_TYPEE\"></span><span id=\"_CPPv2N4tNFA5MergeERK4tNFAI11NUM_SYMBOLS9STOP_TYPEE\"></span><span id=\"tNFA::Merge__tNFA:NUM_SYMBOLS.STOP_TYPE:CR\"></span><span class=\"target\" id=\"classtNFA_1a4e72ac527f3135a7fe4c4fa2286c3c1c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Merge</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA\"><span class=\"n\"><span class=\"pre\">tNFA</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N4tNFA11NUM_SYMBOLSE\" title=\"tNFA::NUM_SYMBOLS\"><span class=\"n\"><span class=\"pre\">NUM_SYMBOLS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E4tNFA\" title=\"tNFA::STOP_TYPE\"><span class=\"n\"><span class=\"pre\">STOP_TYPE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">nfa2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Merge another NFA into this one. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N11TokenStream11TokenStreamERR11TokenStream\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11TokenStream11TokenStreamERR11TokenStream\">\n<span id=\"_CPPv3N11TokenStream11TokenStreamERR11TokenStream\"></span><span id=\"_CPPv2N11TokenStream11TokenStreamERR11TokenStream\"></span><span id=\"TokenStream::TokenStream__TokenStreamRR\"></span><span class=\"target\" id=\"classTokenStream_1a761410fe9e6a3b0918fa06ed258fb17a\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream11TokenStreamERR11TokenStream\" title=\"TokenStream::TokenStream\"><span class=\"n\"><span class=\"pre\">TokenStream</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/Lexer.html#_CPPv4N5Lexer8AddTokenERKNSt6stringERKNSt6stringEbbRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5Lexer8AddTokenERKNSt6stringERKNSt6stringEbbRKNSt6stringE\">\n<span id=\"_CPPv3N5Lexer8AddTokenERKNSt6stringERKNSt6stringEbbRKNSt6stringE\"></span><span id=\"_CPPv2N5Lexer8AddTokenERKNSt6stringERKNSt6stringEbbRKNSt6stringE\"></span><span id=\"Lexer::AddToken__ssCR.ssCR.b.b.ssCR\"></span><span class=\"target\" id=\"classLexer_1a445b6f8843cc676ba6885fed4d90b3b8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AddToken</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">name</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">regex</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">save_lexeme</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">save_token</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">desc</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add a new token, specified by a name and the regex used to identify it. Note that token ids count down with highest IDs having priority. </p></dd>", "a[href=\"api/DFA.html#_CPPv4N4tDFA13SetTransitionE6size_t6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tDFA13SetTransitionE6size_t6size_t6size_t\">\n<span id=\"_CPPv3N4tDFA13SetTransitionE6size_t6size_t6size_t\"></span><span id=\"_CPPv2N4tDFA13SetTransitionE6size_t6size_t6size_t\"></span><span id=\"tDFA::SetTransition__s.s.s\"></span><span class=\"target\" id=\"classtDFA_1af26d7cf6f4a4a06085951fb9063e3632\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetTransition</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">to</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sym</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Add a specific transition associated with an input symbol. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4N5LexeraSERR5Lexer\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N5LexeraSERR5Lexer\">\n<span id=\"_CPPv3N5LexeraSERR5Lexer\"></span><span id=\"_CPPv2N5LexeraSERR5Lexer\"></span><span id=\"Lexer::assign-operator__LexerRR\"></span><span class=\"target\" id=\"classLexer_1ad6b850abea9c87be3fb52ea3f5737adc\"></span><a class=\"reference internal\" href=\"#_CPPv45Lexer\" title=\"Lexer\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv45Lexer\" title=\"Lexer\"><span class=\"n\"><span class=\"pre\">Lexer</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"api/DFA.html#_CPPv4NK4tDFA4TestERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4tDFA4TestERKNSt6stringE\">\n<span id=\"_CPPv3NK4tDFA4TestERKNSt6stringE\"></span><span id=\"_CPPv2NK4tDFA4TestERKNSt6stringE\"></span><span id=\"tDFA::Test__ssCRC\"></span><span class=\"target\" id=\"classtDFA_1addd115cf0dd7456c17e66c502ce7b141\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4tDFA6stop_tE\" title=\"tDFA::stop_t\"><span class=\"n\"><span class=\"pre\">stop_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Test</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Determine if an entire series of symbols is valid. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer7ProcessERNSt7istreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer7ProcessERNSt7istreamE\">\n<span id=\"_CPPv3NK5Lexer7ProcessERNSt7istreamE\"></span><span id=\"_CPPv2NK5Lexer7ProcessERNSt7istreamE\"></span><span id=\"Lexer::Process__isRC\"></span><span class=\"target\" id=\"classLexer_1a6638c990d909de27e0c606b0bec74ecf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Process</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">istream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">is</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the next token found in an input stream. Do so by examining one character at a time. Keep going as long as there is a chance of a valid lexeme (since we want to choose the longest one we can find.) Every time we do hit a valid lexeme, store it as the current \u201cbest\u201d and keep going. Once we hit a point where no other valid lexemes are possible, stop and return the best we\u2019ve found so far. </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK11TokenStream8IteratorltERK8Iterator\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11TokenStream8IteratorltERK8Iterator\">\n<span id=\"_CPPv3NK11TokenStream8IteratorltERK8Iterator\"></span><span id=\"_CPPv2NK11TokenStream8IteratorltERK8Iterator\"></span><span id=\"TokenStream::Iterator::lt-operator__IteratorCRC\"></span><span class=\"target\" id=\"classTokenStream_1_1Iterator_1af81231fb4f70a58b083fdeb5eec745a0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N11TokenStream8IteratorE\" title=\"TokenStream::Iterator\"><span class=\"n\"><span class=\"pre\">Iterator</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/NFA.html#_CPPv4N4tNFA5State7free_toE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4tNFA5State7free_toE\">\n<span id=\"_CPPv3N4tNFA5State7free_toE\"></span><span id=\"_CPPv2N4tNFA5State7free_toE\"></span><span id=\"tNFA::State::free_to__std::set:s:\"></span><span class=\"target\" id=\"structtNFA_1_1State_1a282971c4f8d0bb595eac1a794d193b7c\"></span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">set</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">free_to</span></span></span><br/></dt><dd><p>What other states can you move to for free? </p></dd>", "a[href=\"api/Lexer.html#_CPPv4NK5Lexer7ToTokenENSt11string_viewE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK5Lexer7ToTokenENSt11string_viewE\">\n<span id=\"_CPPv3NK5Lexer7ToTokenENSt11string_viewE\"></span><span id=\"_CPPv2NK5Lexer7ToTokenENSt11string_viewE\"></span><span id=\"Lexer::ToToken__std::string_viewC\"></span><span class=\"target\" id=\"classLexer_1a0c9a72a70a9f0eb73444e4a6f65b4f56\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Token\" title=\"Token\"><span class=\"n\"><span class=\"pre\">Token</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToToken</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_str</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Shortcut to just get a single token. </p></dd>", "a[href=\"api/NFA.html#_CPPv4N10tNFA_State4NextE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N10tNFA_State4NextE6size_t\">\n<span id=\"_CPPv3N10tNFA_State4NextE6size_t\"></span><span id=\"_CPPv2N10tNFA_State4NextE6size_t\"></span><span id=\"tNFA_State::Next__s\"></span><span class=\"target\" id=\"classtNFA__State_1af3b8b0baea72fbc4a64c3b8587dd12ef\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Next</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sym</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update states given a new input symbol. </p></dd>", "a[href=\"api/lexer_utils.html#_CPPv4N9DFAStatus9DFAStatusE6size_tRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9DFAStatus9DFAStatusE6size_tRKNSt6stringE\">\n<span id=\"_CPPv3N9DFAStatus9DFAStatusE6size_tRKNSt6stringE\"></span><span id=\"_CPPv2N9DFAStatus9DFAStatusE6size_tRKNSt6stringE\"></span><span id=\"DFAStatus::DFAStatus__s.ssCR\"></span><span class=\"target\" id=\"structDFAStatus_1a5177aaceb5f0f3890be0b20e44f3d655\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DFAStatus</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">_state</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_seq</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
