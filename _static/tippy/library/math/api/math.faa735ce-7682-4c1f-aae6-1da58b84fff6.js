selector_to_html = {"a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"#_CPPv410IsPowerOf2K6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410IsPowerOf2K6size_t\">\n<span id=\"_CPPv310IsPowerOf2K6size_t\"></span><span id=\"_CPPv210IsPowerOf2K6size_t\"></span><span id=\"IsPowerOf2__sCCE\"></span><span class=\"target\" id=\"math_8hpp_1a35a1b480091c25a0bcf1dead1c0e7a46\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsPowerOf2</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Tests if a number is a power of two. </p></dd>", "a[href=\"#_CPPv4I0DpE3Max1T1T1TDp2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE3Max1T1T1TDp2Ts\">\n<span id=\"_CPPv3I0DpE3Max1T1TDp2Ts\"></span><span id=\"_CPPv2I0DpE3Max1T1TDp2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a651295d36d6a8963e7fcabe9a535ee80\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE3Max1T1T1TDp2Ts\" title=\"Max::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Max</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0DpE3Max1T1T1TDp2Ts\" title=\"Max::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0DpE3Max1T1T1TDp2Ts\" title=\"Max::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0DpE3Max1T1T1TDp2Ts\" title=\"Max::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">extras</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Max of multiple elements is solved recursively. </p></dd>", "a[href=\"#_CPPv4I0E3MinRK1TRK1TRK1TRK1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3MinRK1TRK1TRK1TRK1T\">\n<span id=\"_CPPv3I0E3MinRK1TRK1TRK1T\"></span><span id=\"_CPPv2I0E3MinRK1TRK1TRK1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a3f2e9b17ad873a98e1d80e2371d4edbd\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3MinRK1TRK1TRK1TRK1T\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Min</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3MinRK1TRK1TRK1TRK1T\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3MinRK1TRK1TRK1TRK1T\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3MinRK1TRK1TRK1TRK1T\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in3</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return the minimum of three values. </p></dd>", "a[href=\"#_CPPv4I0E3GCD1TK1TK1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3GCD1TK1TK1T\">\n<span id=\"_CPPv3I0E3GCDK1TK1T\"></span><span id=\"_CPPv2I0E3GCDK1TK1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a4008cea25be02db39c3ed6b103728e76\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3GCD1TK1TK1T\" title=\"GCD::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GCD</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3GCD1TK1TK1T\" title=\"GCD::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3GCD1TK1TK1T\" title=\"GCD::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Greatest Common Divisor. </p></dd>", "a[href=\"#_CPPv4I0E3MinRK1TNSt16initializer_listIRK1TEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3MinRK1TNSt16initializer_listIRK1TEE\">\n<span id=\"_CPPv3I0E3MinNSt16initializer_listIRK1TEE\"></span><span id=\"_CPPv2I0E3MinNSt16initializer_listIRK1TEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1ac3e9e52a38631b307779f049bab0b848\"></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3MinRK1TNSt16initializer_listIRK1TEE\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Min</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">initializer_list</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3MinRK1TNSt16initializer_listIRK1TEE\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">lst</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>A version of Min that allows a variable number of inputs to be compared. </p></dd>", "a[href=\"#_CPPv414UnbiasedDivideiiR6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414UnbiasedDivideiiR6Random\">\n<span id=\"_CPPv314UnbiasedDivideiiR6Random\"></span><span id=\"_CPPv214UnbiasedDivideiiR6Random\"></span><span id=\"UnbiasedDivide__i.i.RandomR\"></span><span class=\"target\" id=\"math_8hpp_1a491d56170a1dce133ed1d886f34bbbe6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">UnbiasedDivide</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">dividend</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">divisor</span></span>, <a class=\"reference internal\" href=\"Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">r</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Regular integer division is truncated, not rounded. Round the division result instead of truncating it. Rounding ties (i.e., result % divisor == 0.5) are broken by coin toss. </p></dd>", "a[href=\"Random.html#_CPPv46Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46Random\">\n<span id=\"_CPPv36Random\"></span><span id=\"_CPPv26Random\"></span><span id=\"Random\"></span><span class=\"target\" id=\"classRandom\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Random</span></span></span><br/></dt><dd><p>Middle Square Weyl Sequence: A versatile and non-patterned pseudo-random-number generator. Based on: <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Middle-square_method\">https://en.wikipedia.org/wiki/Middle-square_method</a></p></dd>", "a[href=\"#_CPPv4I0E6Square1T1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E6Square1T1T\">\n<span id=\"_CPPv3I0E6Square1T\"></span><span id=\"_CPPv2I0E6Square1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a5991753a77c5963e007d26ab024846d7\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E6Square1T1T\" title=\"Square::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Square</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E6Square1T1T\" title=\"Square::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>A simple function to square a value. </p></dd>", "a[href=\"#_CPPv414UnbiasedDivide6size_t6size_tR6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414UnbiasedDivide6size_t6size_tR6Random\">\n<span id=\"_CPPv314UnbiasedDivide6size_t6size_tR6Random\"></span><span id=\"_CPPv214UnbiasedDivide6size_t6size_tR6Random\"></span><span id=\"UnbiasedDivide__s.s.RandomR\"></span><span class=\"target\" id=\"math_8hpp_1a0485cca7ef770038d9e6a09c620c809e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">UnbiasedDivide</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">dividend</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">divisor</span></span>, <a class=\"reference internal\" href=\"Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">r</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Regular integer division is truncated, not rounded. Round the division result instead of truncating it. Rounding ties (i.e., result % divisor == 0.5) are broken by coin toss. </p></dd>", "a[href=\"#_CPPv412NextPowerOf28uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412NextPowerOf28uint64_t\">\n<span id=\"_CPPv312NextPowerOf28uint64_t\"></span><span id=\"_CPPv212NextPowerOf28uint64_t\"></span><span id=\"NextPowerOf2__uint64_t\"></span><span class=\"target\" id=\"math_8hpp_1a0968a7354e9fa00d0046519fa0fdfd33\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NextPowerOf2</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">A</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Returns the next power of two (in 64-bits) that is strictly greater than A. Returns zero on overflow. </p></dd>", "a[href=\"#_CPPv44Log2d\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv44Log2d\">\n<span id=\"_CPPv34Log2d\"></span><span id=\"_CPPv24Log2d\"></span><span id=\"Log2__doubleCE\"></span><span class=\"target\" id=\"math_8hpp_1abc450d351bd3b6169f345a1ca4a7a455\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Log2</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compile-time log base 2 calculator. </p></dd>", "a[href=\"#math-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">math.hpp<a class=\"headerlink\" href=\"#math-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Useful mathematical functions (that are constexpr when possible.) </p>", "a[href=\"#_CPPv46ToggleRb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46ToggleRb\">\n<span id=\"_CPPv36ToggleRb\"></span><span id=\"_CPPv26ToggleRb\"></span><span id=\"Toggle__bR\"></span><span class=\"target\" id=\"math_8hpp_1a767bbd4f86428649687a79130d6f034f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_bool</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Toggle an input bool. </p></dd>", "a[href=\"#_CPPv45Log10d\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv45Log10d\">\n<span id=\"_CPPv35Log10d\"></span><span id=\"_CPPv25Log10d\"></span><span id=\"Log10__doubleCE\"></span><span class=\"target\" id=\"math_8hpp_1ac79fe9a68923f2a6ae0f6eba07b7a19a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Log10</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compile-time log base 10 calculator. </p></dd>", "a[href=\"#_CPPv4I0E3LCM1TK1TK1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3LCM1TK1TK1T\">\n<span id=\"_CPPv3I0E3LCMK1TK1T\"></span><span id=\"_CPPv2I0E3LCMK1TK1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a370a6856b2279395e33e6bb76f87f212\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3LCM1TK1TK1T\" title=\"LCM::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">LCM</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3LCM1TK1TK1T\" title=\"LCM::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3LCM1TK1TK1T\" title=\"LCM::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Least common multiple. </p></dd>", "a[href=\"#_CPPv42Lnd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv42Lnd\">\n<span id=\"_CPPv32Lnd\"></span><span id=\"_CPPv22Lnd\"></span><span id=\"Ln__doubleCE\"></span><span class=\"target\" id=\"math_8hpp_1a4763d50afac45be02d48402048209539\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ln</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compile-time natural log calculator. </p></dd>", "a[href=\"#_CPPv4I0DpE6MaxRefRK1TRK1TRK1TDpRK2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE6MaxRefRK1TRK1TRK1TDpRK2Ts\">\n<span id=\"_CPPv3I0DpE6MaxRefRK1TRK1TDpRK2Ts\"></span><span id=\"_CPPv2I0DpE6MaxRefRK1TRK1TDpRK2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1ab0054d1c3f302bfa72c84b22bb8ab429\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6MaxRefRK1TRK1TRK1TDpRK2Ts\" title=\"MaxRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaxRef</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6MaxRefRK1TRK1TRK1TDpRK2Ts\" title=\"MaxRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6MaxRefRK1TRK1TRK1TDpRK2Ts\" title=\"MaxRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6MaxRefRK1TRK1TRK1TDpRK2Ts\" title=\"MaxRef::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">extras</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>MaxRef of multiple elements returns reference to maximum value. </p></dd>", "a[href=\"#_CPPv411FloorDivideii\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411FloorDivideii\">\n<span id=\"_CPPv311FloorDivideii\"></span><span id=\"_CPPv211FloorDivideii\"></span><span id=\"FloorDivide__i.i\"></span><span class=\"target\" id=\"math_8hpp_1a4ebc40534baf86ea6553fe7a56f67094\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FloorDivide</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">dividend</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">divisor</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Divide one integer by another, rounding towards minus infinity. </p></dd>", "a[href=\"#_CPPv4I0E3Max1T1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3Max1T1T\">\n<span id=\"_CPPv3I0E3Max1T\"></span><span id=\"_CPPv2I0E3Max1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a5f7bc67c72acd15afb822f15f287f7da\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3Max1T1T\" title=\"Max::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Max</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E3Max1T1T\" title=\"Max::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Max of only one element is that element itself! </p></dd>", "a[href=\"#_CPPv4I0E3Pow1T1TN8internal8identityI1TE4typeE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3Pow1T1TN8internal8identityI1TE4typeE\">\n<span id=\"_CPPv3I0E3Pow1TN8internal8identityI1TE4typeE\"></span><span id=\"_CPPv2I0E3Pow1TN8internal8identityI1TE4typeE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a6ab92772c6a8e2c2743cd2b745efeb33\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3Pow1T1TN8internal8identityI1TE4typeE\" title=\"Pow::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Pow</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E3Pow1T1TN8internal8identityI1TE4typeE\" title=\"Pow::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">base</span></span>, <span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">internal</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">identity</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0E3Pow1T1TN8internal8identityI1TE4typeE\" title=\"Pow::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">type</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">exp</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>A fast method for calculating exponents on doubles or integral types. Uses if constexpr to work around compiler bug in Emscripten (issue #296). </p></dd>", "a[href=\"#_CPPv47AllTruev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv47AllTruev\">\n<span id=\"_CPPv37AllTruev\"></span><span id=\"_CPPv27AllTruev\"></span><span id=\"AllTrueCE\"></span><span class=\"target\" id=\"math_8hpp_1a9d7e61f0a4104b01129ef7c2f67d58ca\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AllTrue</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Combine bools to AND them all together. </p></dd>", "a[href=\"#_CPPv47AnyTruev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv47AnyTruev\">\n<span id=\"_CPPv37AnyTruev\"></span><span id=\"_CPPv27AnyTruev\"></span><span id=\"AnyTrueCE\"></span><span class=\"target\" id=\"math_8hpp_1ae6d5083dc4bce4ffda96b39d6b03e6f8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AnyTrue</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Combine bools to OR them all together. </p></dd>", "a[href=\"#_CPPv43Logdd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43Logdd\">\n<span id=\"_CPPv33Logdd\"></span><span id=\"_CPPv23Logdd\"></span><span id=\"Log__double.doubleCE\"></span><span class=\"target\" id=\"math_8hpp_1a71711adceeb2c4ff8eab3482471afba7\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Log</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">base</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">10.0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compile-time log calculator. </p></dd>", "a[href=\"#_CPPv4I0E7ToRange4TYPERK4TYPERK4TYPERK4TYPE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E7ToRange4TYPERK4TYPERK4TYPERK4TYPE\">\n<span id=\"_CPPv3I0E7ToRangeRK4TYPERK4TYPERK4TYPE\"></span><span id=\"_CPPv2I0E7ToRangeRK4TYPERK4TYPERK4TYPE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a516dd4b230daaa9bba0a9517408bdec1\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E7ToRange4TYPERK4TYPERK4TYPERK4TYPE\" title=\"ToRange::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E7ToRange4TYPERK4TYPERK4TYPERK4TYPE\" title=\"ToRange::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E7ToRange4TYPERK4TYPERK4TYPERK4TYPE\" title=\"ToRange::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_min</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E7ToRange4TYPERK4TYPERK4TYPERK4TYPE\" title=\"ToRange::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_max</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Run both min and max on a value to put it into a desired range. </p></dd>", "a[href=\"#_CPPv4I0E7IntLog2i4TYPE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E7IntLog2i4TYPE\">\n<span id=\"_CPPv3I0E7IntLog24TYPE\"></span><span id=\"_CPPv2I0E7IntLog24TYPE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a8f9086cf8fa09da5c77e36a7d9352431\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IntLog2</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E7IntLog2i4TYPE\" title=\"IntLog2::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>A compile-time int-log calculator (aka, significant bits) </p></dd>", "a[href=\"#_CPPv49Factoriali\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49Factoriali\">\n<span id=\"_CPPv39Factoriali\"></span><span id=\"_CPPv29Factoriali\"></span><span id=\"Factorial__iCE\"></span><span class=\"target\" id=\"math_8hpp_1a48c178b8093a587714e508a3d1faa9fe\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Factorial</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">i</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv413RoundedDivide6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413RoundedDivide6size_t6size_t\">\n<span id=\"_CPPv313RoundedDivide6size_t6size_t\"></span><span id=\"_CPPv213RoundedDivide6size_t6size_t\"></span><span id=\"RoundedDivide__s.s\"></span><span class=\"target\" id=\"math_8hpp_1a75e785a5649fdf37e95832061b0e0642\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RoundedDivide</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">dividend</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">divisor</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Default integer division is truncated, not rounded. Round the division result instead of truncating it. Rounding ties (i.e., result % divisor == 0.5) will be rounded up. </p></dd>", "a[href=\"#_CPPv4I0E6MaxRefRK1TRK1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E6MaxRefRK1TRK1T\">\n<span id=\"_CPPv3I0E6MaxRefRK1T\"></span><span id=\"_CPPv2I0E6MaxRefRK1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a6ff252f9eaf830c73a87b3d1d735f160\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E6MaxRefRK1TRK1T\" title=\"MaxRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaxRef</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E6MaxRefRK1TRK1T\" title=\"MaxRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>MaxRef works like Max, but never copies any inputs; always treats as references. MaxRef of only one element returns reference to that element itself! </p></dd>", "a[href=\"#_CPPv43Expd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43Expd\">\n<span id=\"_CPPv33Expd\"></span><span id=\"_CPPv23Expd\"></span><span id=\"Exp__doubleCE\"></span><span class=\"target\" id=\"math_8hpp_1a4fbbef7aeb0831c915e4d24480871cf7\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Exp</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">exp</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>A fast method of calculating e^x. </p></dd>", "a[href=\"#_CPPv4I0E3MaxRK1TNSt16initializer_listIRK1TEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3MaxRK1TNSt16initializer_listIRK1TEE\">\n<span id=\"_CPPv3I0E3MaxNSt16initializer_listIRK1TEE\"></span><span id=\"_CPPv2I0E3MaxNSt16initializer_listIRK1TEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a7a155e7ea0b61c16cfa3cd7fd2d57eb4\"></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3MaxRK1TNSt16initializer_listIRK1TEE\" title=\"Max::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Max</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">initializer_list</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3MaxRK1TNSt16initializer_listIRK1TEE\" title=\"Max::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">lst</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>A version of Max that allows a variable number of inputs to be compared. </p></dd>", "a[href=\"#_CPPv4I0E3Abs1T1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3Abs1T1T\">\n<span id=\"_CPPv3I0E3Abs1T\"></span><span id=\"_CPPv2I0E3Abs1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1aff6ea01b395c48120e9f95a58000139d\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3Abs1T1T\" title=\"Abs::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Abs</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E3Abs1T1T\" title=\"Abs::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Find the absolute value for any variable. </p></dd>", "a[href=\"#_CPPv4I0E6MinRefRK1TRK1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E6MinRefRK1TRK1T\">\n<span id=\"_CPPv3I0E6MinRefRK1T\"></span><span id=\"_CPPv2I0E6MinRefRK1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a388322621c7c574bc741d69709a43492\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E6MinRefRK1TRK1T\" title=\"MinRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MinRef</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E6MinRefRK1TRK1T\" title=\"MinRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>MinRef works like Min, but never copies any inputs; always treats as references. MinRef of only one element returns reference to that element itself! </p></dd>", "a[href=\"#_CPPv4IDpE7AllTruebbDp2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IDpE7AllTruebbDp2Ts\">\n<span id=\"_CPPv3IDpE7AllTruebDp2Ts\"></span><span id=\"_CPPv2IDpE7AllTruebDp2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a075f1126bb7a576c0395626114b8c172\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AllTrue</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">result</span></span>, <a class=\"reference internal\" href=\"#_CPPv4IDpE7AllTruebbDp2Ts\" title=\"AllTrue::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">OTHER</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0E3Min1T1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3Min1T1T\">\n<span id=\"_CPPv3I0E3Min1T\"></span><span id=\"_CPPv2I0E3Min1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a1cc270ad39c6feb6f381763aba865937\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E3Min1T1T\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Min</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E3Min1T1T\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Min of only one element is that element itself! </p></dd>", "a[href=\"#_CPPv4I0E6IntPow4TYPE4TYPE4TYPE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E6IntPow4TYPE4TYPE4TYPE\">\n<span id=\"_CPPv3I0E6IntPow4TYPE4TYPE\"></span><span id=\"_CPPv2I0E6IntPow4TYPE4TYPE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1ac215ac1af3c17b60cfae2fec3ed0f3d4\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E6IntPow4TYPE4TYPE4TYPE\" title=\"IntPow::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IntPow</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E6IntPow4TYPE4TYPE4TYPE\" title=\"IntPow::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">base</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0E6IntPow4TYPE4TYPE4TYPE\" title=\"IntPow::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">exp</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>A fast method for calculating exponents for int types. </p></dd>", "a[href=\"#_CPPv43Moddd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43Moddd\">\n<span id=\"_CPPv33Moddd\"></span><span id=\"_CPPv23Moddd\"></span><span id=\"Mod__double.double\"></span><span class=\"target\" id=\"math_8hpp_1ac6244b311aea73c4953b3718cfe3af27\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Mod</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_val</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">mod_val</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Regular Mod doesn\u2019t work on doubles. Build one that does! </p></dd>", "a[href=\"#_CPPv4I0DpE6MinRefRK1TRK1TRK1TDpRK2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE6MinRefRK1TRK1TRK1TDpRK2Ts\">\n<span id=\"_CPPv3I0DpE6MinRefRK1TRK1TDpRK2Ts\"></span><span id=\"_CPPv2I0DpE6MinRefRK1TRK1TDpRK2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1aa67b39038813acab5fd52b1016ea225c\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6MinRefRK1TRK1TRK1TDpRK2Ts\" title=\"MinRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MinRef</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6MinRefRK1TRK1TRK1TDpRK2Ts\" title=\"MinRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6MinRefRK1TRK1TRK1TDpRK2Ts\" title=\"MinRef::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6MinRefRK1TRK1TRK1TDpRK2Ts\" title=\"MinRef::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">extras</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>MinRef of multiple elements returns reference to minimum value. </p></dd>", "a[href=\"#_CPPv4I0DpE3Min1T1T1TDp2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE3Min1T1T1TDp2Ts\">\n<span id=\"_CPPv3I0DpE3Min1T1TDp2Ts\"></span><span id=\"_CPPv2I0DpE3Min1T1TDp2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1ab63564f26509b039407873776a994231\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE3Min1T1T1TDp2Ts\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Min</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0DpE3Min1T1T1TDp2Ts\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0DpE3Min1T1T1TDp2Ts\" title=\"Min::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0DpE3Min1T1T1TDp2Ts\" title=\"Min::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">extras</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Min of multiple elements is solved recursively. </p></dd>", "a[href=\"#_CPPv4I0E3Sgni1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3Sgni1T\">\n<span id=\"_CPPv3I0E3Sgn1T\"></span><span id=\"_CPPv2I0E3Sgn1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a26e765e84d3e0c1c42172200d6c6a13b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Sgn</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E3Sgni1T\" title=\"Sgn::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Calculate the sign (i.e., +1, -1, or 0) of a value. </p></dd>", "a[href=\"#_CPPv4IDpE7AnyTruebbDp2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IDpE7AnyTruebbDp2Ts\">\n<span id=\"_CPPv3IDpE7AnyTruebDp2Ts\"></span><span id=\"_CPPv2IDpE7AnyTruebDp2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"math_8hpp_1a84e11e43f933ac2d3cff5c7dfbc7d4d5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AnyTrue</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">result</span></span>, <a class=\"reference internal\" href=\"#_CPPv4IDpE7AnyTruebbDp2Ts\" title=\"AnyTrue::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">OTHER</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv44Pow2d\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv44Pow2d\">\n<span id=\"_CPPv34Pow2d\"></span><span id=\"_CPPv24Pow2d\"></span><span id=\"Pow2__doubleCE\"></span><span class=\"target\" id=\"math_8hpp_1a3355f7a783877a89574a4fd9cbf72e50\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Pow2</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">exp</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>A fast 2^x command. </p></dd>", "a[href=\"#_CPPv413RoundedDivideii\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413RoundedDivideii\">\n<span id=\"_CPPv313RoundedDivideii\"></span><span id=\"_CPPv213RoundedDivideii\"></span><span id=\"RoundedDivide__i.i\"></span><span class=\"target\" id=\"math_8hpp_1a3d0e0b2257def22b8eb288621fda7ad6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RoundedDivide</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">dividend</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">divisor</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Default integer division is truncated, not rounded. Round the division result instead of truncating it. Rounding ties (i.e., result % divisor == 0.5) are rounded up. </p></dd>", "a[href=\"#_CPPv43Modii\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43Modii\">\n<span id=\"_CPPv33Modii\"></span><span id=\"_CPPv23Modii\"></span><span id=\"Mod__i.iCE\"></span><span class=\"target\" id=\"math_8hpp_1a761ca5c4fa9271087ae59472b341ddb5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Mod</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_val</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">mod_val</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>% is actually remainder; Mod is a proper modulus command that handles negative #\u2019s correctly </p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
