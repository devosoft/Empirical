selector_to_html = {"a[href=\"#_CPPv4I00E5align6size_tR4TYPER4TYPE8GAP_TYPE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I00E5align6size_tR4TYPER4TYPE8GAP_TYPE\">\n<span id=\"_CPPv3I00E5alignR4TYPER4TYPE8GAP_TYPE\"></span><span id=\"_CPPv2I00E5alignR4TYPER4TYPE8GAP_TYPE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GAP_TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"sequence__utils_8hpp_1a5641f11090acc7c728dca8eea323c77b\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">align</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I00E5align6size_tR4TYPER4TYPE8GAP_TYPE\" title=\"align::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I00E5align6size_tR4TYPER4TYPE8GAP_TYPE\" title=\"align::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I00E5align6size_tR4TYPER4TYPE8GAP_TYPE\" title=\"align::GAP_TYPE\"><span class=\"n\"><span class=\"pre\">GAP_TYPE</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">gap</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Use edit distance to find the minimum number of insertions, deletions and substitutions to convert one array to another, and then insert gaps into the arrays appropriately. </p></dd>", "a[href=\"#_CPPv4I0E21calc_hamming_distance6size_tRK4TYPERK4TYPEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E21calc_hamming_distance6size_tRK4TYPERK4TYPEi\">\n<span id=\"_CPPv3I0E21calc_hamming_distanceRK4TYPERK4TYPEi\"></span><span id=\"_CPPv2I0E21calc_hamming_distanceRK4TYPERK4TYPEi\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"sequence__utils_8hpp_1ad8646a5b85919843a9f74622d8554848\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">calc_hamming_distance</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E21calc_hamming_distance6size_tRK4TYPERK4TYPEi\" title=\"calc_hamming_distance::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E21calc_hamming_distance6size_tRK4TYPERK4TYPEi\" title=\"calc_hamming_distance::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">offset</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Hamming distance is a simple count of substitutions needed to convert one array to another. </p></dd>", "a[href=\"#_CPPv4I0E10ToSequence6vectorI1TENSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E10ToSequence6vectorI1TENSt6stringE\">\n<span id=\"_CPPv3I0E10ToSequenceNSt6stringE\"></span><span id=\"_CPPv2I0E10ToSequenceNSt6stringE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"sequence__utils_8hpp_1a46e1299812d982f86e0fbe9ca9f1c4a0\"></span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0E10ToSequence6vectorI1TENSt6stringE\" title=\"ToSequence::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToSequence</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sequence_str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Generate a sequence from a string. Format: \u201centry1,entry2,entry3\u201d etc. Entries can be single values (Eg: \u201c72\u201d) or ranges using start[:step]:stop format (Eg: \u201c0:100\u201d or \u201c3:5:33\u201d). </p></dd>", "a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE6vector\">\n<span id=\"_CPPv3I0DpE6vector\"></span><span id=\"_CPPv2I0DpE6vector\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classvector\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">vector</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>Build a debug wrapper vector around std::vector. </p></dd>", "a[href=\"#_CPPv4I0E18calc_edit_distance6size_tRK4TYPERK4TYPE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E18calc_edit_distance6size_tRK4TYPERK4TYPE\">\n<span id=\"_CPPv3I0E18calc_edit_distanceRK4TYPERK4TYPE\"></span><span id=\"_CPPv2I0E18calc_edit_distanceRK4TYPERK4TYPE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"sequence__utils_8hpp_1a3499809beac06b7e061ec073027c2605\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">calc_edit_distance</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E18calc_edit_distance6size_tRK4TYPERK4TYPE\" title=\"calc_edit_distance::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E18calc_edit_distance6size_tRK4TYPERK4TYPE\" title=\"calc_edit_distance::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Edit distance is the minimum number of insertions, deletions and substitutions to convert one array to another. </p></dd>", "a[href=\"#sequence-utils-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">sequence_utils.hpp<a class=\"headerlink\" href=\"#sequence-utils-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Functions for analyzing with generic sequence types. </p><p>\nA set of functions for analyzing sequences, including distance metrics (Hamming and Edit/Levenshtein) and alignment. </p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
