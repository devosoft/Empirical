selector_to_html = {"a[href=\"#_CPPv48ColorRGBiii\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48ColorRGBiii\">\n<span id=\"_CPPv38ColorRGBiii\"></span><span id=\"_CPPv28ColorRGBiii\"></span><span id=\"ColorRGB__i.i.i\"></span><span class=\"target\" id=\"color__map_8hpp_1a4783b49e875708ceb61b57199c0230d6\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ColorRGB</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">r</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">g</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">b</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Generate a string to describe a JS color out of RGB values. </p></dd>", "a[href=\"#_CPPv48ColorHSLddd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48ColorHSLddd\">\n<span id=\"_CPPv38ColorHSLddd\"></span><span id=\"_CPPv28ColorHSLddd\"></span><span id=\"ColorHSL__double.double.double\"></span><span class=\"target\" id=\"color__map_8hpp_1a3ff548bbad05e0454eae5dc1a20cfb3c\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ColorHSL</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">h</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">s</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">l</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Generate a string to describe a JS color out of HSL values. </p></dd>", "a[href=\"#_CPPv49GetHSLMap6size_tddiiii\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49GetHSLMap6size_tddiiii\">\n<span id=\"_CPPv39GetHSLMap6size_tddiiii\"></span><span id=\"_CPPv29GetHSLMap6size_tddiiii\"></span><span id=\"GetHSLMap__s.double.double.i.i.i.i\"></span><span class=\"target\" id=\"color__map_8hpp_1ad40b72053cdecf6481e8bbb3ea62a57d\"></span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetHSLMap</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">map_size</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">min_h</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0.0</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_h</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">360.0</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">min_s</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">100</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_s</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">100</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">min_l</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">50</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_l</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">50</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Generate a vector of color strings providing ranges of all of hue, satuation and luminosity. </p></dd>", "a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE6vector\">\n<span id=\"_CPPv3I0DpE6vector\"></span><span id=\"_CPPv2I0DpE6vector\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classvector\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">vector</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>Build a debug wrapper vector around std::vector. </p></dd>", "a[href=\"#color-map-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">color_map.hpp<a class=\"headerlink\" href=\"#color-map-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Tools to dynamically build (and cache) color maps. </p>", "a[href=\"#_CPPv48ColorRGBiiid\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48ColorRGBiiid\">\n<span id=\"_CPPv38ColorRGBiiid\"></span><span id=\"_CPPv28ColorRGBiiid\"></span><span id=\"ColorRGB__i.i.i.double\"></span><span class=\"target\" id=\"color__map_8hpp_1a581ffc509a9a38f0ff0d6ffdcb602fed\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ColorRGB</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">r</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">g</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">b</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">a</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Generate a string to describe a JS color with an alpha channel. </p></dd>", "a[href=\"#_CPPv48ColorHSVddd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48ColorHSVddd\">\n<span id=\"_CPPv38ColorHSVddd\"></span><span id=\"_CPPv28ColorHSVddd\"></span><span id=\"ColorHSV__double.double.double\"></span><span class=\"target\" id=\"color__map_8hpp_1a97b9bc96bd509b5b0462610aee44bb03\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ColorHSV</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">h</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">s</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Generate a string to describe a JS color out of HSV values. </p></dd>", "a[href=\"#_CPPv49GetHueMap6size_tddii\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49GetHueMap6size_tddii\">\n<span id=\"_CPPv39GetHueMap6size_tddii\"></span><span id=\"_CPPv29GetHueMap6size_tddii\"></span><span id=\"GetHueMap__s.double.double.i.i\"></span><span class=\"target\" id=\"color__map_8hpp_1aea507e756bce2d87bd6614ee3c984de6\"></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetHueMap</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">map_size</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">min_h</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0.0</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_h</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">360.0</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">s</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">100</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">l</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">50</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Generate a vector of color strings with a specified range of hues, and fixed satuation and luminosity, </p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
