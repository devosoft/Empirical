selector_to_html = {"a[href=\"#jswrap-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">JSWrap.hpp<a class=\"headerlink\" href=\"#jswrap-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Wrap a C++ function and convert it to an integer that can be called from Javascript. </p><p>To wrap a function, call:</p>", "a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"#_CPPv48JSDelete6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48JSDelete6size_t\">\n<span id=\"_CPPv38JSDelete6size_t\"></span><span id=\"_CPPv28JSDelete6size_t\"></span><span id=\"JSDelete__s\"></span><span class=\"target\" id=\"JSWrap_8hpp_1ad379b43ed5f73e209e4a9d6fb9d87428\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">JSDelete</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">fun_id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Cleanup a function pointer when finished with it. </p></dd>", "a[href=\"#_CPPv414empCppCallbackK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414empCppCallbackK6size_t\">\n<span id=\"_CPPv314empCppCallbackK6size_t\"></span><span id=\"_CPPv214empCppCallbackK6size_t\"></span><span id=\"empCppCallback__sC\"></span><span class=\"target\" id=\"JSWrap_8hpp_1a0d0b46d5b38223bbc36fbdec69d7d519\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">empCppCallback</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">cb_id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Once you use JSWrap to create an ID, you can call the wrapped function from Javascript by supplying CPPCallback with the id and all args. If running with Emscripten pthreads, this method is to be called from the DOM and it will forward the call to empDoCppCallback on the web worker hosting Empirical runtime. If not running with Emscripten pthreads, this method simply calls empDoCppCallback (on the main browser thread). </p></dd>", "a[href=\"#_CPPv416empDoCppCallbackK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416empDoCppCallbackK6size_t\">\n<span id=\"_CPPv316empDoCppCallbackK6size_t\"></span><span id=\"_CPPv216empDoCppCallbackK6size_t\"></span><span id=\"empDoCppCallback__sC\"></span><span class=\"target\" id=\"JSWrap_8hpp_1a93719f8ed2484cc0c34e191066b6fbbd\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">empDoCppCallback</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">cb_id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function is dispatched by empCppCallback. It should be dispatched on the thread hosting the main Empirical runtime. If running with Emscripten pthreads, that would be the worker thread hosting the main Empirical runtime. If not running with Emscripten pthreads, that would be the main browser thread. (In a few limited cases when running with Emscripten pthreads, this function is called on the main browser thread.) </p></dd>", "a[href=\"#_CPPv4I0E6JSWrap6size_tRK8FUN_TYPERKNSt6stringEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E6JSWrap6size_tRK8FUN_TYPERKNSt6stringEb\">\n<span id=\"_CPPv3I0E6JSWrapRK8FUN_TYPERKNSt6stringEb\"></span><span id=\"_CPPv2I0E6JSWrapRK8FUN_TYPERKNSt6stringEb\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUN_TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"JSWrap_8hpp_1a3075694ebe6fd0dc19ac02b97e09d3d3\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">JSWrap</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E6JSWrap6size_tRK8FUN_TYPERKNSt6stringEb\" title=\"JSWrap::FUN_TYPE\"><span class=\"n\"><span class=\"pre\">FUN_TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_fun</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">fun_name</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\"</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">dispose_on_use</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>JSWrap takes a C++ function and wraps it in Javascript for easy calling in web code </p></dd>", "a[href=\"#_CPPv4I0E10JSWrapOnce6size_tRR8FUN_TYPE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E10JSWrapOnce6size_tRR8FUN_TYPE\">\n<span id=\"_CPPv3I0E10JSWrapOnceRR8FUN_TYPE\"></span><span id=\"_CPPv2I0E10JSWrapOnceRR8FUN_TYPE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUN_TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"JSWrap_8hpp_1ae42b98e8c5c40ea5eada32c2330c7c1b\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">JSWrapOnce</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E10JSWrapOnce6size_tRR8FUN_TYPE\" title=\"JSWrapOnce::FUN_TYPE\"><span class=\"n\"><span class=\"pre\">FUN_TYPE</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_fun</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>If we want a quick, unnammed, disposable function, use JSWrapOnce. </p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
