selector_to_html = {"a[href=\"#_CPPv422get_type_to_string_mapv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv422get_type_to_string_mapv\">\n<span id=\"_CPPv322get_type_to_string_mapv\"></span><span id=\"_CPPv222get_type_to_string_mapv\"></span><span id=\"get_type_to_string_map\"></span><span class=\"target\" id=\"js__utils_8hpp_1a965145f9a06daafb806b4314a36a471f\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">map</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">get_type_to_string_map</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function returns a std::map mapping typeid names to the appropriate strings to describe those types in Javscript. This is useful when using getValue() from within MAIN_THREAD_EM_ASM macros.</p><p>For example, say we have a templated function that takes a pointer to type T. We find out the appropriate string for type T : <div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">type_map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GetTypeToStringMap</span><span class=\"p\">();</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">type_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">type_map</span><span class=\"p\">[</span><span class=\"k\">typeid</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">).</span><span class=\"n\">name</span><span class=\"p\">()];</span>\n</pre></div>\n</div>\n</p><p>Now we can pass type_string.c_str() into MAIN_THREAD_EM_ASM: <div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">MAIN_THREAD_EM_ASM</span><span class=\"p\">({</span>\n<span class=\"w\">   </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getValue</span><span class=\"p\">(</span><span class=\"n\">$0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">$1</span><span class=\"p\">);</span>\n<span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">type_string</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n</p></dd>", "a[href=\"#_CPPv4I00E22pass_map_to_javascriptvRK3mapI5KEY_T5VAL_TE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I00E22pass_map_to_javascriptvRK3mapI5KEY_T5VAL_TE\">\n<span id=\"_CPPv3I00E22pass_map_to_javascriptRK3mapI5KEY_T5VAL_TE\"></span><span id=\"_CPPv2I00E22pass_map_to_javascriptRK3mapI5KEY_T5VAL_TE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">KEY_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">VAL_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"js__utils_8hpp_1ae2aed21c9588a42fb25346d88901fbbb\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pass_map_to_javascript</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/map.html#_CPPv4I00DpE3map\" title=\"map\"><span class=\"n\"><span class=\"pre\">map</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I00E22pass_map_to_javascriptvRK3mapI5KEY_T5VAL_TE\" title=\"pass_map_to_javascript::KEY_T\"><span class=\"n\"><span class=\"pre\">KEY_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I00E22pass_map_to_javascriptvRK3mapI5KEY_T5VAL_TE\" title=\"pass_map_to_javascript::VAL_T\"><span class=\"n\"><span class=\"pre\">VAL_T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">dict</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function can be called to pass a map into JavaScript. The resulting JavaScript object will be stored in emp.__incoming_map. </p></dd>", "a[href=\"#_CPPv4I00_6size_tE22pass_map_to_javascriptvRK5arrayI5KEY_T4SIZEERK5arrayI5VAL_T4SIZEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I00_6size_tE22pass_map_to_javascriptvRK5arrayI5KEY_T4SIZEERK5arrayI5VAL_T4SIZEE\">\n<span id=\"_CPPv3I00_6size_tE22pass_map_to_javascriptRK5arrayI5KEY_T4SIZEERK5arrayI5VAL_T4SIZEE\"></span><span id=\"_CPPv2I00_6size_tE22pass_map_to_javascriptRK5arrayI5KEY_T4SIZEERK5arrayI5VAL_T4SIZEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">KEY_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">VAL_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SIZE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"js__utils_8hpp_1aebce0edc1699bac1481efc7239ec152f\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pass_map_to_javascript</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/array.html#_CPPv4I0_6size_tE5array\" title=\"array\"><span class=\"n\"><span class=\"pre\">array</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I00_6size_tE22pass_map_to_javascriptvRK5arrayI5KEY_T4SIZEERK5arrayI5VAL_T4SIZEE\" title=\"pass_map_to_javascript::KEY_T\"><span class=\"n\"><span class=\"pre\">KEY_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I00_6size_tE22pass_map_to_javascriptvRK5arrayI5KEY_T4SIZEERK5arrayI5VAL_T4SIZEE\" title=\"pass_map_to_javascript::SIZE\"><span class=\"n\"><span class=\"pre\">SIZE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">keys</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/array.html#_CPPv4I0_6size_tE5array\" title=\"array\"><span class=\"n\"><span class=\"pre\">array</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I00_6size_tE22pass_map_to_javascriptvRK5arrayI5KEY_T4SIZEERK5arrayI5VAL_T4SIZEE\" title=\"pass_map_to_javascript::VAL_T\"><span class=\"n\"><span class=\"pre\">VAL_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I00_6size_tE22pass_map_to_javascriptvRK5arrayI5KEY_T4SIZEERK5arrayI5VAL_T4SIZEE\" title=\"pass_map_to_javascript::SIZE\"><span class=\"n\"><span class=\"pre\">SIZE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">values</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function can be called to pass two arrays of the same length into JavaScript (where a map is then created) One array should hold keys, and the other should hold values (note that the key-value pairs must line up across the arrays) The resulting JavaScript object will be stored in emp.__incoming_map. </p></dd>", "a[href=\"../../base/api/map.html#_CPPv4I00DpE3map\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I00DpE3map\">\n<span id=\"_CPPv3I00DpE3map\"></span><span id=\"_CPPv2I00DpE3map\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Key</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classmap\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">map</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">map</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I00DpE3map\" title=\"map::Key\"><span class=\"n\"><span class=\"pre\">Key</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I00DpE3map\" title=\"map::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I00DpE3map\" title=\"map::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"../../base/api/array.html#_CPPv4I0_6size_tE5array\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_6size_tE5array\">\n<span id=\"_CPPv3I0_6size_tE5array\"></span><span id=\"_CPPv2I0_6size_tE5array\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_ELEMENTS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"structarray\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">array</span></span></span><br/></dt><dd><p>We are in debug mode, so array has the same interface as std::array, but with extra bounds checking. Using vector as our base since it has the right pieces and is dynamic. </p></dd>", "a[href=\"#_CPPv4I0E18pass_vector_to_cppvR6vectorI1TEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E18pass_vector_to_cppvR6vectorI1TEb\">\n<span id=\"_CPPv3I0E18pass_vector_to_cppR6vectorI1TEb\"></span><span id=\"_CPPv2I0E18pass_vector_to_cppR6vectorI1TEb\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"js__utils_8hpp_1a7722cd429dd71ba17832de4d70df5c03\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pass_vector_to_cpp</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0E18pass_vector_to_cppvR6vectorI1TEb\" title=\"pass_vector_to_cpp::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">arr</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">recurse</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Same as pass_array_to_cpp, but lets you store values in a vector instead. </p></dd>", "a[href=\"#_CPPv415GetViewPortSizev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415GetViewPortSizev\">\n<span id=\"_CPPv315GetViewPortSizev\"></span><span id=\"_CPPv215GetViewPortSizev\"></span><span id=\"GetViewPortSize\"></span><span class=\"target\" id=\"js__utils_8hpp_1af1215c05ff61c6efd6e06b2a5ef4f822\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetViewPortSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper function that returns DOM view port size in pixels. </p></dd>", "a[href=\"#_CPPv4I00E24pass_array_to_javascriptv1C\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I00E24pass_array_to_javascriptv1C\">\n<span id=\"_CPPv3I00E24pass_array_to_javascript1C\"></span><span id=\"_CPPv2I00E24pass_array_to_javascript1C\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">C</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I00E24pass_array_to_javascriptv1C\" title=\"pass_array_to_javascript::C\"><span class=\"n\"><span class=\"pre\">C</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">value_type</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"js__utils_8hpp_1a2e2b75ae347edddb3054621ed71236fc\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pass_array_to_javascript</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I00E24pass_array_to_javascriptv1C\" title=\"pass_array_to_javascript::C\"><span class=\"n\"><span class=\"pre\">C</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">values</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function can be called to pass an array, vector, or other container with contiguously stored data into Javascript. The array will be stored in emp.__incoming_array. Currently supports arrays containing all of the types defined in get_type_to_string_map, which are also all of the types that emscripten supports getting via pointer. This function also supports nested arrays, and arrays of objects created with introspective tuple structs. </p></dd>", "a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE6vector\">\n<span id=\"_CPPv3I0DpE6vector\"></span><span id=\"_CPPv2I0DpE6vector\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classvector\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">vector</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>Build a debug wrapper vector around std::vector. </p></dd>", "a[href=\"#js-utils-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">js_utils.hpp<a class=\"headerlink\" href=\"#js-utils-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Tools for passing data between C++ and Javascript. </p>", "a[href=\"#_CPPv4I_NSt6size_tE0E17pass_array_to_cppvR5arrayI1T4SIZEEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_NSt6size_tE0E17pass_array_to_cppvR5arrayI1T4SIZEEb\">\n<span id=\"_CPPv3I_NSt6size_tE0E17pass_array_to_cppR5arrayI1T4SIZEEb\"></span><span id=\"_CPPv2I_NSt6size_tE0E17pass_array_to_cppR5arrayI1T4SIZEEb\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SIZE</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"js__utils_8hpp_1a05c8a6964ca6e0e9b153f79198194bd3\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pass_array_to_cpp</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../base/api/array.html#_CPPv4I0_6size_tE5array\" title=\"array\"><span class=\"n\"><span class=\"pre\">array</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_NSt6size_tE0E17pass_array_to_cppvR5arrayI1T4SIZEEb\" title=\"pass_array_to_cpp::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_NSt6size_tE0E17pass_array_to_cppvR5arrayI1T4SIZEEb\" title=\"pass_array_to_cpp::SIZE\"><span class=\"n\"><span class=\"pre\">SIZE</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">arr</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">recurse</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function lets you pass an array from javascript to C++! It takes a reference to the array as an argument and populates it with the contents of emp.__outgoing_array.</p><p>Currently accepts arrays of ints, floats, doubles, chars, and std::strings The size of the passed array must be equal to the size of the array stored in emp.__outgoing_array </p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
