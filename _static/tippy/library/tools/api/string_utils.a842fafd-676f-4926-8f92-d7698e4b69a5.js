selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/Percent-encoding\"]": "<p><b>URL encoding</b>, officially known as <b>percent-encoding</b>, is a method to encode arbitrary data in a Uniform Resource Identifier (URI) using only the US-ASCII characters legal within a URI. Although it is known as <i>URL encoding</i>, it is also used more generally within the main Uniform Resource Identifier (URI) set, which includes both Uniform Resource Locator (URL) and Uniform Resource Name (URN). As such, it is also used in the preparation of data of the <code>application/x-www-form-urlencoded</code> media type, as is often used in the submission of HTML form data in HTTP requests.</p>", "a[href^=\"https://en.wikipedia.org/wiki/Percent-encoding#\"]": "<p><b>URL encoding</b>, officially known as <b>percent-encoding</b>, is a method to encode arbitrary data in a Uniform Resource Identifier (URI) using only the US-ASCII characters legal within a URI. Although it is known as <i>URL encoding</i>, it is also used more generally within the main Uniform Resource Identifier (URI) set, which includes both Uniform Resource Locator (URL) and Uniform Resource Name (URN). As such, it is also used in the preparation of data of the <code>application/x-www-form-urlencoded</code> media type, as is often used in the submission of HTML form data in HTTP requests.</p>", "a[href=\"#_CPPv410to_literalRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410to_literalRKNSt6stringE\">\n<span id=\"_CPPv310to_literalRKNSt6stringE\"></span><span id=\"_CPPv210to_literalRKNSt6stringE\"></span><span id=\"to_literal__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a3a0c38ce2a6a715e7a4a5ef06520c01f\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_literal</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Take a string or iterable and convert it to a C++-style literal. </p></dd>", "a[href=\"#_CPPv410ANSI_Faintv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410ANSI_Faintv\">\n<span id=\"_CPPv310ANSI_Faintv\"></span><span id=\"_CPPv210ANSI_Faintv\"></span><span id=\"ANSI_Faint\"></span><span class=\"target\" id=\"string__utils_8hpp_1a8b1972130ecc575bacb7a955c46ad44b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Faint</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv416string_pop_quoteRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416string_pop_quoteRNSt6stringE\">\n<span id=\"_CPPv316string_pop_quoteRNSt6stringE\"></span><span id=\"_CPPv216string_pop_quoteRNSt6stringE\"></span><span id=\"string_pop_quote__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a2b65351784131e8a79241cd20e86bc39\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_pop_quote</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv417ANSI_BrightYellowv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417ANSI_BrightYellowv\">\n<span id=\"_CPPv317ANSI_BrightYellowv\"></span><span id=\"_CPPv217ANSI_BrightYellowv\"></span><span id=\"ANSI_BrightYellow\"></span><span class=\"target\" id=\"string__utils_8hpp_1a26968553b0cb8441f5e841a26affa74b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightYellow</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv415string_pop_wordRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415string_pop_wordRNSt6stringE\">\n<span id=\"_CPPv315string_pop_wordRNSt6stringE\"></span><span id=\"_CPPv215string_pop_wordRNSt6stringE\"></span><span id=\"string_pop_word__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1aba0c4046ca3b4d40ce8aff2543342054\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_pop_word</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove a prefix of a string, up to the first whitespace, and return it. </p></dd>", "a[href=\"#_CPPv414ANSI_BrightRedv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414ANSI_BrightRedv\">\n<span id=\"_CPPv314ANSI_BrightRedv\"></span><span id=\"_CPPv214ANSI_BrightRedv\"></span><span id=\"ANSI_BrightRed\"></span><span class=\"target\" id=\"string__utils_8hpp_1ad36341a1d69090cadea1ad0a8f9b1a3d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightRed</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv412ANSI_BlackBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412ANSI_BlackBGv\">\n<span id=\"_CPPv312ANSI_BlackBGv\"></span><span id=\"_CPPv212ANSI_BlackBGv\"></span><span id=\"ANSI_BlackBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a90705dfe9ca9eed7500e098cda74773b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BlackBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv415string_pop_lineRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415string_pop_lineRNSt6stringE\">\n<span id=\"_CPPv315string_pop_lineRNSt6stringE\"></span><span id=\"_CPPv215string_pop_lineRNSt6stringE\"></span><span id=\"string_pop_line__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a8d1700f1a858a287a585a138343f3efa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_pop_line</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove a prefix of a string, up to the first newline, and return it. </p></dd>", "a[href=\"#_CPPv419from_literal_stringRKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv419from_literal_stringRKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv319from_literal_stringRKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv219from_literal_stringRKNSt6stringERKNSt6stringE\"></span><span id=\"from_literal_string__ssCR.ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a7c0bb4f00266d090843e0ea7d509d386\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">from_literal_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span>, <span class=\"p\"><span class=\"pre\">[[</span></span><span class=\"pre\">maybe_unused</span><span class=\"p\"><span class=\"pre\">]]</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">quote_marks</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\\\"\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Convert a literal string representation to an actual string. </p></dd>", "a[href=\"#_CPPv416has_lower_letterRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416has_lower_letterRKNSt6stringE\">\n<span id=\"_CPPv316has_lower_letterRKNSt6stringE\"></span><span id=\"_CPPv216has_lower_letterRKNSt6stringE\"></span><span id=\"has_lower_letter__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a91c0102aa426ed317d815315ee598e5c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_lower_letter</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv48ANSI_ESCv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48ANSI_ESCv\">\n<span id=\"_CPPv38ANSI_ESCv\"></span><span id=\"_CPPv28ANSI_ESCv\"></span><span id=\"ANSI_ESCCE\"></span><span class=\"target\" id=\"string__utils_8hpp_1a6c391c70a78d967048d846445aa7ee93\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_ESC</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv412to_titlecaseNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412to_titlecaseNSt6stringE\">\n<span id=\"_CPPv312to_titlecaseNSt6stringE\"></span><span id=\"_CPPv212to_titlecaseNSt6stringE\"></span><span id=\"to_titlecase__ss\"></span><span class=\"target\" id=\"string__utils_8hpp_1a180e705e3e500c304253f5e3628587f2\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_titlecase</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Make first letter of each word upper case. </p></dd>", "a[href=\"#_CPPv413string_pop_toRNSt6stringERKNSt6stringE6size_tbbbb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413string_pop_toRNSt6stringERKNSt6stringE6size_tbbbb\">\n<span id=\"_CPPv313string_pop_toRNSt6stringERKNSt6stringE6size_tbbbb\"></span><span id=\"_CPPv213string_pop_toRNSt6stringERKNSt6stringE6size_tbbbb\"></span><span id=\"string_pop_to__ssR.ssCR.s.b.b.b.b\"></span><span class=\"target\" id=\"string__utils_8hpp_1ae7283f8d840dee44417ae5058731c274\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_pop_to</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4IDpE9to_stringNSt6stringEDpRK2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IDpE9to_stringNSt6stringEDpRK2Ts\">\n<span id=\"_CPPv3IDpE9to_stringDpRK2Ts\"></span><span id=\"_CPPv2IDpE9to_stringDpRK2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1a7af65396b89bea62546ac7b6f7eda07f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4IDpE9to_stringNSt6stringEDpRK2Ts\" title=\"to_string::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">values</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function does its best to convert any type to a string. Accepts any number of arguments and returns a single concatenated string. Conversions attempted for an object \u2018x\u2019 include (in order):<ul class=\"simple\">\n<li><p>Call a x.ToString()</p></li>\n<li><p>Call appropriate ToString(x) overload</p></li>\n<li><p>Pass x through stringstream </p></li>\n</ul>\n</p></dd>", "a[href=\"#_CPPv416ANSI_BrightRedBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416ANSI_BrightRedBGv\">\n<span id=\"_CPPv316ANSI_BrightRedBGv\"></span><span id=\"_CPPv216ANSI_BrightRedBGv\"></span><span id=\"ANSI_BrightRedBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a0959d29b0c96df1b00827f31e8fa523d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightRedBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv413to_ansi_blinkRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413to_ansi_blinkRKNSt6stringE\">\n<span id=\"_CPPv313to_ansi_blinkRKNSt6stringE\"></span><span id=\"_CPPv213to_ansi_blinkRKNSt6stringE\"></span><span id=\"to_ansi_blink__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1ae5fef2a8fb4cbfce1718314449e2bc6d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_ansi_blink</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Make a string appear blink when printed to the command line. </p></dd>", "a[href=\"#_CPPv413right_justifyRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413right_justifyRNSt6stringE\">\n<span id=\"_CPPv313right_justifyRNSt6stringE\"></span><span id=\"_CPPv213right_justifyRNSt6stringE\"></span><span id=\"right_justify__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a9c85585c1136e9dbe0462a29e0232a1d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">right_justify</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove all whitespace at the end of a string. </p></dd>", "a[href=\"#_CPPv410has_one_ofRKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410has_one_ofRKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv310has_one_ofRKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv210has_one_ofRKNSt6stringERKNSt6stringE\"></span><span id=\"has_one_of__ssCR.ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a87ece162eb8410e0c0819c14d0ee78e2\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_one_of</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">char_set</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Determine if a specified set of characters appears anywhere in a string. </p></dd>", "a[href=\"#_CPPv47ViewCSVRKNSt11string_viewE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv47ViewCSVRKNSt11string_viewE\">\n<span id=\"_CPPv37ViewCSVRKNSt11string_viewE\"></span><span id=\"_CPPv27ViewCSVRKNSt11string_viewE\"></span><span id=\"ViewCSV__std::string_viewCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a314152ede94d9e2d6f4ef5b05eac8293\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ViewCSV</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv413has_letter_atRKNSt6stringE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413has_letter_atRKNSt6stringE6size_t\">\n<span id=\"_CPPv313has_letter_atRKNSt6stringE6size_t\"></span><span id=\"_CPPv213has_letter_atRKNSt6stringE6size_t\"></span><span id=\"has_letter_at__ssCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a351f9bc79e57c846b631ba6508e75655\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_letter_at</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv412left_justifyRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412left_justifyRNSt6stringE\">\n<span id=\"_CPPv312left_justifyRNSt6stringE\"></span><span id=\"_CPPv212left_justifyRNSt6stringE\"></span><span id=\"left_justify__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a918581035a8f843bd19011043cd899a9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">left_justify</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove all whitespace at the beginning of a string. Return the whitespace removed. </p></dd>", "a[href=\"#_CPPv419ANSI_DefaultBGColorv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv419ANSI_DefaultBGColorv\">\n<span id=\"_CPPv319ANSI_DefaultBGColorv\"></span><span id=\"_CPPv219ANSI_DefaultBGColorv\"></span><span id=\"ANSI_DefaultBGColor\"></span><span class=\"target\" id=\"string__utils_8hpp_1a10cba5b3f0cb16b91e71d9223ced0b80\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_DefaultBGColor</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv47find_idNSt11string_viewENSt6stringE6size_tbbbb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv47find_idNSt11string_viewENSt6stringE6size_tbbbb\">\n<span id=\"_CPPv37find_idNSt11string_viewENSt6stringE6size_tbbbb\"></span><span id=\"_CPPv27find_idNSt11string_viewENSt6stringE6size_tbbbb\"></span><span id=\"find_id__std::string_view.ss.s.b.b.b.b\"></span><span class=\"target\" id=\"string__utils_8hpp_1a1638351251e246c10554dfef8bb408dc\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_id</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv416view_string_backRKNSt11string_viewE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416view_string_backRKNSt11string_viewE6size_t\">\n<span id=\"_CPPv316view_string_backRKNSt11string_viewE6size_t\"></span><span id=\"_CPPv216view_string_backRKNSt11string_viewE6size_t\"></span><span id=\"view_string_back__std::string_viewCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1ac52e8f56590a00aebf5b580cfe56b40f\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">view_string_back</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">npos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Provide a string_view on a string from a starting point with a given size. </p></dd>", "a[href=\"#_CPPv414ANSI_Underlinev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414ANSI_Underlinev\">\n<span id=\"_CPPv314ANSI_Underlinev\"></span><span id=\"_CPPv214ANSI_Underlinev\"></span><span id=\"ANSI_Underline\"></span><span class=\"target\" id=\"string__utils_8hpp_1a3aa72d0c48c48ef1d468d0c8ffe66f4d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Underline</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv413quote_stringsRK12string_vec_tKNSt6stringEKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413quote_stringsRK12string_vec_tKNSt6stringEKNSt6stringE\">\n<span id=\"_CPPv313quote_stringsRK12string_vec_tKNSt6stringEKNSt6stringE\"></span><span id=\"_CPPv213quote_stringsRK12string_vec_tKNSt6stringEKNSt6stringE\"></span><span id=\"quote_strings__string_vec_tCR.ssC.ssC\"></span><span class=\"target\" id=\"string__utils_8hpp_1ae93e9cdeb291423caa1ba90ea8858076\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv412string_vec_t\" title=\"string_vec_t\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">quote_strings</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv412string_vec_t\" title=\"string_vec_t\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_strings</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">open_quote</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">close_quote</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Pre-pend and post-pend specified sequences to all strings provided. </p></dd>", "a[href=\"#_CPPv415string_pop_uintRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415string_pop_uintRNSt6stringE\">\n<span id=\"_CPPv315string_pop_uintRNSt6stringE\"></span><span id=\"_CPPv215string_pop_uintRNSt6stringE\"></span><span id=\"string_pop_uint__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1ae2f84176f742e8d378176a5089177e5d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">long</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">long</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_pop_uint</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv411view_slicesRKNSt11string_viewEcKbKbKbKb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411view_slicesRKNSt11string_viewEcKbKbKbKb\">\n<span id=\"_CPPv311view_slicesRKNSt11string_viewEcKbKbKbKb\"></span><span id=\"_CPPv211view_slicesRKNSt11string_viewEcKbKbKbKb\"></span><span id=\"view_slices__std::string_viewCR.c.bC.bC.bC.bC\"></span><span class=\"target\" id=\"string__utils_8hpp_1afd6f91a3ae88cced15d7f6eed727196b\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">view_slices</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">'\\n'</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Slice a string without passing in result vector (may be less efficient). </p></dd>", "a[href=\"#_CPPv417is_literal_stringRKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417is_literal_stringRKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv317is_literal_stringRKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv217is_literal_stringRKNSt6stringERKNSt6stringE\"></span><span id=\"is_literal_string__ssCR.ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1acc430aeef8f7dd16b35422c2da07203a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_literal_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">quote_marks</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\\\"\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Test if an input string is properly formatted as a literal string. </p></dd>", "a[href=\"#_CPPv417ANSI_DefaultColorv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417ANSI_DefaultColorv\">\n<span id=\"_CPPv317ANSI_DefaultColorv\"></span><span id=\"_CPPv217ANSI_DefaultColorv\"></span><span id=\"ANSI_DefaultColor\"></span><span class=\"target\" id=\"string__utils_8hpp_1af40c7a3b02ea9a1d5270b31aa2d45e76\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_DefaultColor</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0E11from_string1TRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E11from_string1TRKNSt6stringE\">\n<span id=\"_CPPv3I0E11from_stringRKNSt6stringE\"></span><span id=\"_CPPv2I0E11from_stringRKNSt6stringE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1a649cfbfc1adcaba25d1dae8091fccc3c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E11from_string1TRKNSt6stringE\" title=\"from_string::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">from_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function tries to convert a string into any type you\u2019re looking for\u2026 You just need to specify the out type as the template argument. </p></dd>", "a[href=\"#_CPPv410string_popRNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410string_popRNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv310string_popRNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv210string_popRNSt6stringERKNSt6stringE\"></span><span id=\"string_pop__ssR.ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1af6e82bfdf8b0b25dc64408add401e8b5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_pop</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">delim_set</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove a prefix of the input string (up to any of a specified set of delimeters) and return it. If the delimeter is not found, return the entire input string and clear it. </p></dd>", "a[href=\"#_CPPv4I0_6size_tE8ToStringNSt6stringERK5arrayI1T1NE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_6size_tE8ToStringNSt6stringERK5arrayI1T1NE\">\n<span id=\"_CPPv3I0_6size_tE8ToStringRK5arrayI1T1NE\"></span><span id=\"_CPPv2I0_6size_tE8ToStringRK5arrayI1T1NE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">N</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1a693e8822bff4954a36cbb5a11762ff73\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/array.html#_CPPv4I0_6size_tE5array\" title=\"array\"><span class=\"n\"><span class=\"pre\">array</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_6size_tE8ToStringNSt6stringERK5arrayI1T1NE\" title=\"ToString::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_6size_tE8ToStringNSt6stringERK5arrayI1T1NE\" title=\"ToString::N\"><span class=\"n\"><span class=\"pre\">N</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">container</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Setup ToString declarations for built-in types. </p><p>Setup ToString to work on arrays. </p></dd>", "a[href=\"#_CPPv49is_numberRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49is_numberRKNSt6stringE\">\n<span id=\"_CPPv39is_numberRKNSt6stringE\"></span><span id=\"_CPPv29is_numberRKNSt6stringE\"></span><span id=\"is_number__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a6d95cbf36b63ec32b365fa013a497b72\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_number</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Determine if this string represents a proper number. </p></dd>", "a[href=\"#_CPPv416find_quote_matchNSt11string_viewEK6size_tc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416find_quote_matchNSt11string_viewEK6size_tc\">\n<span id=\"_CPPv316find_quote_matchNSt11string_viewEK6size_tc\"></span><span id=\"_CPPv216find_quote_matchNSt11string_viewEK6size_tc\"></span><span id=\"find_quote_match__std::string_view.sC.c\"></span><span class=\"target\" id=\"string__utils_8hpp_1a5b53879e0d77fec5c103117802d077db\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_quote_match</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">mark</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">'\"'</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I_bE10url_encodeNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_bE10url_encodeNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3I_bE10url_encodeRKNSt6stringE\"></span><span id=\"_CPPv2I_bE10url_encodeRKNSt6stringE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">encode_space</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1a88856d273bceed222637887104e5ac13\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">url_encode</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Returns url encoding of value. See <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Percent-encoding\">https://en.wikipedia.org/wiki/Percent-encoding</a></p></dd>", "a[href=\"#_CPPv4IDpE11from_stringvRKNSt6stringEDpR2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IDpE11from_stringvRKNSt6stringEDpR2Ts\">\n<span id=\"_CPPv3IDpE11from_stringRKNSt6stringEDpR2Ts\"></span><span id=\"_CPPv2IDpE11from_stringRKNSt6stringEDpR2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1ad1d8bd9df65e7e5682283d49b5279c67\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">from_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <a class=\"reference internal\" href=\"#_CPPv4IDpE11from_stringvRKNSt6stringEDpR2Ts\" title=\"from_string::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">args</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>The from_string() function can also take multiple args instead of a return. </p></dd>", "a[href=\"#_CPPv4I0E11from_string1TNSt11string_viewE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E11from_string1TNSt11string_viewE\">\n<span id=\"_CPPv3I0E11from_stringNSt11string_viewE\"></span><span id=\"_CPPv2I0E11from_stringNSt11string_viewE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1aba2287e320b29ce1d964d60ba99aa955\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E11from_string1TNSt11string_viewE\" title=\"from_string::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">from_string</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function tries to convert a string_view into any other type\u2026 You must need to specify the out type as the template argument. </p></dd>", "a[href=\"#_CPPv411ANSI_BlueBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411ANSI_BlueBGv\">\n<span id=\"_CPPv311ANSI_BlueBGv\"></span><span id=\"_CPPv211ANSI_BlueBGv\"></span><span id=\"ANSI_BlueBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a3a6312dc4834c03d79cd92aee064ab4c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BlueBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv48to_lowerNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48to_lowerNSt6stringE\">\n<span id=\"_CPPv38to_lowerNSt6stringE\"></span><span id=\"_CPPv28to_lowerNSt6stringE\"></span><span id=\"to_lower__ss\"></span><span class=\"target\" id=\"string__utils_8hpp_1ae3ce7241fa823da77d18a3af87ca7634\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_lower</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Convert a string to all lowercase. </p></dd>", "a[href=\"#_CPPv48to_upperNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48to_upperNSt6stringE\">\n<span id=\"_CPPv38to_upperNSt6stringE\"></span><span id=\"_CPPv28to_upperNSt6stringE\"></span><span id=\"to_upper__ss\"></span><span class=\"target\" id=\"string__utils_8hpp_1a3b9867e1a8a2ecd7b8a04b23f22f9e11\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_upper</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Convert a string to all uppercase. </p></dd>", "a[href=\"#_CPPv410ANSI_Greenv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410ANSI_Greenv\">\n<span id=\"_CPPv310ANSI_Greenv\"></span><span id=\"_CPPv210ANSI_Greenv\"></span><span id=\"ANSI_Green\"></span><span class=\"target\" id=\"string__utils_8hpp_1ad79a5d9b2351f779ae6c3cffba788b90\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Green</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv417to_escaped_stringRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417to_escaped_stringRKNSt6stringE\">\n<span id=\"_CPPv317to_escaped_stringRKNSt6stringE\"></span><span id=\"_CPPv217to_escaped_stringRKNSt6stringE\"></span><span id=\"to_escaped_string__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a3de1eb5199352ba0f566df9ff82438d0\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_escaped_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Convert a full string to one that uses proper escape sequences, as needed. </p></dd>", "a[href=\"#_CPPv416ANSI_BrightWhitev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416ANSI_BrightWhitev\">\n<span id=\"_CPPv316ANSI_BrightWhitev\"></span><span id=\"_CPPv216ANSI_BrightWhitev\"></span><span id=\"ANSI_BrightWhite\"></span><span class=\"target\" id=\"string__utils_8hpp_1a3415f7cea8b6f4e5be465c964f03975c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightWhite</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"#_CPPv412ANSI_Reversev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412ANSI_Reversev\">\n<span id=\"_CPPv312ANSI_Reversev\"></span><span id=\"_CPPv212ANSI_Reversev\"></span><span id=\"ANSI_Reverse\"></span><span class=\"target\" id=\"string__utils_8hpp_1a01ffbfbd45d34ce6b0880e312d5276fb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Reverse</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv417has_nonwhitespaceRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417has_nonwhitespaceRKNSt6stringE\">\n<span id=\"_CPPv317has_nonwhitespaceRKNSt6stringE\"></span><span id=\"_CPPv217has_nonwhitespaceRKNSt6stringE\"></span><span id=\"has_nonwhitespace__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a43ceaa6096a926f6cc505cf2f42f1980\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_nonwhitespace</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv416string_uint_sizeRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416string_uint_sizeRKNSt6stringE\">\n<span id=\"_CPPv316string_uint_sizeRKNSt6stringE\"></span><span id=\"_CPPv216string_uint_sizeRKNSt6stringE\"></span><span id=\"string_uint_size__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a33f55bc6deb6648fdc32353daef13a7a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_uint_size</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv49ANSI_Boldv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49ANSI_Boldv\">\n<span id=\"_CPPv39ANSI_Boldv\"></span><span id=\"_CPPv29ANSI_Boldv\"></span><span id=\"ANSI_Bold\"></span><span class=\"target\" id=\"string__utils_8hpp_1af9d9e1e4430bb3f0701d3f8398607037\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Bold</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv411ANSI_Strikev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411ANSI_Strikev\">\n<span id=\"_CPPv311ANSI_Strikev\"></span><span id=\"_CPPv211ANSI_Strikev\"></span><span id=\"ANSI_Strike\"></span><span class=\"target\" id=\"string__utils_8hpp_1a0fe7300aac6eca9bf445753f85ebbf78\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Strike</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv45countRKNSt6stringEc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv45countRKNSt6stringEc\">\n<span id=\"_CPPv35countRKNSt6stringEc\"></span><span id=\"_CPPv25countRKNSt6stringEc\"></span><span id=\"count__ssCR.c\"></span><span class=\"target\" id=\"string__utils_8hpp_1af203fc6463618270cd821bd9b5173abd\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">count</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">c</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Count the number of times a specific character appears in a string (a clean shortcut to std::count) </p></dd>", "a[href=\"#_CPPv412ANSI_WhiteBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412ANSI_WhiteBGv\">\n<span id=\"_CPPv312ANSI_WhiteBGv\"></span><span id=\"_CPPv212ANSI_WhiteBGv\"></span><span id=\"ANSI_WhiteBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a977dde2f25dd970d79615f264f35134d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_WhiteBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv49ANSI_Bluev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49ANSI_Bluev\">\n<span id=\"_CPPv39ANSI_Bluev\"></span><span id=\"_CPPv29ANSI_Bluev\"></span><span id=\"ANSI_Blue\"></span><span class=\"target\" id=\"string__utils_8hpp_1aa49018705df0a3d271d47fc139887b8c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Blue</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv49has_digitRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49has_digitRKNSt6stringE\">\n<span id=\"_CPPv39has_digitRKNSt6stringE\"></span><span id=\"_CPPv29has_digitRKNSt6stringE\"></span><span id=\"has_digit__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a4f440aed09cf5d50594ba472393ff309\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_digit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv418ANSI_BrightGreenBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv418ANSI_BrightGreenBGv\">\n<span id=\"_CPPv318ANSI_BrightGreenBGv\"></span><span id=\"_CPPv218ANSI_BrightGreenBGv\"></span><span id=\"ANSI_BrightGreenBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a0ce7c680360d57cc242c7ff1e258799d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightGreenBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv416find_paren_matchNSt11string_viewEK6size_tKcKcKb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416find_paren_matchNSt11string_viewEK6size_tKcKcKb\">\n<span id=\"_CPPv316find_paren_matchNSt11string_viewEK6size_tKcKcKb\"></span><span id=\"_CPPv216find_paren_matchNSt11string_viewEK6size_tKcKcKb\"></span><span id=\"find_paren_match__std::string_view.sC.cC.cC.bC\"></span><span class=\"target\" id=\"string__utils_8hpp_1ac8fc33e1befcb5b3cc9533979894d9f6\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_paren_match</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">open</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">'('</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">close</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">')'</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv48is_lowerRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48is_lowerRKNSt6stringE\">\n<span id=\"_CPPv38is_lowerRKNSt6stringE\"></span><span id=\"_CPPv28is_lowerRKNSt6stringE\"></span><span id=\"is_lower__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a8a53f14f5a12a9403d5ebbfc8aad75ff\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_lower</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Determine if there are only lowercase letters in a string. </p></dd>", "a[href=\"#_CPPv416has_alphanumericRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416has_alphanumericRKNSt6stringE\">\n<span id=\"_CPPv316has_alphanumericRKNSt6stringE\"></span><span id=\"_CPPv216has_alphanumericRKNSt6stringE\"></span><span id=\"has_alphanumeric__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a1cf0d5e5ea1e7acea9d73c7a06d5bf71\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_alphanumeric</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv415string_get_lineRKNSt6stringE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415string_get_lineRKNSt6stringE6size_t\">\n<span id=\"_CPPv315string_get_lineRKNSt6stringE6size_t\"></span><span id=\"_CPPv215string_get_lineRKNSt6stringE6size_t\"></span><span id=\"string_get_line__ssCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a20af5646ef70c58bed4dff61319dea79\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_get_line</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return a prefix of a string, up to the first newline (do not modify the original string) </p></dd>", "a[href=\"#_CPPv4I_bE10url_decodeNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_bE10url_decodeNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3I_bE10url_decodeRKNSt6stringE\"></span><span id=\"_CPPv2I_bE10url_decodeRKNSt6stringE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">decode_plus</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1a2dc1252fa9d770cc0940c133636a4d6d\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">url_decode</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Returns url decoding of string. See <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Percent-encoding\">https://en.wikipedia.org/wiki/Percent-encoding</a></p></dd>", "a[href=\"#_CPPv414is_composed_ofRKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414is_composed_ofRKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv314is_composed_ofRKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv214is_composed_ofRKNSt6stringERKNSt6stringE\"></span><span id=\"is_composed_of__ssCR.ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1ad6159c2ce73d59c2700f9059a44d0b79\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_composed_of</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">test_str</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">char_set</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Determine if a string is composed only of a set of characters (represented as a string) </p></dd>", "a[href=\"#_CPPv44findNSt11string_viewENSt6stringE6size_tbbbb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv44findNSt11string_viewENSt6stringE6size_tbbbb\">\n<span id=\"_CPPv34findNSt11string_viewENSt6stringE6size_tbbbb\"></span><span id=\"_CPPv24findNSt11string_viewENSt6stringE6size_tbbbb\"></span><span id=\"find__std::string_view.ss.s.b.b.b.b\"></span><span class=\"target\" id=\"string__utils_8hpp_1acb6363d9f55f6a3568133c642baa7db4\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv417view_string_frontRKNSt11string_viewE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417view_string_frontRKNSt11string_viewE6size_t\">\n<span id=\"_CPPv317view_string_frontRKNSt11string_viewE6size_t\"></span><span id=\"_CPPv217view_string_frontRKNSt11string_viewE6size_t\"></span><span id=\"view_string_front__std::string_viewCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a77d660d5668063e30cb27994518e0dba\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">view_string_front</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">npos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Provide a string_view on a string from the beginning to a given size. </p></dd>", "a[href=\"#_CPPv4I0E12replace_varsNSt6stringERKNSt6stringERK5MAP_T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E12replace_varsNSt6stringERKNSt6stringERK5MAP_T\">\n<span id=\"_CPPv3I0E12replace_varsRKNSt6stringERK5MAP_T\"></span><span id=\"_CPPv2I0E12replace_varsRKNSt6stringERK5MAP_T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MAP_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1ad942a8f902331e44ae3a4d5df4c8334c\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">replace_vars</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E12replace_varsNSt6stringERKNSt6stringERK5MAP_T\" title=\"replace_vars::MAP_T\"><span class=\"n\"><span class=\"pre\">MAP_T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">var_map</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Find any instances of ${X} and replace with dictionary lookup of X. </p></dd>", "a[href=\"#_CPPv412ANSI_Magentav\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412ANSI_Magentav\">\n<span id=\"_CPPv312ANSI_Magentav\"></span><span id=\"_CPPv212ANSI_Magentav\"></span><span id=\"ANSI_Magenta\"></span><span class=\"target\" id=\"string__utils_8hpp_1af86fc3ddb08163d9b759250abf1600ed\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Magenta</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv412ANSI_GreenBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412ANSI_GreenBGv\">\n<span id=\"_CPPv312ANSI_GreenBGv\"></span><span id=\"_CPPv212ANSI_GreenBGv\"></span><span id=\"ANSI_GreenBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a068657bedf0a80c843d4856e6ca95186\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_GreenBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv48pad_backRKNSt6stringEc6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48pad_backRKNSt6stringEc6size_t\">\n<span id=\"_CPPv38pad_backRKNSt6stringEc6size_t\"></span><span id=\"_CPPv28pad_backRKNSt6stringEc6size_t\"></span><span id=\"pad_back__ssCR.c.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a7e40af39c3835a0a89dee8776876923b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pad_back</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_str</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">padding</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv410string_popRNSt6stringEKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410string_popRNSt6stringEKc\">\n<span id=\"_CPPv310string_popRNSt6stringEKc\"></span><span id=\"_CPPv210string_popRNSt6stringEKc\"></span><span id=\"string_pop__ssR.cC\"></span><span class=\"target\" id=\"string__utils_8hpp_1a222eb1f9a8ff8f908943daab816f9a51\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_pop</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">'</span> <span class=\"pre\">'</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove a prefix of the input string (up to a specified delimeter) and return it. If the delimeter is not found, return the entire input string and clear it. </p></dd>", "a[href=\"#_CPPv415trim_whitespaceRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415trim_whitespaceRNSt6stringE\">\n<span id=\"_CPPv315trim_whitespaceRNSt6stringE\"></span><span id=\"_CPPv215trim_whitespaceRNSt6stringE\"></span><span id=\"trim_whitespace__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1aba3b276cf9ef95198bda7008bacea909\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">trim_whitespace</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove whitespace from the beginning or end of a string. </p></dd>", "a[href=\"#_CPPv414view_string_toRKNSt11string_viewEKc6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414view_string_toRKNSt11string_viewEKc6size_t\">\n<span id=\"_CPPv314view_string_toRKNSt11string_viewEKc6size_t\"></span><span id=\"_CPPv214view_string_toRKNSt11string_viewEKc6size_t\"></span><span id=\"view_string_to__std::string_viewCR.cC.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1ac35c762cea45c2403497f1fbf607e52a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">view_string_to</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return a view of the prefix of the input string up to a specified delimeter. If the delimeter is not found, return the entire input string. </p></dd>", "a[href=\"#_CPPv416ANSI_BrightBlackv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416ANSI_BrightBlackv\">\n<span id=\"_CPPv316ANSI_BrightBlackv\"></span><span id=\"_CPPv216ANSI_BrightBlackv\"></span><span id=\"ANSI_BrightBlack\"></span><span class=\"target\" id=\"string__utils_8hpp_1a5d6d50b6e3321f68f81228267da0f471\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightBlack</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv47justifyRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv47justifyRNSt6stringE\">\n<span id=\"_CPPv37justifyRNSt6stringE\"></span><span id=\"_CPPv27justifyRNSt6stringE\"></span><span id=\"justify__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a4bdba6cdd814cc8bfe457d562f212d73\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">justify</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove all whitespace at both the beginning and the end of a string. </p></dd>", "a[href=\"#_CPPv413quote_stringsRK12string_vec_tKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413quote_stringsRK12string_vec_tKNSt6stringE\">\n<span id=\"_CPPv313quote_stringsRK12string_vec_tKNSt6stringE\"></span><span id=\"_CPPv213quote_stringsRK12string_vec_tKNSt6stringE\"></span><span id=\"quote_strings__string_vec_tCR.ssC\"></span><span class=\"target\" id=\"string__utils_8hpp_1a3bccce06ab55a9b8c1e4d58e8f188e5e\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv412string_vec_t\" title=\"string_vec_t\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">quote_strings</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv412string_vec_t\" title=\"string_vec_t\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_strings</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">quote</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"'\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Put all strings provided in quotes (Like \u2018this\u2019), pre- and post-fixing another string if provided. </p></dd>", "a[href=\"#_CPPv414has_whitespaceRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414has_whitespaceRKNSt6stringE\">\n<span id=\"_CPPv314has_whitespaceRKNSt6stringE\"></span><span id=\"_CPPv214has_whitespaceRKNSt6stringE\"></span><span id=\"has_whitespace__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1ad184c672f63dc1b1d7205d73066b71e3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_whitespace</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Determine if there is whitespace anywhere in a string. </p></dd>", "a[href=\"#_CPPv415is_alphanumericRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415is_alphanumericRKNSt6stringE\">\n<span id=\"_CPPv315is_alphanumericRKNSt6stringE\"></span><span id=\"_CPPv215is_alphanumericRKNSt6stringE\"></span><span id=\"is_alphanumeric__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a6d80436cb1f5fe3b7ab26031f3f70b63\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_alphanumeric</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Determine if string is only letters or digits. </p></dd>", "a[href=\"#_CPPv416string_pop_fixedRNSt6stringENSt6size_tE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416string_pop_fixedRNSt6stringENSt6size_tE6size_t\">\n<span id=\"_CPPv316string_pop_fixedRNSt6stringENSt6size_tE6size_t\"></span><span id=\"_CPPv216string_pop_fixedRNSt6stringENSt6size_tE6size_t\"></span><span id=\"string_pop_fixed__ssR.std::s.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1af035d5a6d0c6bdd1836d3b33b5eb2daf\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_pop_fixed</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">end_pos</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">delim_size</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Pop a segment from the beginning of a string as another string, shortening original. </p></dd>", "a[href=\"#_CPPv416has_upper_letterRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416has_upper_letterRKNSt6stringE\">\n<span id=\"_CPPv316has_upper_letterRKNSt6stringE\"></span><span id=\"_CPPv216has_upper_letterRKNSt6stringE\"></span><span id=\"has_upper_letter__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a4f0ab1a9abcfc969bb01c03ff2793fc2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_upper_letter</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv415ANSI_BrightCyanv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415ANSI_BrightCyanv\">\n<span id=\"_CPPv315ANSI_BrightCyanv\"></span><span id=\"_CPPv215ANSI_BrightCyanv\"></span><span id=\"ANSI_BrightCyan\"></span><span class=\"target\" id=\"string__utils_8hpp_1a8e313c73ac03d36902b2103d3210955e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightCyan</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv418ANSI_BrightWhiteBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv418ANSI_BrightWhiteBGv\">\n<span id=\"_CPPv318ANSI_BrightWhiteBGv\"></span><span id=\"_CPPv218ANSI_BrightWhiteBGv\"></span><span id=\"ANSI_BrightWhiteBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a1e42b62b6e3f1713c7857963046ec68a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightWhiteBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0E13replace_macroNSt6stringERKNSt6stringENSt6stringERR5FUN_Tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E13replace_macroNSt6stringERKNSt6stringENSt6stringERR5FUN_Tb\">\n<span id=\"_CPPv3I0E13replace_macroRKNSt6stringENSt6stringERR5FUN_Tb\"></span><span id=\"_CPPv2I0E13replace_macroRKNSt6stringENSt6stringERR5FUN_Tb\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1a53934c1cb6ba662fec6dca3e6a4c86c4\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">replace_macro</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">macro_name</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0E13replace_macroNSt6stringERKNSt6stringENSt6stringERR5FUN_Tb\" title=\"replace_macro::FUN_T\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">fun</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Find any instance of MACRO_NAME(ARGS) and call replace it with fun(ARGS). </p><p>Find any instance of MACRO_NAME(ARGS) and replace it with fun(ARGS).</p></dd>", "a[href=\"#_CPPv413string_get_toRKNSt6stringERKNSt6stringE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413string_get_toRKNSt6stringERKNSt6stringE6size_t\">\n<span id=\"_CPPv313string_get_toRKNSt6stringERKNSt6stringE6size_t\"></span><span id=\"_CPPv213string_get_toRKNSt6stringERKNSt6stringE6size_t\"></span><span id=\"string_get_to__ssCR.ssCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1af8abae7e18a7779524d5305f02b6ae27\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_get_to</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv415combine_stringsRK12string_vec_tNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415combine_stringsRK12string_vec_tNSt6stringE\">\n<span id=\"_CPPv315combine_stringsRK12string_vec_tNSt6stringE\"></span><span id=\"_CPPv215combine_stringsRK12string_vec_tNSt6stringE\"></span><span id=\"combine_strings__string_vec_tCR.ss\"></span><span class=\"target\" id=\"string__utils_8hpp_1a92aca98d188c1b7e358b7f0facb51f27\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">combine_strings</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv412string_vec_t\" title=\"string_vec_t\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">strings</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv48find_allNSt11string_viewEcR6vectorI6size_tEKbbbb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48find_allNSt11string_viewEcR6vectorI6size_tEKbbbb\">\n<span id=\"_CPPv38find_allNSt11string_viewEcR6vectorI6size_tEKbbbb\"></span><span id=\"_CPPv28find_allNSt11string_viewEcR6vectorI6size_tEKbbbb\"></span><span id=\"find_all__std::string_view.c.vector:s:R.bC.b.b.b\"></span><span class=\"target\" id=\"string__utils_8hpp_1ae548133d6858741a2b3917d40af4be0e\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_all</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target</span></span>, <a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">results</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv411ANSI_CyanBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411ANSI_CyanBGv\">\n<span id=\"_CPPv311ANSI_CyanBGv\"></span><span id=\"_CPPv211ANSI_CyanBGv\"></span><span id=\"ANSI_CyanBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1af4d735309e5f09512395ad00bedaee8b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_CyanBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv418string_pop_if_charRNSt6stringEc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv418string_pop_if_charRNSt6stringEc\">\n<span id=\"_CPPv318string_pop_if_charRNSt6stringEc\"></span><span id=\"_CPPv218string_pop_if_charRNSt6stringEc\"></span><span id=\"string_pop_if_char__ssR.c\"></span><span class=\"target\" id=\"string__utils_8hpp_1a3cf6e034905231bdf60269b2933a0fe6\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_pop_if_char</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">c</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv410ANSI_Whitev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410ANSI_Whitev\">\n<span id=\"_CPPv310ANSI_Whitev\"></span><span id=\"_CPPv210ANSI_Whitev\"></span><span id=\"ANSI_White\"></span><span class=\"target\" id=\"string__utils_8hpp_1a52d02fef39d4cbd45c56e974a8bb163c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_White</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv412string_vec_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412string_vec_t\">\n<span id=\"_CPPv312string_vec_t\"></span><span id=\"_CPPv212string_vec_t\"></span><span class=\"target\" id=\"string__utils_8hpp_1aa31dad2dbd415393974e3fc4d9bdbe0d\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv46repeatRKNSt6stringEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46repeatRKNSt6stringEK6size_t\">\n<span id=\"_CPPv36repeatRKNSt6stringEK6size_t\"></span><span id=\"_CPPv26repeatRKNSt6stringEK6size_t\"></span><span id=\"repeat__ssCR.sC\"></span><span class=\"target\" id=\"string__utils_8hpp_1a166d94c566570b4d0e6388a24ec7b32f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">repeat</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">n</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Concatenate n copies of a string. </p></dd>", "a[href=\"#_CPPv415string_get_uintRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415string_get_uintRKNSt6stringE\">\n<span id=\"_CPPv315string_get_uintRKNSt6stringE\"></span><span id=\"_CPPv215string_get_uintRKNSt6stringE\"></span><span id=\"string_get_uint__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1ae182c9713c925582e70951a30a694d59\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">long</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">long</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_get_uint</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv415is_literal_charRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415is_literal_charRKNSt6stringE\">\n<span id=\"_CPPv315is_literal_charRKNSt6stringE\"></span><span id=\"_CPPv215is_literal_charRKNSt6stringE\"></span><span id=\"is_literal_char__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a48480a55538449205618aefdd11521d3\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_literal_char</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Test if an input string is properly formatted as a literal character. </p></dd>", "a[href=\"#_CPPv417to_ansi_underlineRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417to_ansi_underlineRKNSt6stringE\">\n<span id=\"_CPPv317to_ansi_underlineRKNSt6stringE\"></span><span id=\"_CPPv217to_ansi_underlineRKNSt6stringE\"></span><span id=\"to_ansi_underline__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a52845ce43233d8bea92e17621650ad29\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_ansi_underline</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Make a string appear underline when printed to the command line. </p></dd>", "a[href=\"#_CPPv412has_digit_atRKNSt6stringE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412has_digit_atRKNSt6stringE6size_t\">\n<span id=\"_CPPv312has_digit_atRKNSt6stringE6size_t\"></span><span id=\"_CPPv212has_digit_atRKNSt6stringE6size_t\"></span><span id=\"has_digit_at__ssCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1aceecb2e5a1d79fb2643e60eabaaea050\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_digit_at</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0E12from_strings6vectorI1TERK6vectorINSt6stringEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E12from_strings6vectorI1TERK6vectorINSt6stringEE\">\n<span id=\"_CPPv3I0E12from_stringsRK6vectorINSt6stringEE\"></span><span id=\"_CPPv2I0E12from_stringsRK6vectorINSt6stringEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1a1f406c61967a23b53ae0915df1051357\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0E12from_strings6vectorI1TERK6vectorINSt6stringEE\" title=\"from_strings::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">from_strings</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">string_v</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>The from_strings() function takes a vector of strings and converts them into a vector of the appropriate type. </p></dd>", "a[href=\"#_CPPv414to_ansi_italicRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414to_ansi_italicRKNSt6stringE\">\n<span id=\"_CPPv314to_ansi_italicRKNSt6stringE\"></span><span id=\"_CPPv214to_ansi_italicRKNSt6stringE\"></span><span id=\"to_ansi_italic__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1af2df8e5dd2857c56138716a37709410f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_ansi_italic</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Make a string appear italics when printed to the command line. </p></dd>", "a[href=\"#_CPPv423diagnose_literal_stringRKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv423diagnose_literal_stringRKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv323diagnose_literal_stringRKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv223diagnose_literal_stringRKNSt6stringERKNSt6stringE\"></span><span id=\"diagnose_literal_string__ssCR.ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a7d524a848e0eecccc8eb81a6e8939afd\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">diagnose_literal_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">quote_marks</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\\\"\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Test if an input string is properly formatted as a literal string. </p></dd>", "a[href=\"#_CPPv49pad_frontRKNSt6stringEc6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49pad_frontRKNSt6stringEc6size_t\">\n<span id=\"_CPPv39pad_frontRKNSt6stringEc6size_t\"></span><span id=\"_CPPv29pad_frontRKNSt6stringEc6size_t\"></span><span id=\"pad_front__ssCR.c.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a8441c4ed1229efe7e14bee0ed407c2d5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pad_front</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_str</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">padding</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv411ANSI_Italicv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411ANSI_Italicv\">\n<span id=\"_CPPv311ANSI_Italicv\"></span><span id=\"_CPPv211ANSI_Italicv\"></span><span id=\"ANSI_Italic\"></span><span class=\"target\" id=\"string__utils_8hpp_1a19a3aaedbfa1942466500cd7fb7cf2f0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Italic</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv45sliceRKNSt11string_viewEKcK6size_tKbKbKbKb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv45sliceRKNSt11string_viewEKcK6size_tKbKbKbKb\">\n<span id=\"_CPPv35sliceRKNSt11string_viewEKcK6size_tKbKbKbKb\"></span><span id=\"_CPPv25sliceRKNSt11string_viewEKcK6size_tKbKbKbKb\"></span><span id=\"slice__std::string_viewCR.cC.sC.bC.bC.bC.bC\"></span><span class=\"target\" id=\"string__utils_8hpp_1a8e51bae75ea3a5d4b2030f7a5b7f98ce\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">slice</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">'\\n'</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_split</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">numeric_limits</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">max</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"p\"><span class=\"pre\">)</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Slice a string without passing in result vector (may be less efficient). </p></dd>", "a[href=\"#_CPPv412empty_stringv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412empty_stringv\">\n<span id=\"_CPPv312empty_stringv\"></span><span id=\"_CPPv212empty_stringv\"></span><span id=\"empty_string\"></span><span class=\"target\" id=\"string__utils_8hpp_1a34ebe732465ce3d9091e8c57d42d03fb\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">empty_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return a const reference to an empty string. This function is useful to implement other functions that need to return a const reference for efficiency, but also need a null response. </p></dd>", "a[href=\"#_CPPv410string_getRKNSt6stringEKc6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410string_getRKNSt6stringEKc6size_t\">\n<span id=\"_CPPv310string_getRKNSt6stringEKc6size_t\"></span><span id=\"_CPPv210string_getRKNSt6stringEKc6size_t\"></span><span id=\"string_get__ssCR.cC.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a4e43003b34314aaf7eae3d132b91f15c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_get</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">'</span> <span class=\"pre\">'</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return a prefix of the input string (up to a specified delimeter), but do not modify it. If the delimeter is not found, return the entire input string. </p></dd>", "a[href=\"#_CPPv411ANSI_NoBoldv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411ANSI_NoBoldv\">\n<span id=\"_CPPv311ANSI_NoBoldv\"></span><span id=\"_CPPv211ANSI_NoBoldv\"></span><span id=\"ANSI_NoBold\"></span><span class=\"target\" id=\"string__utils_8hpp_1a2b34af9320e81e18c91425985fd58f23\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_NoBold</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv420ANSI_BrightMagentaBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv420ANSI_BrightMagentaBGv\">\n<span id=\"_CPPv320ANSI_BrightMagentaBGv\"></span><span id=\"_CPPv220ANSI_BrightMagentaBGv\"></span><span id=\"ANSI_BrightMagentaBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1ae1d5574751ebe252d107a4dc04c86e95\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightMagentaBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv413ANSI_YellowBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413ANSI_YellowBGv\">\n<span id=\"_CPPv313ANSI_YellowBGv\"></span><span id=\"_CPPv213ANSI_YellowBGv\"></span><span id=\"ANSI_YellowBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a97949542faeb4a6283b5fb1d3de935f0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_YellowBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv49ANSI_Cyanv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49ANSI_Cyanv\">\n<span id=\"_CPPv39ANSI_Cyanv\"></span><span id=\"_CPPv29ANSI_Cyanv\"></span><span id=\"ANSI_Cyan\"></span><span class=\"target\" id=\"string__utils_8hpp_1a2a88c85e9cd08b1c4785b0ef8250206b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Cyan</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv410has_prefixRKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410has_prefixRKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv310has_prefixRKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv210has_prefixRKNSt6stringERKNSt6stringE\"></span><span id=\"has_prefix__ssCR.ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1add139ab93d951b65aeabb5b4356ad97a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_prefix</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">prefix</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Test if a string has a given prefix. </p></dd>", "a[href=\"#_CPPv4IDpE16find_any_of_from6size_tRKNSt6stringE6size_tNSt6stringEDp2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IDpE16find_any_of_from6size_tRKNSt6stringE6size_tNSt6stringEDp2Ts\">\n<span id=\"_CPPv3IDpE16find_any_of_fromRKNSt6stringE6size_tNSt6stringEDp2Ts\"></span><span id=\"_CPPv2IDpE16find_any_of_fromRKNSt6stringE6size_tNSt6stringEDp2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1aab62ec9a8df91d2407fa0cc5482cf13e\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_any_of_from</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">test_str</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">test1</span></span>, <a class=\"reference internal\" href=\"#_CPPv4IDpE16find_any_of_from6size_tRKNSt6stringE6size_tNSt6stringEDp2Ts\" title=\"find_any_of_from::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">tests</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return the first position found for any of a set of substring tests (or std::string::npos if none are found). </p></dd>", "a[href=\"#_CPPv411view_stringRKNSt11string_viewE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411view_stringRKNSt11string_viewE\">\n<span id=\"_CPPv311view_stringRKNSt11string_viewE\"></span><span id=\"_CPPv211view_stringRKNSt11string_viewE\"></span><span id=\"view_string__std::string_viewCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a28f998bd7f573ba690f572cde7d9ce3c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">view_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Provide a string_view on a given string. </p></dd>", "a[href=\"#_CPPv45sliceRKNSt11string_viewER6vectorINSt6stringEEKcK6size_tKbKbKbKb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv45sliceRKNSt11string_viewER6vectorINSt6stringEEKcK6size_tKbKbKbKb\">\n<span id=\"_CPPv35sliceRKNSt11string_viewER6vectorINSt6stringEEKcK6size_tKbKbKbKb\"></span><span id=\"_CPPv25sliceRKNSt11string_viewER6vectorINSt6stringEEKcK6size_tKbKbKbKb\"></span><span id=\"slice__std::string_viewCR.vector:ss:R.cC.sC.bC.bC.bC.bC\"></span><span class=\"target\" id=\"string__utils_8hpp_1aaacf93184acb2faebcbbcc426b5ba596\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">slice</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out_set</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">'\\n'</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_split</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">numeric_limits</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">max</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"p\"><span class=\"pre\">)</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p><p>Cut up a string based on the provided delimiter; fill them in to the provided vector.</p>\n<p>Cut up a string based on the provided delimiter; fill them in to the provided vector.</p>\n</p></dd>", "a[href=\"#_CPPv411view_stringRKNSt11string_viewE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411view_stringRKNSt11string_viewE6size_t\">\n<span id=\"_CPPv311view_stringRKNSt11string_viewE6size_t\"></span><span id=\"_CPPv211view_stringRKNSt11string_viewE6size_t\"></span><span id=\"view_string__std::string_viewCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1af1ea9499868b45ed538384ad61a0b9df\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">view_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Provide a string_view on a string from a given starting point. </p></dd>", "a[href=\"#_CPPv48find_allNSt11string_viewEcbbbb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48find_allNSt11string_viewEcbbbb\">\n<span id=\"_CPPv38find_allNSt11string_viewEcbbbb\"></span><span id=\"_CPPv28find_allNSt11string_viewEcbbbb\"></span><span id=\"find_all__std::string_view.c.b.b.b.b\"></span><span class=\"target\" id=\"string__utils_8hpp_1affd6d794da72d63ea85e056793d567e9\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_all</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">skip_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv414ANSI_SlowBlinkv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414ANSI_SlowBlinkv\">\n<span id=\"_CPPv314ANSI_SlowBlinkv\"></span><span id=\"_CPPv214ANSI_SlowBlinkv\"></span><span id=\"ANSI_SlowBlink\"></span><span class=\"target\" id=\"string__utils_8hpp_1af0831a19417d2b47b0676721921a8dbd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_SlowBlink</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv412slice_assignRKNSt11string_viewEKcNSt6stringEK6size_tKbKbKbKbKb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412slice_assignRKNSt11string_viewEKcNSt6stringEK6size_tKbKbKbKbKb\">\n<span id=\"_CPPv312slice_assignRKNSt11string_viewEKcNSt6stringEK6size_tKbKbKbKbKb\"></span><span id=\"_CPPv212slice_assignRKNSt11string_viewEKcNSt6stringEK6size_tKbKbKbKbKb\"></span><span id=\"slice_assign__std::string_viewCR.cC.ss.sC.bC.bC.bC.bC.bC\"></span><span class=\"target\" id=\"string__utils_8hpp_1aaf9fc40c4d9f5bdca3732cbc70518911\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">map</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">slice_assign</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">','</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">assign_op</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"=\"</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_split</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">numeric_limits</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">max</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"p\"><span class=\"pre\">)</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">trim_whitespace</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Slice a string without passing in result vector (may be less efficient). </p></dd>", "a[href=\"#_CPPv411ANSI_Yellowv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411ANSI_Yellowv\">\n<span id=\"_CPPv311ANSI_Yellowv\"></span><span id=\"_CPPv211ANSI_Yellowv\"></span><span id=\"ANSI_Yellow\"></span><span class=\"target\" id=\"string__utils_8hpp_1a46cc2815442962bbde6a8fb07f394ed4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Yellow</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv410ANSI_RedBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410ANSI_RedBGv\">\n<span id=\"_CPPv310ANSI_RedBGv\"></span><span id=\"_CPPv210ANSI_RedBGv\"></span><span id=\"ANSI_RedBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1ab65b0297bd3d139967d5089a710c7b54\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_RedBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0DpE11find_any_of6size_tRKNSt6stringE1TDp2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE11find_any_of6size_tRKNSt6stringE1TDp2Ts\">\n<span id=\"_CPPv3I0DpE11find_any_ofRKNSt6stringE1TDp2Ts\"></span><span id=\"_CPPv2I0DpE11find_any_ofRKNSt6stringE1TDp2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1a287801400f2ebbebc5e22852d6a5ebf4\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_any_of</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">test_str</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0DpE11find_any_of6size_tRKNSt6stringE1TDp2Ts\" title=\"find_any_of::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">test1</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0DpE11find_any_of6size_tRKNSt6stringE1TDp2Ts\" title=\"find_any_of::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">tests</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv417to_escaped_stringc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417to_escaped_stringc\">\n<span id=\"_CPPv317to_escaped_stringc\"></span><span id=\"_CPPv217to_escaped_stringc\"></span><span id=\"to_escaped_string__c\"></span><span class=\"target\" id=\"string__utils_8hpp_1ab10068cd1c55111995adbef1f7a8df31\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_escaped_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Convert a single character to one that uses a proper escape sequence (in a string) if needed. </p></dd>", "a[href=\"#_CPPv417view_string_rangeRKNSt11string_viewE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417view_string_rangeRKNSt11string_viewE6size_t6size_t\">\n<span id=\"_CPPv317view_string_rangeRKNSt11string_viewE6size_t6size_t\"></span><span id=\"_CPPv217view_string_rangeRKNSt11string_viewE6size_t6size_t\"></span><span id=\"view_string_range__std::string_viewCR.s.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a2fb132fb595bcd7520a4e561e3653515\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">view_string_range</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">end</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Provide a string_view on a string from a starting point to an ending point. </p></dd>", "a[href=\"#_CPPv418remove_punctuationRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv418remove_punctuationRNSt6stringE\">\n<span id=\"_CPPv318remove_punctuationRNSt6stringE\"></span><span id=\"_CPPv218remove_punctuationRNSt6stringE\"></span><span id=\"remove_punctuation__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a1e83f770b61487da2ebc53c20daebe1a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">remove_punctuation</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove all characters from a string except letters, numbers, and whitespace. </p></dd>", "a[href=\"#_CPPv410has_letterRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410has_letterRKNSt6stringE\">\n<span id=\"_CPPv310has_letterRKNSt6stringE\"></span><span id=\"_CPPv210has_letterRKNSt6stringE\"></span><span id=\"has_letter__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a719163a5942df88eba076b198c889185\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_letter</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv411has_char_atRKNSt6stringEc6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411has_char_atRKNSt6stringEc6size_t\">\n<span id=\"_CPPv311has_char_atRKNSt6stringEc6size_t\"></span><span id=\"_CPPv211has_char_atRKNSt6stringEc6size_t\"></span><span id=\"has_char_at__ssCR.c.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a58694ab97dc0b3375bb6571221962457\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_char_at</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">c</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv416ANSI_NoUnderlinev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416ANSI_NoUnderlinev\">\n<span id=\"_CPPv316ANSI_NoUnderlinev\"></span><span id=\"_CPPv216ANSI_NoUnderlinev\"></span><span id=\"ANSI_NoUnderline\"></span><span class=\"target\" id=\"string__utils_8hpp_1a662e48ee8747cc60dcf031fcb2d2d7fb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_NoUnderline</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv415to_english_listRK12string_vec_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415to_english_listRK12string_vec_t\">\n<span id=\"_CPPv315to_english_listRK12string_vec_t\"></span><span id=\"_CPPv215to_english_listRK12string_vec_t\"></span><span id=\"to_english_list__string_vec_tCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1ad52a6e4d34aa05936c1bc75cee1c941a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_english_list</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv412string_vec_t\" title=\"string_vec_t\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">strings</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Convert a vector of strings to an English list, such as \u201cone, two, three, and four.\u201d. </p></dd>", "a[href=\"#_CPPv48ANSI_Redv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48ANSI_Redv\">\n<span id=\"_CPPv38ANSI_Redv\"></span><span id=\"_CPPv28ANSI_Redv\"></span><span id=\"ANSI_Red\"></span><span class=\"target\" id=\"string__utils_8hpp_1a92e19808453e81f031be115a540b4d6f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Red</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0DpE8ToStringNSt6stringERK6vectorI1TDp2TsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE8ToStringNSt6stringERK6vectorI1TDp2TsE\">\n<span id=\"_CPPv3I0DpE8ToStringRK6vectorI1TDp2TsE\"></span><span id=\"_CPPv2I0DpE8ToStringRK6vectorI1TDp2TsE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1ab1ee0cea42cf2293d381d5871d80b2a6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0DpE8ToStringNSt6stringERK6vectorI1TDp2TsE\" title=\"ToString::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE8ToStringNSt6stringERK6vectorI1TDp2TsE\" title=\"ToString::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">container</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Setup ToString to work on vectors. </p></dd>", "a[href=\"#_CPPv412remove_charsRNSt6stringENSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412remove_charsRNSt6stringENSt6stringE\">\n<span id=\"_CPPv312remove_charsRNSt6stringENSt6stringE\"></span><span id=\"_CPPv212remove_charsRNSt6stringENSt6stringE\"></span><span id=\"remove_chars__ssR.ss\"></span><span class=\"target\" id=\"string__utils_8hpp_1a2a126069403553b33eb5d5550bb73052\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">remove_chars</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">chars</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove instances of characters from file. </p></dd>", "a[href=\"../../base/api/array.html#_CPPv4I0_6size_tE5array\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_6size_tE5array\">\n<span id=\"_CPPv3I0_6size_tE5array\"></span><span id=\"_CPPv2I0_6size_tE5array\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_ELEMENTS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"structarray\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">array</span></span></span><br/></dt><dd><p>We are in debug mode, so array has the same interface as std::array, but with extra bounds checking. Using vector as our base since it has the right pieces and is dynamic. </p></dd>", "a[href=\"#_CPPv417ANSI_BrightBlueBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417ANSI_BrightBlueBGv\">\n<span id=\"_CPPv317ANSI_BrightBlueBGv\"></span><span id=\"_CPPv217ANSI_BrightBlueBGv\"></span><span id=\"ANSI_BrightBlueBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1acaac624d401d5c1b9e910ca51b6ceb18\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightBlueBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv415ViewNestedBlockNSt11string_viewEKNSt6stringE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415ViewNestedBlockNSt11string_viewEKNSt6stringE6size_t\">\n<span id=\"_CPPv315ViewNestedBlockNSt11string_viewEKNSt6stringE6size_t\"></span><span id=\"_CPPv215ViewNestedBlockNSt11string_viewEKNSt6stringE6size_t\"></span><span id=\"ViewNestedBlock__std::string_view.ssC.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a755caff84fd0f9c765a9e3a88e74503c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ViewNestedBlock</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">symbols</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"()\"</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>View a section of a string with the properly matching nested blocks. For example if ((abc(de))f(ghi)) would return \u201c(abc(de))f(ghi)\u201d at 0, \u201cde\u201d at 5, or \u201c\u201d at 2 (since there is no start!) </p></dd>", "a[href=\"#_CPPv418ANSI_BrightMagentav\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv418ANSI_BrightMagentav\">\n<span id=\"_CPPv318ANSI_BrightMagentav\"></span><span id=\"_CPPv218ANSI_BrightMagentav\"></span><span id=\"ANSI_BrightMagenta\"></span><span class=\"target\" id=\"string__utils_8hpp_1af72fe9bb2077e1765ad3acd43b022b20\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightMagenta</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv413is_identifierRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413is_identifierRKNSt6stringE\">\n<span id=\"_CPPv313is_identifierRKNSt6stringE\"></span><span id=\"_CPPv213is_identifierRKNSt6stringE\"></span><span id=\"is_identifier__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1aec9482171608dfae0fee9cf50f77e575\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_identifier</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Determine if string is only letters, digits, or underscore (\u2018_\u2019). </p></dd>", "a[href=\"#_CPPv419find_non_whitespaceNSt11string_viewE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv419find_non_whitespaceNSt11string_viewE6size_t\">\n<span id=\"_CPPv319find_non_whitespaceNSt11string_viewE6size_t\"></span><span id=\"_CPPv219find_non_whitespaceNSt11string_viewE6size_t\"></span><span id=\"find_non_whitespace__std::string_view.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a8e0d3a6c0184111104f2a0f2022e890d\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_non_whitespace</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE6vector\">\n<span id=\"_CPPv3I0DpE6vector\"></span><span id=\"_CPPv2I0DpE6vector\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classvector\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">vector</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>Build a debug wrapper vector around std::vector. </p></dd>", "a[href=\"#_CPPv411view_stringRKNSt11string_viewE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411view_stringRKNSt11string_viewE6size_t6size_t\">\n<span id=\"_CPPv311view_stringRKNSt11string_viewE6size_t6size_t\"></span><span id=\"_CPPv211view_stringRKNSt11string_viewE6size_t6size_t\"></span><span id=\"view_string__std::string_viewCR.s.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1af2206c2f306f90fee9a9c33be5732aee\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">view_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">npos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Provide a string_view on a string from a starting point with a given size. </p></dd>", "a[href=\"#_CPPv412to_ansi_boldRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412to_ansi_boldRKNSt6stringE\">\n<span id=\"_CPPv312to_ansi_boldRKNSt6stringE\"></span><span id=\"_CPPv212to_ansi_boldRKNSt6stringE\"></span><span id=\"to_ansi_bold__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a817b97a135f9e167d1f1f54a06586b14\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_ansi_bold</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Make a string appear bold when printed to the command line. </p></dd>", "a[href=\"#_CPPv415string_get_wordRKNSt6stringE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415string_get_wordRKNSt6stringE6size_t\">\n<span id=\"_CPPv315string_get_wordRKNSt6stringE6size_t\"></span><span id=\"_CPPv215string_get_wordRKNSt6stringE6size_t\"></span><span id=\"string_get_word__ssCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a803d30d5374fbbbc46620d0a688fad9c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_get_word</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return a prefix of a string, up to the first whitespace (do not modify the original string) </p></dd>", "a[href=\"#_CPPv418ANSI_BrightBlackBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv418ANSI_BrightBlackBGv\">\n<span id=\"_CPPv318ANSI_BrightBlackBGv\"></span><span id=\"_CPPv218ANSI_BrightBlackBGv\"></span><span id=\"ANSI_BrightBlackBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1aaebcc1ec6c619a1b93d0143efceca224\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightBlackBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv419ANSI_BrightYellowBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv419ANSI_BrightYellowBGv\">\n<span id=\"_CPPv319ANSI_BrightYellowBGv\"></span><span id=\"_CPPv219ANSI_BrightYellowBGv\"></span><span id=\"ANSI_BrightYellowBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a951d445a460ccc354fc2db02a56e14cb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightYellowBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#string-utils-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">string_utils.hpp<a class=\"headerlink\" href=\"#string-utils-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Simple functions to manipulate strings. Status: RELEASE. </p>", "a[href=\"../../meta/api/type_traits.html#_CPPv4I0E10IsIterable\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E10IsIterable\">\n<span id=\"_CPPv3I0E10IsIterable\"></span><span id=\"_CPPv2I0E10IsIterable\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"type__traits_8hpp_1acca287657cd12bb2ff2bfe5b376d972a\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsIterable</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">decltype</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"n\"><span class=\"pre\">detail</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">is_iterable_impl</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0E10IsIterable\" title=\"IsIterable::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd><p>Determine if a type is iterable. </p></dd>", "a[href=\"#_CPPv4IDpE8is_validbRKNSt6stringEDp4FUNS\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IDpE8is_validbRKNSt6stringEDp4FUNS\">\n<span id=\"_CPPv3IDpE8is_validRKNSt6stringEDp4FUNS\"></span><span id=\"_CPPv2IDpE8is_validRKNSt6stringEDp4FUNS\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUNS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1a5402f8047183572d876dd5481f0fb47b\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_valid</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <a class=\"reference internal\" href=\"#_CPPv4IDpE8is_validbRKNSt6stringEDp4FUNS\" title=\"is_valid::FUNS\"><span class=\"n\"><span class=\"pre\">FUNS</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">funs</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>For a string to be valid, each character must pass at least one provided function. </p></dd>", "a[href=\"#_CPPv410ANSI_Blackv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410ANSI_Blackv\">\n<span id=\"_CPPv310ANSI_Blackv\"></span><span id=\"_CPPv210ANSI_Blackv\"></span><span id=\"ANSI_Black\"></span><span class=\"target\" id=\"string__utils_8hpp_1a8bbe52efe7d83a530eed22dd7a0549cf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Black</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv413has_one_of_atRKNSt6stringERKNSt6stringE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413has_one_of_atRKNSt6stringERKNSt6stringE6size_t\">\n<span id=\"_CPPv313has_one_of_atRKNSt6stringERKNSt6stringE6size_t\"></span><span id=\"_CPPv213has_one_of_atRKNSt6stringERKNSt6stringE6size_t\"></span><span id=\"has_one_of_at__ssCR.ssCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1ad2343f0e35c61522a7f99b660b6ec42c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">has_one_of_at</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">opts</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv417ANSI_BrightCyanBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417ANSI_BrightCyanBGv\">\n<span id=\"_CPPv317ANSI_BrightCyanBGv\"></span><span id=\"_CPPv217ANSI_BrightCyanBGv\"></span><span id=\"ANSI_BrightCyanBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1a2df182231fc7f49a53a7117242cd9c28\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightCyanBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv413ANSI_NoItalicv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413ANSI_NoItalicv\">\n<span id=\"_CPPv313ANSI_NoItalicv\"></span><span id=\"_CPPv213ANSI_NoItalicv\"></span><span id=\"ANSI_NoItalic\"></span><span class=\"target\" id=\"string__utils_8hpp_1a1e8a7e36cd73b9279f896ab0564f68ae\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_NoItalic</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv48next_posNSt11string_viewE6size_tbbbb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48next_posNSt11string_viewE6size_tbbbb\">\n<span id=\"_CPPv38next_posNSt11string_viewE6size_tbbbb\"></span><span id=\"_CPPv28next_posNSt11string_viewE6size_tbbbb\"></span><span id=\"next_pos__std::string_view.s.b.b.b.b\"></span><span class=\"target\" id=\"string__utils_8hpp_1af0e5b327695f70acd4bd45ce8b70606c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">next_pos</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Advance a position in a string, respecting quotes, parens, braces, and brackets as indicated </p></dd>", "a[href=\"#_CPPv415ANSI_BrightBluev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415ANSI_BrightBluev\">\n<span id=\"_CPPv315ANSI_BrightBluev\"></span><span id=\"_CPPv215ANSI_BrightBluev\"></span><span id=\"ANSI_BrightBlue\"></span><span class=\"target\" id=\"string__utils_8hpp_1a7e7c622a4c50b43a3934b6ce0203e50d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightBlue</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv47slugifyRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv47slugifyRKNSt6stringE\">\n<span id=\"_CPPv37slugifyRKNSt6stringE\"></span><span id=\"_CPPv27slugifyRKNSt6stringE\"></span><span id=\"slugify__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1aaa55580aeac58387c707611da1198c72\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">slugify</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Make a string safe(r) </p></dd>", "a[href=\"#_CPPv416string_get_rangeRKNSt6stringENSt6size_tENSt6size_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416string_get_rangeRKNSt6stringENSt6size_tENSt6size_tE\">\n<span id=\"_CPPv316string_get_rangeRKNSt6stringENSt6size_tENSt6size_tE\"></span><span id=\"_CPPv216string_get_rangeRKNSt6stringENSt6size_tENSt6size_tE\"></span><span id=\"string_get_range__ssCR.std::s.std::s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a0456fe23dd1dd56f06cccd39f4a54374\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_get_range</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">end_pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Get a segment from the beginning of a string as another string, leaving original untouched. </p></dd>", "a[href=\"#_CPPv48is_upperRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48is_upperRKNSt6stringE\">\n<span id=\"_CPPv38is_upperRKNSt6stringE\"></span><span id=\"_CPPv28is_upperRKNSt6stringE\"></span><span id=\"is_upper__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a48da0c785dc46449e722a820616c6d4a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_upper</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Determine if there are only uppercase letters in a string. </p></dd>", "a[href=\"#_CPPv410ANSI_Resetv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410ANSI_Resetv\">\n<span id=\"_CPPv310ANSI_Resetv\"></span><span id=\"_CPPv210ANSI_Resetv\"></span><span id=\"ANSI_Reset\"></span><span class=\"target\" id=\"string__utils_8hpp_1ab07e98c587ab424898ba1734afd77aa8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv414ANSI_MagentaBGv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414ANSI_MagentaBGv\">\n<span id=\"_CPPv314ANSI_MagentaBGv\"></span><span id=\"_CPPv214ANSI_MagentaBGv\"></span><span id=\"ANSI_MagentaBG\"></span><span class=\"target\" id=\"string__utils_8hpp_1af104d91d678366dcb6a1ea25f554f1c9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_MagentaBG</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv411view_slicesRKNSt11string_viewER6vectorINSt11string_viewEEcKbKbKbKb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411view_slicesRKNSt11string_viewER6vectorINSt11string_viewEEcKbKbKbKb\">\n<span id=\"_CPPv311view_slicesRKNSt11string_viewER6vectorINSt11string_viewEEcKbKbKbKb\"></span><span id=\"_CPPv211view_slicesRKNSt11string_viewER6vectorINSt11string_viewEEcKbKbKbKb\"></span><span id=\"view_slices__std::string_viewCR.vector:std::string_view:R.c.bC.bC.bC.bC\"></span><span class=\"target\" id=\"string__utils_8hpp_1a0ebbb72b0798f09eee7205f10ab6a071\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">view_slices</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string_view</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out_set</span></span>, <span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">delim</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"sc\"><span class=\"pre\">'\\n'</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_quotes</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_parens</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_braces</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">keep_brackets</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Create a set of string_views based on the provided delimiter; fill them in to the provided vector. </p></dd>", "a[href=\"#_CPPv415to_ansi_reverseRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415to_ansi_reverseRKNSt6stringE\">\n<span id=\"_CPPv315to_ansi_reverseRKNSt6stringE\"></span><span id=\"_CPPv215to_ansi_reverseRKNSt6stringE\"></span><span id=\"to_ansi_reverse__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1ae6ed51ff45e0bc5a7a791c0363173a97\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_ansi_reverse</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Make a string appear reverse when printed to the command line. </p></dd>", "a[href=\"#_CPPv412ANSI_NoBlinkv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412ANSI_NoBlinkv\">\n<span id=\"_CPPv312ANSI_NoBlinkv\"></span><span id=\"_CPPv212ANSI_NoBlinkv\"></span><span id=\"ANSI_NoBlink\"></span><span class=\"target\" id=\"string__utils_8hpp_1a2fad478931fffd39b031478a18e93fa9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_NoBlink</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0E10to_literalNSt9enable_ifIXntN10IsIterableI1TE5valueEENSt6stringEE4typeERK1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E10to_literalNSt9enable_ifIXntN10IsIterableI1TE5valueEENSt6stringEE4typeERK1T\">\n<span id=\"_CPPv3I0E10to_literalRK1T\"></span><span id=\"_CPPv2I0E10to_literalRK1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1afe3426b3e4493589e86f8de519bf1197\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">enable_if</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"o\"><span class=\"pre\">!</span></span><a class=\"reference internal\" href=\"../../meta/api/type_traits.html#_CPPv4I0E10IsIterable\" title=\"IsIterable\"><span class=\"n\"><span class=\"pre\">IsIterable</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0E10to_literalNSt9enable_ifIXntN10IsIterableI1TE5valueEENSt6stringEE4typeERK1T\" title=\"to_literal::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">type</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_literal</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E10to_literalNSt9enable_ifIXntN10IsIterableI1TE5valueEENSt6stringEE4typeERK1T\" title=\"to_literal::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Take a value and convert it to a C++-style literal. </p></dd>", "a[href=\"#_CPPv419compress_whitespaceRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv419compress_whitespaceRNSt6stringE\">\n<span id=\"_CPPv319compress_whitespaceRNSt6stringE\"></span><span id=\"_CPPv219compress_whitespaceRNSt6stringE\"></span><span id=\"compress_whitespace__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a58a16ce235b38d8251f3cf85050e2979\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">compress_whitespace</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Every time one or more whitespace characters appear replace them with a single space. </p></dd>", "a[href=\"#_CPPv49is_digitsRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49is_digitsRKNSt6stringE\">\n<span id=\"_CPPv39is_digitsRKNSt6stringE\"></span><span id=\"_CPPv29is_digitsRKNSt6stringE\"></span><span id=\"is_digits__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a6c175a1424e435dba38c472eaf2f5535\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_digits</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Determine if there are only digits in a string. </p></dd>", "a[href=\"#_CPPv416ANSI_BrightGreenv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416ANSI_BrightGreenv\">\n<span id=\"_CPPv316ANSI_BrightGreenv\"></span><span id=\"_CPPv216ANSI_BrightGreenv\"></span><span id=\"ANSI_BrightGreen\"></span><span class=\"target\" id=\"string__utils_8hpp_1abe4e3d0fce7e2b434d1453bc77db78fb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_BrightGreen</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv416to_roman_numeraliRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416to_roman_numeraliRKNSt6stringE\">\n<span id=\"_CPPv316to_roman_numeraliRKNSt6stringE\"></span><span id=\"_CPPv216to_roman_numeraliRKNSt6stringE\"></span><span id=\"to_roman_numeral__i.ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1ac57ba7e09357db7bcfb2277000aa7ba2\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_roman_numeral</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">prefix</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Convert an integer to a roman numeral string. </p></dd>", "a[href=\"#_CPPv413is_whitespaceRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413is_whitespaceRKNSt6stringE\">\n<span id=\"_CPPv313is_whitespaceRKNSt6stringE\"></span><span id=\"_CPPv213is_whitespaceRKNSt6stringE\"></span><span id=\"is_whitespace__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a373a32da6b13ed1bd285ae380980d472\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">is_whitespace</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">str</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv414ANSI_NoReversev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414ANSI_NoReversev\">\n<span id=\"_CPPv314ANSI_NoReversev\"></span><span id=\"_CPPv214ANSI_NoReversev\"></span><span id=\"ANSI_NoReverse\"></span><span class=\"target\" id=\"string__utils_8hpp_1a20d9f0c90fff7a4f18aa96b19f0c7da0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_NoReverse</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0E4joinNSt6stringERK11CONTAINER_TNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E4joinNSt6stringERK11CONTAINER_TNSt6stringE\">\n<span id=\"_CPPv3I0E4joinRK11CONTAINER_TNSt6stringE\"></span><span id=\"_CPPv2I0E4joinRK11CONTAINER_TNSt6stringE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CONTAINER_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"string__utils_8hpp_1ab6bb5ba2c814ff57bb81be1f00b8a2e9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">join</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E4joinNSt6stringERK11CONTAINER_TNSt6stringE\" title=\"join::CONTAINER_T\"><span class=\"n\"><span class=\"pre\">CONTAINER_T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">container</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">join_str</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>This function returns values from a container as a single string separated by a given delimeter. </p></dd>", "a[href=\"#_CPPv417transform_stringsRK12string_vec_tNSt8functionIFNSt6stringERKNSt6stringEEEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417transform_stringsRK12string_vec_tNSt8functionIFNSt6stringERKNSt6stringEEEE\">\n<span id=\"_CPPv317transform_stringsRK12string_vec_tNSt8functionIFNSt6stringERKNSt6stringEEEE\"></span><span id=\"_CPPv217transform_stringsRK12string_vec_tNSt8functionIFNSt6stringERKNSt6stringEEEE\"></span><span class=\"target\" id=\"string__utils_8hpp_1a4a44fa18e37534c15a77e38c1abe7795\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv412string_vec_t\" title=\"string_vec_t\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">transform_strings</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv412string_vec_t\" title=\"string_vec_t\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_strings</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">function</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">fun</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Transform all strings in a vector. </p></dd>", "a[href=\"#_CPPv417remove_whitespaceRNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417remove_whitespaceRNSt6stringE\">\n<span id=\"_CPPv317remove_whitespaceRNSt6stringE\"></span><span id=\"_CPPv217remove_whitespaceRNSt6stringE\"></span><span id=\"remove_whitespace__ssR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a5fddb2204de19248d846e2c84018a375\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">remove_whitespace</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Remove all whitespace from anywhere within a string. </p></dd>", "a[href=\"#_CPPv410ANSI_Blinkv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410ANSI_Blinkv\">\n<span id=\"_CPPv310ANSI_Blinkv\"></span><span id=\"_CPPv210ANSI_Blinkv\"></span><span id=\"ANSI_Blink\"></span><span class=\"target\" id=\"string__utils_8hpp_1a4eed1ea066b8efa4b7e86b92cb828457\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ANSI_Blink</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv417from_literal_charRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417from_literal_charRKNSt6stringE\">\n<span id=\"_CPPv317from_literal_charRKNSt6stringE\"></span><span id=\"_CPPv217from_literal_charRKNSt6stringE\"></span><span id=\"from_literal_char__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a99f2bd459f9becd21e03ea9fc50ff056\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">from_literal_char</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p><p>Convert a literal character representation to an actual string. (i.e., \u2018A\u2019, \u2018;\u2019, or \u2018</p>\n<p>\u2019)</p>\n</p></dd>", "a[href=\"#_CPPv410to_literalc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410to_literalc\">\n<span id=\"_CPPv310to_literalc\"></span><span id=\"_CPPv210to_literalc\"></span><span id=\"to_literal__c\"></span><span class=\"target\" id=\"string__utils_8hpp_1a710b7e5a33e63ec4e88f62b2f6d50e70\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_literal</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Take a char and convert it to a C++-style literal. </p></dd>", "a[href=\"#_CPPv49to_stringRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49to_stringRKNSt6stringE\">\n<span id=\"_CPPv39to_stringRKNSt6stringE\"></span><span id=\"_CPPv29to_stringRKNSt6stringE\"></span><span id=\"to_string__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1aaee4e81a9c4ee8803d73869debd67189\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Overload of to_string() string arguments to be directly returned. </p></dd>", "a[href=\"#_CPPv414to_quoted_listRK12string_vec_tKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414to_quoted_listRK12string_vec_tKNSt6stringE\">\n<span id=\"_CPPv314to_quoted_listRK12string_vec_tKNSt6stringE\"></span><span id=\"_CPPv214to_quoted_listRK12string_vec_tKNSt6stringE\"></span><span id=\"to_quoted_list__string_vec_tCR.ssC\"></span><span class=\"target\" id=\"string__utils_8hpp_1a4bb8ff513ee7a292f091bbeae9b44871\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_quoted_list</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv412string_vec_t\" title=\"string_vec_t\"><span class=\"n\"><span class=\"pre\">string_vec_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_strings</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">quote</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"'\"</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Take a vector of strings, put them in quotes, and then transform it into an English list. </p></dd>", "a[href=\"#_CPPv418to_web_safe_stringRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv418to_web_safe_stringRKNSt6stringE\">\n<span id=\"_CPPv318to_web_safe_stringRKNSt6stringE\"></span><span id=\"_CPPv218to_web_safe_stringRKNSt6stringE\"></span><span id=\"to_web_safe_string__ssCR\"></span><span class=\"target\" id=\"string__utils_8hpp_1a67c7e0d1bc0e87897a1f4fb6333ca538\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_web_safe_string</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Take a string and replace reserved HTML characters with character entities. </p></dd>", "a[href=\"#_CPPv410string_getRKNSt6stringERKNSt6stringE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv410string_getRKNSt6stringERKNSt6stringE6size_t\">\n<span id=\"_CPPv310string_getRKNSt6stringERKNSt6stringE6size_t\"></span><span id=\"_CPPv210string_getRKNSt6stringERKNSt6stringE6size_t\"></span><span id=\"string_get__ssCR.ssCR.s\"></span><span class=\"target\" id=\"string__utils_8hpp_1a8e4ea9e4a173369624809c9cce09f139\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">string_get</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_string</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">delim_set</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return a prefix of the input string (up to any of a specified set of delimeters), but do not modify it. If the delimeter is not found, return the entire input string. </p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
