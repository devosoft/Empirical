selector_to_html = {"a[href=\"#_CPPv4I0EN11MemoryImage7CopyObjEv6size_tRK11MemoryImage\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN11MemoryImage7CopyObjEv6size_tRK11MemoryImage\">\n<span id=\"_CPPv3I0EN11MemoryImage7CopyObjE6size_tRK11MemoryImage\"></span><span id=\"_CPPv2I0EN11MemoryImage7CopyObjE6size_tRK11MemoryImage\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1ae577b0c0369a89366b3e68faab8e07ea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CopyObj</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv411MemoryImage\" title=\"MemoryImage\"><span class=\"n\"><span class=\"pre\">MemoryImage</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">from_image</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Copy an object from another MemoryImage with an identical DataLayout. </p></dd>", "a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"#_CPPv4N11MemoryImage9RawResizeE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImage9RawResizeE6size_t\">\n<span id=\"_CPPv3N11MemoryImage9RawResizeE6size_t\"></span><span id=\"_CPPv2N11MemoryImage9RawResizeE6size_t\"></span><span id=\"MemoryImage::RawResize__s\"></span><span class=\"target\" id=\"classMemoryImage_1a5ffc520d5840b130687f228419819ed0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawResize</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">new_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Change the size of this memory. Assume all cleanup and setup is done elsewhere. </p></dd>", "a[href=\"#_CPPv4NK11MemoryImage11GetInitSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11MemoryImage11GetInitSizeEv\">\n<span id=\"_CPPv3NK11MemoryImage11GetInitSizeEv\"></span><span id=\"_CPPv2NK11MemoryImage11GetInitSizeEv\"></span><span id=\"MemoryImage::GetInitSizeC\"></span><span class=\"target\" id=\"classMemoryImage_1a9517a6e8a8ecd946df97d7faa674d5ee\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetInitSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0EN11MemoryImage3GetENSt4spanI1TEE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN11MemoryImage3GetENSt4spanI1TEE6size_t6size_t\">\n<span id=\"_CPPv3I0EN11MemoryImage3GetE6size_t6size_t\"></span><span id=\"_CPPv2I0EN11MemoryImage3GetE6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1a9335806e5e4102e786404104f17fec26\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">span</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0EN11MemoryImage3GetENSt4spanI1TEE6size_t6size_t\" title=\"MemoryImage::Get::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">count</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Get proper spans to sets of same-type objects represented in this image. </p></dd>", "a[href=\"#_CPPv4N11MemoryImage11MemoryImageE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImage11MemoryImageE6size_t\">\n<span id=\"_CPPv3N11MemoryImage11MemoryImageE6size_t\"></span><span id=\"_CPPv2N11MemoryImage11MemoryImageE6size_t\"></span><span id=\"MemoryImage::MemoryImage__s\"></span><span class=\"target\" id=\"classMemoryImage_1a15df4471fb3fbcbec38f2f4811c4925f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MemoryImage</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Build a memory image of a specific size (but uninitialized.) </p></dd>", "a[href=\"#_CPPv4N11MemoryImage4sizeE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImage4sizeE\">\n<span id=\"_CPPv3N11MemoryImage4sizeE\"></span><span id=\"_CPPv2N11MemoryImage4sizeE\"></span><span id=\"MemoryImage::size__s\"></span><span class=\"target\" id=\"classMemoryImage_1a2356896c60f03625ef85fa0e6140ed6f\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">size</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><br/></dt><dd><p>Size of current image. </p></dd>", "a[href=\"#_CPPv4I0ENK11MemoryImage6GetPtrE3PtrIK1TE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK11MemoryImage6GetPtrE3PtrIK1TE6size_t\">\n<span id=\"_CPPv3I0ENK11MemoryImage6GetPtrE6size_t\"></span><span id=\"_CPPv2I0ENK11MemoryImage6GetPtrE6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1aba41dc33ce6df403e5b82ce2ec3f4c57\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0ENK11MemoryImage6GetPtrE3PtrIK1TE6size_t\" title=\"MemoryImage::GetPtr::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetPtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0ENK11MemoryImage3GetERK1T6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK11MemoryImage3GetERK1T6size_t\">\n<span id=\"_CPPv3I0ENK11MemoryImage3GetE6size_t\"></span><span id=\"_CPPv2I0ENK11MemoryImage3GetE6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1a8d39a099276df9e636c507e04edb6c7e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0ENK11MemoryImage3GetERK1T6size_t\" title=\"MemoryImage::Get::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N11MemoryImage7RawMoveER11MemoryImage\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImage7RawMoveER11MemoryImage\">\n<span id=\"_CPPv3N11MemoryImage7RawMoveER11MemoryImage\"></span><span id=\"_CPPv2N11MemoryImage7RawMoveER11MemoryImage\"></span><span id=\"MemoryImage::RawMove__MemoryImageR\"></span><span class=\"target\" id=\"classMemoryImage_1ad7098bfb00c2c3a9d99d5a42a95e4b23\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawMove</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv411MemoryImage\" title=\"MemoryImage\"><span class=\"n\"><span class=\"pre\">MemoryImage</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">from_memory</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Steal the memory from the image passed in. Current memory should have been cleaned up and set to null already. </p></dd>", "a[href=\"#_CPPv4I0EN11MemoryImage6GetPtrE3PtrI1TE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN11MemoryImage6GetPtrE3PtrI1TE6size_t\">\n<span id=\"_CPPv3I0EN11MemoryImage6GetPtrE6size_t\"></span><span id=\"_CPPv2I0EN11MemoryImage6GetPtrE6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1a315ba9b1feb870449654184e870b84b8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0EN11MemoryImage6GetPtrE3PtrI1TE6size_t\" title=\"MemoryImage::GetPtr::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetPtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Get a typed pointer to a specific position in this image. </p></dd>", "a[href=\"#_CPPv4N11MemoryImage7init_toE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImage7init_toE\">\n<span id=\"_CPPv3N11MemoryImage7init_toE\"></span><span id=\"_CPPv2N11MemoryImage7init_toE\"></span><span id=\"MemoryImage::init_to__s\"></span><span class=\"target\" id=\"classMemoryImage_1a97f37e23111beb21573433de25b88a93\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">init_to</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><br/></dt><dd><p>How far of the current image is initialized? </p></dd>", "a[href=\"#_CPPv4N11MemoryImageD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImageD0Ev\">\n<span id=\"_CPPv3N11MemoryImageD0Ev\"></span><span id=\"_CPPv2N11MemoryImageD0Ev\"></span><span id=\"MemoryImage::~MemoryImage\"></span><span class=\"target\" id=\"classMemoryImage_1a1afc2ae420afe871153fb5bbb51c054a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~MemoryImage</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Destruct a MemoryImage. </p></dd>", "a[href=\"#_CPPv4NK11MemoryImage7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK11MemoryImage7GetSizeEv\">\n<span id=\"_CPPv3NK11MemoryImage7GetSizeEv\"></span><span id=\"_CPPv2NK11MemoryImage7GetSizeEv\"></span><span id=\"MemoryImage::GetSizeC\"></span><span class=\"target\" id=\"classMemoryImage_1a3065d3688e8ed7b71fe31e3b911aa2a1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0ENK11MemoryImage3GetENSt4spanIK1TEE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK11MemoryImage3GetENSt4spanIK1TEE6size_t6size_t\">\n<span id=\"_CPPv3I0ENK11MemoryImage3GetE6size_t6size_t\"></span><span id=\"_CPPv2I0ENK11MemoryImage3GetE6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1a9f33c0e534adbef75ce19f89870e61a5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">span</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0ENK11MemoryImage3GetENSt4spanIK1TEE6size_t6size_t\" title=\"MemoryImage::Get::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">count</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0EN11MemoryImage3GetER1T6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN11MemoryImage3GetER1T6size_t\">\n<span id=\"_CPPv3I0EN11MemoryImage3GetE6size_t\"></span><span id=\"_CPPv2I0EN11MemoryImage3GetE6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1ad111419641ede1c85c9d80dfb98ca794\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0EN11MemoryImage3GetER1T6size_t\" title=\"MemoryImage::Get::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Get proper references to an object represented in this image. </p></dd>", "a[href=\"#_CPPv4N11MemoryImage7RawCopyERK11MemoryImage\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImage7RawCopyERK11MemoryImage\">\n<span id=\"_CPPv3N11MemoryImage7RawCopyERK11MemoryImage\"></span><span id=\"_CPPv2N11MemoryImage7RawCopyERK11MemoryImage\"></span><span id=\"MemoryImage::RawCopy__MemoryImageCR\"></span><span class=\"target\" id=\"classMemoryImage_1a6604aca9066f8218dff37f0d4f74656e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawCopy</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv411MemoryImage\" title=\"MemoryImage\"><span class=\"n\"><span class=\"pre\">MemoryImage</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">from_memory</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Copy all of the bytes directly from another memory image. Size manipulation must be done beforehand to ensure sufficient space is available. </p></dd>", "a[href=\"#_CPPv4I0EN11MemoryImage8DestructEv6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN11MemoryImage8DestructEv6size_t\">\n<span id=\"_CPPv3I0EN11MemoryImage8DestructE6size_t\"></span><span id=\"_CPPv2I0EN11MemoryImage8DestructE6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1ae5e6b948e0022268d2b77ed9bbe17928\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Destruct</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Destruct an object of provided type at memory position indicated; don\u2019t release memory! </p></dd>", "a[href=\"#_CPPv4N11MemoryImage11MemoryImageEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImage11MemoryImageEv\">\n<span id=\"_CPPv3N11MemoryImage11MemoryImageEv\"></span><span id=\"_CPPv2N11MemoryImage11MemoryImageEv\"></span><span id=\"MemoryImage::MemoryImage\"></span><span class=\"target\" id=\"classMemoryImage_1adec00d99a200ff5926a90f0b8b6a5d43\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MemoryImage</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd><p>Build a default MemoryImage with no initial memory. </p></dd>", "a[href=\"#_CPPv4N11MemoryImage5imageE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImage5imageE\">\n<span id=\"_CPPv3N11MemoryImage5imageE\"></span><span id=\"_CPPv2N11MemoryImage5imageE\"></span><span id=\"MemoryImage::image__Ptr:std::byte:\"></span><span class=\"target\" id=\"classMemoryImage_1abbccee9665add59dae11d391981eee75\"></span><a class=\"reference internal\" href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">image</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">nullptr</span></span><br/></dt><dd><p>Current memory image. </p></dd>", "a[href=\"#_CPPv411MemoryImage\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411MemoryImage\">\n<span id=\"_CPPv311MemoryImage\"></span><span id=\"_CPPv211MemoryImage\"></span><span id=\"MemoryImage\"></span><span class=\"target\" id=\"classMemoryImage\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MemoryImage</span></span></span><br/></dt><dd><p>A helper class for DataMap; tracks a memory image (sequence of bytes). </p></dd>", "a[href=\"#_CPPv4I0DpEN11MemoryImage9ConstructEv6size_tDpRR4ARGS\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpEN11MemoryImage9ConstructEv6size_tDpRR4ARGS\">\n<span id=\"_CPPv3I0DpEN11MemoryImage9ConstructE6size_tDpRR4ARGS\"></span><span id=\"_CPPv2I0DpEN11MemoryImage9ConstructE6size_tDpRR4ARGS\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ARGS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1a531cfc8b319a426cb952ae5eb3a5d0fe\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Construct</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0DpEN11MemoryImage9ConstructEv6size_tDpRR4ARGS\" title=\"MemoryImage::Construct::ARGS\"><span class=\"n\"><span class=\"pre\">ARGS</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">args</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Build a new object of the provided type at the memory position indicated. </p></dd>", "a[href=\"#_CPPv4N11MemoryImage4FuzzEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N11MemoryImage4FuzzEv\">\n<span id=\"_CPPv3N11MemoryImage4FuzzEv\"></span><span id=\"_CPPv2N11MemoryImage4FuzzEv\"></span><span id=\"MemoryImage::Fuzz\"></span><span class=\"target\" id=\"classMemoryImage_1a6c70a8ea78ef9306c0b5a517ee4b05e0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Fuzz</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#memoryimage-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">MemoryImage.hpp<a class=\"headerlink\" href=\"#memoryimage-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A managed set of Bytes to store any kind of data. </p>", "a[href=\"#_CPPv4I0EN11MemoryImage7MoveObjEv6size_tR11MemoryImage\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN11MemoryImage7MoveObjEv6size_tR11MemoryImage\">\n<span id=\"_CPPv3I0EN11MemoryImage7MoveObjE6size_tR11MemoryImage\"></span><span id=\"_CPPv2I0EN11MemoryImage7MoveObjE6size_tR11MemoryImage\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classMemoryImage_1a0ff5ced5075769ba6fc2248fa9b1f5b9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MoveObj</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span>, <a class=\"reference internal\" href=\"#_CPPv411MemoryImage\" title=\"MemoryImage\"><span class=\"n\"><span class=\"pre\">MemoryImage</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">from_image</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Move an object from another MemoryImage with an identical DataLayout. </p></dd>", "a[href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3Ptr\">\n<span id=\"_CPPv3I0E3Ptr\"></span><span id=\"_CPPv2I0E3Ptr\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classPtr\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></span><br/></dt><dd></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
