selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/MurmurHash\"]": "<p><b>MurmurHash</b> is a non-cryptographic hash function suitable for general hash-based lookup.\nIt was created by Austin Appleby in 2008 and is currently hosted on GitHub along with its test suite named 'SMHasher'. It also exists in a number of variants, all of which have been released into the public domain. The name comes from two basic operations, multiply (MU) and rotate (R), used in its inner loop.</p>", "a[href^=\"https://en.wikipedia.org/wiki/MurmurHash#\"]": "<p><b>MurmurHash</b> is a non-cryptographic hash function suitable for general hash-based lookup.\nIt was created by Austin Appleby in 2008 and is currently hosted on GitHub along with its test suite named 'SMHasher'. It also exists in a number of variants, all of which have been released into the public domain. The name comes from two basic operations, multiply (MU) and rotate (R), used in its inner loop.</p>", "a[href=\"#_CPPv411murmur_hashKNSt4spanIKNSt4byteEEEK8uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv411murmur_hashKNSt4spanIKNSt4byteEEEK8uint64_t\">\n<span id=\"_CPPv311murmur_hashKNSt4spanIKNSt4byteEEEK8uint64_t\"></span><span id=\"_CPPv211murmur_hashKNSt4spanIKNSt4byteEEEK8uint64_t\"></span><span id=\"murmur_hash__std::span:std::byteC:C.uint64_tCCE\"></span><span class=\"target\" id=\"hash__utils_8hpp_1afe9b35a3c7e31b458e9fd9e7f93bb6d5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">murmur_hash</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">span</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">key</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">seed</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Implementation of the murmur3 hash, a fast hash with low collisions. This hash makes it suitable for hash-based lookups. For more info, see: <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/MurmurHash\">https://en.wikipedia.org/wiki/MurmurHash</a> This implementation was directly based on: <a class=\"reference external\" href=\"https://github.com/aappleby/smhasher/blob/92cf3702fcfaadc84eb7bef59825a23e0cd84f56/src/MurmurHash3.cpp\">https://github.com/aappleby/smhasher/blob/92cf3702fcfaadc84eb7bef59825a23e0cd84f56/src/MurmurHash3.cpp</a> </p></dd>", "a[href=\"#_CPPv412hash_combineNSt6size_tENSt6size_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412hash_combineNSt6size_tENSt6size_tE\">\n<span id=\"_CPPv312hash_combineNSt6size_tENSt6size_tE\"></span><span id=\"_CPPv212hash_combineNSt6size_tENSt6size_tE\"></span><span id=\"hash_combine__std::s.std::sCE\"></span><span class=\"target\" id=\"hash__utils_8hpp_1a6c07387b3e74d926e8db8493a05645be\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">hash_combine</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">hash1</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">hash2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Boost\u2019s implementation of a simple hash-combining function. Taken from <a class=\"reference external\" href=\"https://www.boost.org/doc/libs/1_37_0/doc/html/hash/reference.html#boost.hash_combine\">https://www.boost.org/doc/libs/1_37_0/doc/html/hash/reference.html#boost.hash_combine</a> </p></dd>", "a[href=\"#_CPPv4IDpE12hash_combineNSt6size_tENSt6size_tENSt6size_tENSt6size_tEDp2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IDpE12hash_combineNSt6size_tENSt6size_tENSt6size_tENSt6size_tEDp2Ts\">\n<span id=\"_CPPv3IDpE12hash_combineNSt6size_tENSt6size_tENSt6size_tEDp2Ts\"></span><span id=\"_CPPv2IDpE12hash_combineNSt6size_tENSt6size_tENSt6size_tEDp2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"hash__utils_8hpp_1a544252fbd20a6e87a823ffee9a6ec168\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">hash_combine</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">hash1</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">hash2</span></span>, <a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">hash3</span></span>, <a class=\"reference internal\" href=\"#_CPPv4IDpE12hash_combineNSt6size_tENSt6size_tENSt6size_tENSt6size_tEDp2Ts\" title=\"hash_combine::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">extras</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Allow hash_combine to work with more than two input values. </p></dd>", "a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"#_CPPv4I0E4HashNSt6size_tERK1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E4HashNSt6size_tERK1T\">\n<span id=\"_CPPv3I0E4HashRK1T\"></span><span id=\"_CPPv2I0E4HashRK1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"hash__utils_8hpp_1af91507e033cc52d5483cf97953f89d86\"></span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Hash</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E4HashNSt6size_tERK1T\" title=\"Hash::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">x</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv412hash_combine3PtrIKNSt6size_tEE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412hash_combine3PtrIKNSt6size_tEE6size_t\">\n<span id=\"_CPPv312hash_combine3PtrIKNSt6size_tEE6size_t\"></span><span id=\"_CPPv212hash_combine3PtrIKNSt6size_tEE6size_t\"></span><span id=\"hash_combine__Ptr:std::sC:.s\"></span><span class=\"target\" id=\"hash__utils_8hpp_1aca34322ae5a1a500af546ffe69f47907\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">hash_combine</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">hashes</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_hashes</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Allow hash_combine to take a series of size_t\u2019s to merge into a single hash. </p></dd>", "a[href=\"#_CPPv4NK13ContainerHashclERK9Container\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK13ContainerHashclERK9Container\">\n<span id=\"_CPPv3NK13ContainerHashclERK9Container\"></span><span id=\"_CPPv2NK13ContainerHashclERK9Container\"></span><span id=\"ContainerHash::call-operator__ContainerCRC\"></span><span class=\"target\" id=\"structContainerHash_1a9d6505f5b0a8c53a6988933eb1d0d692\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">()</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_6size_tE13ContainerHash\" title=\"ContainerHash::Container\"><span class=\"n\"><span class=\"pre\">Container</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">v</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#hash-utils-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">hash_utils.hpp<a class=\"headerlink\" href=\"#hash-utils-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>This file provides tools for hashing values and containers. </p>", "a[href=\"#_CPPv4IDpE11CombineHashNSt6size_tEDpRK2Ts\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IDpE11CombineHashNSt6size_tEDpRK2Ts\">\n<span id=\"_CPPv3IDpE11CombineHashDpRK2Ts\"></span><span id=\"_CPPv2IDpE11CombineHashDpRK2Ts\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"hash__utils_8hpp_1a3dea1908685ba35d5810639ed0f763cb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CombineHash</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4IDpE11CombineHashNSt6size_tEDpRK2Ts\" title=\"CombineHash::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">args</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Alias hash_combine() to CombineHash()</p></dd>", "a[href=\"#_CPPv4I0_6size_tE13ContainerHash\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_6size_tE13ContainerHash\">\n<span id=\"_CPPv3I0_6size_tE13ContainerHash\"></span><span id=\"_CPPv2I0_6size_tE13ContainerHash\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Container</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Seed</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"structContainerHash\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ContainerHash</span></span></span><br/></dt><dd><p>This structure serves as a hash for containers that are iterable. Use as a drop-in replacement for std::hash. </p></dd>", "a[href=\"#_CPPv412szudzik_hash8uint32_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412szudzik_hash8uint32_t8uint32_t\">\n<span id=\"_CPPv312szudzik_hash8uint32_t8uint32_t\"></span><span id=\"_CPPv212szudzik_hash8uint32_t8uint32_t\"></span><span id=\"szudzik_hash__uint32_t.uint32_t\"></span><span class=\"target\" id=\"hash__utils_8hpp_1a06b7b3fbca659dae55c50ee377cf5f63\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">szudzik_hash</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">a_</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">b_</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Generate a unique long from a pair of ints. </p></dd>", "a[href=\"#_CPPv412hash_combineNSt6size_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412hash_combineNSt6size_tE\">\n<span id=\"_CPPv312hash_combineNSt6size_tE\"></span><span id=\"_CPPv212hash_combineNSt6size_tE\"></span><span id=\"hash_combine__std::sCE\"></span><span class=\"target\" id=\"hash__utils_8hpp_1ab8cf43524ab493d31b8274aca0a1f684\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">hash_combine</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">hash1</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>If hash_combine has a single value, there\u2019s nothing to combine; just return it! </p></dd>", "a[href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3Ptr\">\n<span id=\"_CPPv3I0E3Ptr\"></span><span id=\"_CPPv2I0E3Ptr\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classPtr\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></span><br/></dt><dd></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
