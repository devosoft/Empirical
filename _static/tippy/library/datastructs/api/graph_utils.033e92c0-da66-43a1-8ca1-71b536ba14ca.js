selector_to_html = {"a[href=\"../../math/api/Random.html#_CPPv46Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46Random\">\n<span id=\"_CPPv36Random\"></span><span id=\"_CPPv26Random\"></span><span id=\"Random\"></span><span class=\"target\" id=\"classRandom\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Random</span></span></span><br/></dt><dd><p>Middle Square Weyl Sequence: A versatile and non-patterned pseudo-random-number generator. Based on: <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Middle-square_method\">https://en.wikipedia.org/wiki/Middle-square_method</a></p></dd>", "a[href=\"#_CPPv427build_weighted_graph_random6size_t6size_t6size_t6size_tR6Randomb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv427build_weighted_graph_random6size_t6size_t6size_t6size_tR6Randomb\">\n<span id=\"_CPPv327build_weighted_graph_random6size_t6size_t6size_t6size_tR6Randomb\"></span><span id=\"_CPPv227build_weighted_graph_random6size_t6size_t6size_t6size_tR6Randomb\"></span><span id=\"build_weighted_graph_random__s.s.s.s.RandomR.b\"></span><span class=\"target\" id=\"graph__utils_8hpp_1aefe33643a71e9c23219ef56d94852a2a\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv413WeightedGraph\" title=\"WeightedGraph\"><span class=\"n\"><span class=\"pre\">WeightedGraph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">build_weighted_graph_random</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v_count</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">e_count</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">min_weight</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_weight</span></span>, <a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">connected</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a random, WEIGHTED graph with the specified number of vertices, edges, and range of edge weights. If connected is set, start by building a tree. Then connect random (unconnected) pairs of vertices until the proper number of edges are included. </p></dd>", "a[href=\"#_CPPv414load_graph_symNSt6stringEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414load_graph_symNSt6stringEb\">\n<span id=\"_CPPv314load_graph_symNSt6stringEb\"></span><span id=\"_CPPv214load_graph_symNSt6stringEb\"></span><span id=\"load_graph_sym__ss.b\"></span><span class=\"target\" id=\"graph__utils_8hpp_1a4afcf11cf8bd25b90511f8fb90431dfc\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">load_graph_sym</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">filename</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sub1</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Load a graph with a specified filename. </p></dd>", "a[href=\"#_CPPv414load_graph_symRNSt7istreamEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414load_graph_symRNSt7istreamEb\">\n<span id=\"_CPPv314load_graph_symRNSt7istreamEb\"></span><span id=\"_CPPv214load_graph_symRNSt7istreamEb\"></span><span id=\"load_graph_sym__isR.b\"></span><span class=\"target\" id=\"graph__utils_8hpp_1a282e90abe69399b3c27c2a36b01c42ec\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">load_graph_sym</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">istream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">is</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">sub1</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper function for loading symmetric graphs from an input stream. sub1 indicates that verticies are numbered 1 to N instead of 0 to N-1. </p></dd>", "a[href=\"#_CPPv422build_graph_clique_set6size_t6size_tR6Randomd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv422build_graph_clique_set6size_t6size_tR6Randomd\">\n<span id=\"_CPPv322build_graph_clique_set6size_t6size_tR6Randomd\"></span><span id=\"_CPPv222build_graph_clique_set6size_t6size_tR6Randomd\"></span><span id=\"build_graph_clique_set__s.s.RandomR.double\"></span><span class=\"target\" id=\"graph__utils_8hpp_1ad9a0b182bfc05519644c82f198f5f34d\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">build_graph_clique_set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">clique_size</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">clique_count</span></span>, <a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">extra_prob</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0.5</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Build a set of cliques (such that one member of each can be part of an independent set) and then links them together </p></dd>", "a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"#_CPPv416load_graph_tableNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416load_graph_tableNSt6stringE\">\n<span id=\"_CPPv316load_graph_tableNSt6stringE\"></span><span id=\"_CPPv216load_graph_tableNSt6stringE\"></span><span id=\"load_graph_table__ss\"></span><span class=\"target\" id=\"graph__utils_8hpp_1a94ba68b330de5e151df726d00a9067c8\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">load_graph_table</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">filename</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Load a graph from a connection matrix in a file by the specified name. </p></dd>", "a[href=\"#graph-utils-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">graph_utils.hpp<a class=\"headerlink\" href=\"#graph-utils-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>This file provides a number of tools for manipulating graphs. </p>", "a[href=\"#_CPPv416build_graph_tree6size_tR6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416build_graph_tree6size_tR6Random\">\n<span id=\"_CPPv316build_graph_tree6size_tR6Random\"></span><span id=\"_CPPv216build_graph_tree6size_tR6Random\"></span><span id=\"build_graph_tree__s.RandomR\"></span><span class=\"target\" id=\"graph__utils_8hpp_1a2cf638418a66250cfe7d73e54611f1d9\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">build_graph_tree</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v_count</span></span>, <a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a random tree graph (new vertices are repeatedly attached to a random position in a tree as it is constructed.) </p></dd>", "a[href=\"Graph.html#_CPPv413WeightedGraph\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413WeightedGraph\">\n<span id=\"_CPPv313WeightedGraph\"></span><span id=\"_CPPv213WeightedGraph\"></span><span id=\"WeightedGraph\"></span><span class=\"target\" id=\"classWeightedGraph\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">WeightedGraph</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><br/></dt><dd><p>A graph class that maintains a set of vertices (nodes), edges (connecting pairs of nodes), and edge weights </p></dd>", "a[href=\"Graph.html#_CPPv45Graph\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv45Graph\">\n<span id=\"_CPPv35Graph\"></span><span id=\"_CPPv25Graph\"></span><span id=\"Graph\"></span><span class=\"target\" id=\"classGraph\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Graph</span></span></span><br/></dt><dd><p>A graph class that maintains a set of vertices (nodes) and edges (connecting pairs of nodes) </p><p>Subclassed by WeightedGraph</p></dd>", "a[href=\"#_CPPv418build_graph_random6size_t6size_tR6Randomb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv418build_graph_random6size_t6size_tR6Randomb\">\n<span id=\"_CPPv318build_graph_random6size_t6size_tR6Randomb\"></span><span id=\"_CPPv218build_graph_random6size_t6size_tR6Randomb\"></span><span id=\"build_graph_random__s.s.RandomR.b\"></span><span class=\"target\" id=\"graph__utils_8hpp_1a106cd2288f6c9bcca668737270423289\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">build_graph_random</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v_count</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">e_count</span></span>, <a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">connected</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a random, graph with the specified number of vertices and edges. If connected is set, start by building a tree. Then connect random (unconnected) pairs of vertices until the proper number of edges are included. </p></dd>", "a[href=\"#_CPPv416build_graph_grid6size_t6size_tR6Randomd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416build_graph_grid6size_t6size_tR6Randomd\">\n<span id=\"_CPPv316build_graph_grid6size_t6size_tR6Randomd\"></span><span id=\"_CPPv216build_graph_grid6size_t6size_tR6Randomd\"></span><span id=\"build_graph_grid__s.s.RandomR.double\"></span><span class=\"target\" id=\"graph__utils_8hpp_1af048fc2d965ecf8e1661b7d8035385e8\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">build_graph_grid</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">width</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">height</span></span>, <a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">prob_use</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1.0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a graph with width x height vertices setup into a grid structure. </p></dd>", "a[href=\"#_CPPv425build_weighted_graph_tree6size_t6size_t6size_tR6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv425build_weighted_graph_tree6size_t6size_t6size_tR6Random\">\n<span id=\"_CPPv325build_weighted_graph_tree6size_t6size_t6size_tR6Random\"></span><span id=\"_CPPv225build_weighted_graph_tree6size_t6size_t6size_tR6Random\"></span><span id=\"build_weighted_graph_tree__s.s.s.RandomR\"></span><span class=\"target\" id=\"graph__utils_8hpp_1a55df2803a637ce5c3f62edfe3dd25b00\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv413WeightedGraph\" title=\"WeightedGraph\"><span class=\"n\"><span class=\"pre\">WeightedGraph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">build_weighted_graph_tree</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v_count</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">min_weight</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_weight</span></span>, <a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a random WEIGHTED tree graph (new vertices are repeatedly attached to a random position in a tree as it is constructed.) </p></dd>", "a[href=\"#_CPPv416load_graph_tableRNSt7istreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416load_graph_tableRNSt7istreamE\">\n<span id=\"_CPPv316load_graph_tableRNSt7istreamE\"></span><span id=\"_CPPv216load_graph_tableRNSt7istreamE\"></span><span id=\"load_graph_table__isR\"></span><span class=\"target\" id=\"graph__utils_8hpp_1a473acf770b8a95b5a611e35e9af7d69f\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">load_graph_table</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">istream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">is</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Load a graph from a connection matrix. Format: Number of vertices followed by v^2 0\u2019s or 1\u2019s Example: \u201c3 0 1 0 1 0 0 0 0 1\u201d </p></dd>", "a[href=\"#_CPPv416build_graph_ring6size_tR6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416build_graph_ring6size_tR6Random\">\n<span id=\"_CPPv316build_graph_ring6size_tR6Random\"></span><span id=\"_CPPv216build_graph_ring6size_tR6Random\"></span><span id=\"build_graph_ring__s.RandomR\"></span><span class=\"target\" id=\"graph__utils_8hpp_1a5fa52fdb419e3b99dba2716f061b46d5\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">build_graph_ring</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v_count</span></span>, <a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a graph where all vertics are degree two and form a single ring. </p></dd>", "a[href=\"#_CPPv413shuffle_graphRK5GraphR6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413shuffle_graphRK5GraphR6Random\">\n<span id=\"_CPPv313shuffle_graphRK5GraphR6Random\"></span><span id=\"_CPPv213shuffle_graphRK5GraphR6Random\"></span><span id=\"shuffle_graph__GraphCR.RandomR\"></span><span class=\"target\" id=\"graph__utils_8hpp_1a50b8c91aa25ace652c02352981c96394\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">shuffle_graph</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_graph</span></span>, <a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Take an existing graph, and build a new one that is isomorphic to it, but with randomized vertex IDs. </p></dd>", "a[href=\"#_CPPv415build_graph_dag6size_t6size_tR6Randomb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv415build_graph_dag6size_t6size_tR6Randomb\">\n<span id=\"_CPPv315build_graph_dag6size_t6size_tR6Randomb\"></span><span id=\"_CPPv215build_graph_dag6size_t6size_tR6Randomb\"></span><span id=\"build_graph_dag__s.s.RandomR.b\"></span><span class=\"target\" id=\"graph__utils_8hpp_1aa6418dfc15940c8acea806cfa71ec298\"></span><a class=\"reference internal\" href=\"Graph.html#_CPPv45Graph\" title=\"Graph\"><span class=\"n\"><span class=\"pre\">Graph</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">build_graph_dag</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">v_count</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">e_count</span></span>, <a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">connected</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Construct a random, graph with the specified number of vertices and edges. If connected is set, start by building a tree. Then connect random (unconnected) pairs of vertices until the proper number of edges are included. </p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
