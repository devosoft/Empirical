selector_to_html = {"a[href=\"api/BitArray.html#_CPPv4N3old8BitArray6this_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6this_tE\">\n<span id=\"_CPPv3N3old8BitArray6this_tE\"></span><span id=\"_CPPv2N3old8BitArray6this_tE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1abadbce4c85e36dff54b65583fdd7d22d\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">this_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector10ShiftRightEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector10ShiftRightEK6size_t\">\n<span id=\"_CPPv3N3old9BitVector10ShiftRightEK6size_t\"></span><span id=\"_CPPv2N3old9BitVector10ShiftRightEK6size_t\"></span><span id=\"old::BitVector::ShiftRight__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a94cfdd27795cb6a89e2024069341dad4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ShiftRight</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits10FindMaxOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits10FindMaxOneEv\">\n<span id=\"_CPPv3NK4Bits10FindMaxOneEv\"></span><span id=\"_CPPv2NK4Bits10FindMaxOneEv\"></span><span id=\"Bits::FindMaxOneC\"></span><span class=\"target\" id=\"classBits_1a35ef90e6843f20a63d5d934fac867daf\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindMaxOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find the most-significant set-bit. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsER6RandomKd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsER6RandomKd\">\n<span id=\"_CPPv3N4Bits4BitsER6RandomKd\"></span><span id=\"_CPPv2N4Bits4BitsER6RandomKd\"></span><span id=\"Bits::Bits__RandomR.doubleC\"></span><span class=\"target\" id=\"classBits_1a0b5e9aa8a512913da35a0b83ab71ccbe\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate random Bits with provided prob of 1\u2019s, default size. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9SetUInt16EK6size_t8uint16_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9SetUInt16EK6size_t8uint16_t\">\n<span id=\"_CPPv3N3old8BitArray9SetUInt16EK6size_t8uint16_t\"></span><span id=\"_CPPv2N3old8BitArray9SetUInt16EK6size_t8uint16_t\"></span><span id=\"old::BitArray::SetUInt16__sC.uint16_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab2ae739ff1c231971e2d322a485ac6d7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt16</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 16-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrixeOERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrixeOERK9BitMatrix\">\n<span id=\"_CPPv3N9BitMatrixeOERK9BitMatrix\"></span><span id=\"_CPPv2N9BitMatrixeOERK9BitMatrix\"></span><span id=\"BitMatrix::xor-assign-operator__BitMatrixCR\"></span><span class=\"target\" id=\"classBitMatrix_1a3312394bbc021548634c485614ef0a54\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector3SetE6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector3SetE6size_tb\">\n<span id=\"_CPPv3N3old9BitVector3SetE6size_tb\"></span><span id=\"_CPPv2N3old9BitVector3SetE6size_tb\"></span><span id=\"old::BitVector::Set__s.b\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a98fda6e19279861ce6daba039f0c0232\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the bit value at the specified index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6InsertEK6size_tKbK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6InsertEK6size_tKbK6size_t\">\n<span id=\"_CPPv3N3old9BitVector6InsertEK6size_tKbK6size_t\"></span><span id=\"_CPPv2N3old9BitVector6InsertEK6size_tKbK6size_t\"></span><span id=\"old::BitVector::Insert__sC.bC.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a7045d003b37fe10e01b5dd22ca06a3cb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Insert</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Insert bit(s) into any index of vector using bit magic. Blog post on implementation reasoning: <a class=\"reference external\" href=\"https://devolab.org/?p=2249\">https://devolab.org/?p=2249</a> </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0EN4Bits9serializeEvR7Archive\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN4Bits9serializeEvR7Archive\">\n<span id=\"_CPPv3I0EN4Bits9serializeER7Archive\"></span><span id=\"_CPPv2I0EN4Bits9serializeER7Archive\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Archive</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a328b34f62c96fbcfe2b7544f17744246\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">serialize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0EN4Bits9serializeEvR7Archive\" title=\"Bits::serialize::Archive\"><span class=\"n\"><span class=\"pre\">Archive</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Setup this bits object so that it can be stored in an archive and re-loaded. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8NOR_SELFERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8NOR_SELFERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVector8NOR_SELFERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVector8NOR_SELFERK9BitVector\"></span><span id=\"old::BitVector::NOR_SELF__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a5c6efc7299315aac209f770040d9a5ba\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NOR with this BitVector, store result here, and return this object. </p></dd>", "a[href=\"api/Bits_Data.html#_CPPv48BitsMode\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48BitsMode\">\n<span id=\"_CPPv38BitsMode\"></span><span id=\"_CPPv28BitsMode\"></span><span class=\"target\" id=\"Bits__Data_8hpp_1af31ec97e6be574fed2c89681498298a7\"></span><span class=\"k\"><span class=\"pre\">enum</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitsMode</span></span></span><br/></dt><dd><p><em>Values:</em></p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3ADDERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3ADDERK4Bits\">\n<span id=\"_CPPv3NK4Bits3ADDERK4Bits\"></span><span id=\"_CPPv2NK4Bits3ADDERK4Bits\"></span><span id=\"Bits::ADD__BitsCRC\"></span><span class=\"target\" id=\"classBits_1aedebe5bee5ec1f455df93ffcdd83c0f1\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ADD</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">set2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Sums two Bits objects (following uint rules); returns result. </p><p>Addition of two Bitsets. Wraps if it overflows. Returns result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8EQU_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8EQU_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8EQU_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8EQU_SELFERK8BitArray\"></span><span id=\"old::BitArray::EQU_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a812447f2ee46bad88344ee3a68767239\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EQU_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean EQU with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorltERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorltERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVectorltERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVectorltERK9BitVector\"></span><span id=\"old::BitVector::lt-operator__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a672c3358b1a87c3cad4279a9a7b65787\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Compare the would-be numerical values of two bit vectors. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8PushBackEKbK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8PushBackEKbK6size_t\">\n<span id=\"_CPPv3N3old9BitVector8PushBackEKbK6size_t\"></span><span id=\"_CPPv2N3old9BitVector8PushBackEKbK6size_t\"></span><span id=\"old::BitVector::PushBack__bC.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a4ff871a06f8cf91b4816a24c8893a2c4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PushBack</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Push given bit(s) onto the back of a vector. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9NAND_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9NAND_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray9NAND_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray9NAND_SELFERK8BitArray\"></span><span id=\"old::BitArray::NAND_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab44610d3c97cc4cc10970cf437a0bad0\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NAND_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NAND with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrixD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrixD0Ev\">\n<span id=\"_CPPv3N9BitMatrixD0Ev\"></span><span id=\"_CPPv2N9BitMatrixD0Ev\"></span><span id=\"BitMatrix::~BitMatrix\"></span><span class=\"target\" id=\"classBitMatrix_1a6bbd6f7274c0df80c0a44c5088992d8f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~BitMatrix</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector3setE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector3setE6size_t\">\n<span id=\"_CPPv3N3old9BitVector3setE6size_t\"></span><span id=\"_CPPv2N3old9BitVector3setE6size_t\"></span><span id=\"old::BitVector::set__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a02120bad66ede7546e1180da7a9f6ac8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector12REVERSE_SELFEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector12REVERSE_SELFEv\">\n<span id=\"_CPPv3N3old9BitVector12REVERSE_SELFEv\"></span><span id=\"_CPPv2N3old9BitVector12REVERSE_SELFEv\"></span><span id=\"old::BitVector::REVERSE_SELF\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a83b6d4e142fda4a28ad4e925002820ca\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">REVERSE_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Reverse the order of bits in the bitset. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector10PrintDebugERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector10PrintDebugERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old9BitVector10PrintDebugERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old9BitVector10PrintDebugERNSt7ostreamE\"></span><span id=\"old::BitVector::PrintDebug__osRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a24fdc39b3a928bcf1046db7617cb9b96\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintDebug</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print out details about the internals of the BitVector. </p><p>Print a space between each field (or other provided spacer) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7BytePtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7BytePtrEv\">\n<span id=\"_CPPv3NK4Bits7BytePtrEv\"></span><span id=\"_CPPv2NK4Bits7BytePtrEv\"></span><span id=\"Bits::BytePtrC\"></span><span class=\"target\" id=\"classBits_1a830f044b610f0512b2d6f0b71e941f5b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7FindOneEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7FindOneEK6size_t\">\n<span id=\"_CPPv3NK3old9BitVector7FindOneEK6size_t\"></span><span id=\"_CPPv2NK3old9BitVector7FindOneEK6size_t\"></span><span id=\"old::BitVector::FindOne__sCC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a1c393b0c29e2a4caa1c29a8435609475\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first one after start_pos; return -1 if no ones in vector. You can loop through all 1-bit positions of a BitVector \u201cbv\u201d with:</p><p>for (int pos = bv.FindOne(); pos &gt;= 0; pos = bv.FindOne(pos+1)) { \u2026 } </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E15RotateBitsRight1T1T6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E15RotateBitsRight1T1T6size_t6size_t\">\n<span id=\"_CPPv3I0E15RotateBitsRight1T6size_t6size_t\"></span><span id=\"_CPPv2I0E15RotateBitsRight1T6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1a12a00d31c8a3d2d63119c48918ce8fec\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E15RotateBitsRight1T1T6size_t6size_t\" title=\"RotateBitsRight::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateBitsRight</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E15RotateBitsRight1T1T6size_t6size_t\" title=\"RotateBitsRight::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">bit_count</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix3AllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix3AllEv\">\n<span id=\"_CPPv3NK9BitMatrix3AllEv\"></span><span id=\"_CPPv2NK9BitMatrix3AllEv\"></span><span id=\"BitMatrix::AllC\"></span><span class=\"target\" id=\"classBitMatrix_1a49d07075fcb02d0c5aa42e7f2804aebf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">All</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrixaNERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrixaNERK9BitMatrix\">\n<span id=\"_CPPv3N9BitMatrixaNERK9BitMatrix\"></span><span id=\"_CPPv2N9BitMatrixaNERK9BitMatrix\"></span><span id=\"BitMatrix::and-assign-operator__BitMatrixCR\"></span><span class=\"target\" id=\"classBitMatrix_1ad8c8919124f669d0c677b0076c612211\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I_6size_tENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERKNSt6bitsetI8NUM_BITSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERKNSt6bitsetI8NUM_BITSEE\">\n<span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a5351d9fe9d641715b83acfa02fe4e88a\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">bitset</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERKNSt6bitsetI8NUM_BITSEE\" title=\"Bits::operator=::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitset</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a std::bitset. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsER6RandomK6size_t\">\n<span id=\"_CPPv3N4Bits4BitsER6RandomK6size_t\"></span><span id=\"_CPPv2N4Bits4BitsER6RandomK6size_t\"></span><span id=\"Bits::Bits__RandomR.sC\"></span><span class=\"target\" id=\"classBits_1a57297bbb076791d794b708a0c985295e\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate random Bits with specified # of ones, default size. </p><p>Constructor to generate random Bits with specified number of ones.</p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorE6size_tR6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorE6size_tR6Random\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorE6size_tR6Random\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorE6size_tR6Random\"></span><span id=\"old::BitVector::BitVector__s.RandomR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab28cf4cee74a3544b5b913b041f9e778\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitVector (with equal prob of 0 or 1). </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsE6size_tR6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsE6size_tR6Random\">\n<span id=\"_CPPv3N4Bits4BitsE6size_tR6Random\"></span><span id=\"_CPPv2N4Bits4BitsE6size_tR6Random\"></span><span id=\"Bits::Bits__s.RandomR\"></span><span class=\"target\" id=\"classBits_1a1bac8132623543c7d66ca3899760d241\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a specified number of random Bits (with equal prob of 0 or 1). </p><p>Constructor to generate a random Bits (with equal prob of 0 or 1). </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3NOTEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3NOTEv\">\n<span id=\"_CPPv3NK4Bits3NOTEv\"></span><span id=\"_CPPv2NK4Bits3NOTEv\"></span><span id=\"Bits::NOTC\"></span><span class=\"target\" id=\"classBits_1a1ed091ec7e385815ae0ad7393470c1c5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOT</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NOT on this Bits and return the result. </p></dd>", "a[href=\"api/Bits_Data.html#_CPPv4N8BitsMode9WATERMARKE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8BitsMode9WATERMARKE\">\n<span id=\"_CPPv3N8BitsMode9WATERMARKE\"></span><span id=\"_CPPv2N8BitsMode9WATERMARKE\"></span><span class=\"target\" id=\"Bits__Data_8hpp_1af31ec97e6be574fed2c89681498298a7a0235466c3898bd600ec767d296649b91\"></span><span class=\"k\"><span class=\"pre\">enumerator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">WATERMARK</span></span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7FIELD_1E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7FIELD_1E\">\n<span id=\"_CPPv3N3old8BitArray7FIELD_1E\"></span><span id=\"_CPPv2N3old8BitArray7FIELD_1E\"></span><span id=\"old::BitArray::FIELD_1__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aff67491a74cd6c240721707735d5219c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_1</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">1</span></span><br/></dt><dd><p>Least significant bit set to 1. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8SUB_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8SUB_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8SUB_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8SUB_SELFERK8BitArray\"></span><span id=\"old::BitArray::SUB_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a194c68b1d4d4f948b983855c98d02e40\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SUB_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Subtraction of two BitArrays. Wraps if it underflows. Returns this object. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray11RotateRightEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11RotateRightEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray11RotateRightEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray11RotateRightEK6size_t\"></span><span id=\"old::BitArray::RotateRight__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a85f7961b9364116b72e43d9409b4c53f\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateRight</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size_raw</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper for calling ROTATE with positive number. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitsixE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitsixE6size_t\">\n<span id=\"_CPPv3NK4BitsixE6size_t\"></span><span id=\"_CPPv2NK4BitsixE6size_t\"></span><span id=\"Bits::subscript-operator__sC\"></span><span class=\"target\" id=\"classBits_1a1e82ed81af176086993d665a6831f9df\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">[]</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Const index operator &amp;#8212; return the bit at the specified position. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0EN4Bits15SetValueAtIndexER4BitsK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN4Bits15SetValueAtIndexER4BitsK6size_t1T\">\n<span id=\"_CPPv3I0EN4Bits15SetValueAtIndexEK6size_t1T\"></span><span id=\"_CPPv2I0EN4Bits15SetValueAtIndexEK6size_t1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1ade3ac5846c46ae92a9b27b7f50e84c58\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN4Bits15SetValueAtIndexER4BitsK6size_t1T\" title=\"Bits::SetValueAtIndex::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set specified type at a given index (in steps of that type size) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectoreoERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectoreoERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVectoreoERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVectoreoERK9BitVector\"></span><span id=\"old::BitVector::xor-operator__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a4b1cc97b8e0b271bc479c5b271bdc6bf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise XOR\u2026 </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitsorERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitsorERK4Bits\">\n<span id=\"_CPPv3NK4BitsorERK4Bits\"></span><span id=\"_CPPv2NK4BitsorERK4Bits\"></span><span id=\"Bits::or-operator__BitsCRC\"></span><span class=\"target\" id=\"classBits_1ae9292407916e2197f856ebf333316167\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise OR\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7field_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7field_tE\">\n<span id=\"_CPPv3N3old8BitArray7field_tE\"></span><span id=\"_CPPv2N3old8BitArray7field_tE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a48a88648b8f00b6a4e744b56fcb15eed\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">field_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../meta/api/type_traits.html#_CPPv4I_6size_t0E16uint_bit_count_t\" title=\"uint_bit_count_t\"><span class=\"n\"><span class=\"pre\">uint_bit_count_t</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector10RotateLeftEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector10RotateLeftEK6size_t\">\n<span id=\"_CPPv3N3old9BitVector10RotateLeftEK6size_t\"></span><span id=\"_CPPv2N3old9BitVector10RotateLeftEK6size_t\"></span><span id=\"old::BitVector::RotateLeft__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a0cec05d72fba82b860e7617c949877cd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateLeft</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size_raw</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper: call ROTATE with negative number instead. </p><p>Helper: call ROTATE with negative number. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9GetUInt16E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9GetUInt16E6size_t\">\n<span id=\"_CPPv3NK4Bits9GetUInt16E6size_t\"></span><span id=\"_CPPv2NK4Bits9GetUInt16E6size_t\"></span><span id=\"Bits::GetUInt16__sC\"></span><span class=\"target\" id=\"classBits_1a76d2adbf0755f4f04c54221ac838becf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt16</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 16-bit uint from the specified uint index. </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I_iE13UIntMaskFirst8uint32_tv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_iE13UIntMaskFirst8uint32_tv\">\n<span id=\"_CPPv3I_iE13UIntMaskFirstv\"></span><span id=\"_CPPv2I_iE13UIntMaskFirstv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1ae70283466ca10eae033a8b985e60469a\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">UIntMaskFirst</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Create a series of a specified number of ones (at compile time) in a uint. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6this_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6this_tE\">\n<span id=\"_CPPv3N4Bits6this_tE\"></span><span id=\"_CPPv2N4Bits6this_tE\"></span><span class=\"target\" id=\"classBits_1a7611f125d269d1d9d0e364aebfb9ecf1\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">this_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9SetUInt32EK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9SetUInt32EK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old8BitArray9SetUInt32EK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old8BitArray9SetUInt32EK6size_t8uint32_t\"></span><span id=\"old::BitArray::SetUInt32__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a30f3ac110aff432168a02d036f3a1de6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt32</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray6ToggleEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6ToggleEv\">\n<span id=\"_CPPv3N3old8BitArray6ToggleEv\"></span><span id=\"_CPPv2N3old8BitArray6ToggleEv\"></span><span id=\"old::BitArray::Toggle\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a261da7a156972be35fcead40e358bf5d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip all bits in this BitArray. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7SetUIntEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7SetUIntEK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old9BitVector7SetUIntEK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old9BitVector7SetUIntEK6size_t8uint32_t\"></span><span id=\"old::BitVector::SetUInt__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a4ab9dfd55116cdfd1c7afb2ba5e68f9e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>By default, update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7SetUIntEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7SetUIntEK6size_t8uint32_t\">\n<span id=\"_CPPv3N4Bits7SetUIntEK6size_t8uint32_t\"></span><span id=\"_CPPv2N4Bits7SetUIntEK6size_t8uint32_t\"></span><span id=\"Bits::SetUInt__sC.uint32_t\"></span><span class=\"target\" id=\"classBits_1ac5ec7179865c4bdde83970fbab4251e3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>By default, update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits10FIELD_BITSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits10FIELD_BITSE\">\n<span id=\"_CPPv3N4Bits10FIELD_BITSE\"></span><span id=\"_CPPv2N4Bits10FIELD_BITSE\"></span><span id=\"Bits::FIELD_BITS__s\"></span><span class=\"target\" id=\"classBits_1ad78fad8d35fafc3a2e584793e32f8d1f\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/bitset_utils.html#_CPPv414NUM_FIELD_BITS\" title=\"NUM_FIELD_BITS\"><span class=\"n\"><span class=\"pre\">NUM_FIELD_BITS</span></span></a><br/></dt><dd></dd>", "a[href=\"api/Bits_Data.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Bits_Data.hpp<a class=\"headerlink\" href=\"#bits-data-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Helper class to handle memory management for Bits objects. </p><p>\nBits_Data handles the actual bits inside of the Bits class. Bits itself provides many tools to operate on that data. </p>", "a[href=\"api/Bits.html#_CPPv4NKSt4hashI4BitsI6DATA_T9ZERO_LEFTEEclERK4BitsI6DATA_T9ZERO_LEFTE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NKSt4hashI4BitsI6DATA_T9ZERO_LEFTEEclERK4BitsI6DATA_T9ZERO_LEFTE\">\n<span id=\"_CPPv3NKSt4hashI4BitsI6DATA_T9ZERO_LEFTEEclERK4BitsI6DATA_T9ZERO_LEFTE\"></span><span id=\"_CPPv2NKSt4hashI4BitsI6DATA_T9ZERO_LEFTEEclERK4BitsI6DATA_T9ZERO_LEFTE\"></span><span id=\"std::hash:Bits:DATA_T.ZERO_LEFT::::call-operator__Bits:DATA_T.ZERO_LEFT:CRC\"></span><span class=\"target\" id=\"structstd_1_1hash_3_01Bits_3_01DATA__T_00_01ZERO__LEFT_01_4_01_4_1a47f2bc52b11ec5de85f75161d3fd94e5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">()</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENSt4hashI4BitsI6DATA_T9ZERO_LEFTEEE\" title=\"std::hash&lt;Bits&lt;DATA_T, ZERO_LEFT&gt;&gt;::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENSt4hashI4BitsI6DATA_T9ZERO_LEFTEEE\" title=\"std::hash&lt;Bits&lt;DATA_T, ZERO_LEFT&gt;&gt;::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits2atE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits2atE6size_t\">\n<span id=\"_CPPv3N4Bits2atE6size_t\"></span><span id=\"_CPPv2N4Bits2atE6size_t\"></span><span id=\"Bits::at__s\"></span><span class=\"target\" id=\"classBits_1a2cdcb71241b2701d9bd170771e514a08\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">at</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray8ToStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8ToStringEv\">\n<span id=\"_CPPv3NK3old8BitArray8ToStringEv\"></span><span id=\"_CPPv2NK3old8BitArray8ToStringEv\"></span><span id=\"old::BitArray::ToStringC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a86f892bbb043cc3fca7b951e02b1bff2\"></span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to a string. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector15ClearExcessBitsEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector15ClearExcessBitsEv\">\n<span id=\"_CPPv3N3old9BitVector15ClearExcessBitsEv\"></span><span id=\"_CPPv2N3old9BitVector15ClearExcessBitsEv\"></span><span id=\"old::BitVector::ClearExcessBits\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aa16a58a1484c94d29b844e687affffdd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearExcessBits</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits14GetUInt64AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits14GetUInt64AtBitE6size_t\">\n<span id=\"_CPPv3NK4Bits14GetUInt64AtBitE6size_t\"></span><span id=\"_CPPv2NK4Bits14GetUInt64AtBitE6size_t\"></span><span id=\"Bits::GetUInt64AtBit__sC\"></span><span class=\"target\" id=\"classBits_1acd6843dfdf7b135e41d6e351dbe0ac3b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt64AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 64-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray10FIELD_BITSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10FIELD_BITSE\">\n<span id=\"_CPPv3N3old8BitArray10FIELD_BITSE\"></span><span id=\"_CPPv2N3old8BitArray10FIELD_BITSE\"></span><span id=\"old::BitArray::FIELD_BITS__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac956d4430f27b145d2f323f91d94763a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">8</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">sizeof</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorgtERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorgtERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVectorgtERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVectorgtERK9BitVector\"></span><span id=\"old::BitVector::gt-operator__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab50e44bbed95e7e622a10994e9ae352b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrixorERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrixorERK9BitMatrix\">\n<span id=\"_CPPv3NK9BitMatrixorERK9BitMatrix\"></span><span id=\"_CPPv2NK9BitMatrixorERK9BitMatrix\"></span><span id=\"BitMatrix::or-operator__BitMatrixCRC\"></span><span class=\"target\" id=\"classBitMatrix_1a05eb9ff4c805ea5de857cf045f019223\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix4NoneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix4NoneEv\">\n<span id=\"_CPPv3NK9BitMatrix4NoneEv\"></span><span id=\"_CPPv2NK9BitMatrix4NoneEv\"></span><span id=\"BitMatrix::NoneC\"></span><span class=\"target\" id=\"classBitMatrix_1adcff2b601da289054207e2f68f2c8fe1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">None</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7FindOneEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7FindOneEi\">\n<span id=\"_CPPv3NK4Bits7FindOneEi\"></span><span id=\"_CPPv2NK4Bits7FindOneEi\"></span><span id=\"Bits::FindOne__iC\"></span><span class=\"target\" id=\"classBits_1a1471caa0ff0e7897c372a0aefc83bc7b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Special version of FindOne takes int; common way to call. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix3SetE6size_t6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix3SetE6size_t6size_tb\">\n<span id=\"_CPPv3N9BitMatrix3SetE6size_t6size_tb\"></span><span id=\"_CPPv2N9BitMatrix3SetE6size_t6size_tb\"></span><span id=\"BitMatrix::Set__s.s.b\"></span><span class=\"target\" id=\"classBitMatrix_1a7698f182fa58f53b9ef4a8b68b95f424\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">col</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">row</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorE6size_tR6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorE6size_tR6RandomK6size_t\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorE6size_tR6RandomK6size_t\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorE6size_tR6RandomK6size_t\"></span><span id=\"old::BitVector::BitVector__s.RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a1c2d9428f714c3e64f5e0fac2795dc62\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitVector with provided number of 1\u2019s. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector8ToStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector8ToStringEv\">\n<span id=\"_CPPv3NK3old9BitVector8ToStringEv\"></span><span id=\"_CPPv2NK3old9BitVector8ToStringEv\"></span><span id=\"old::BitVector::ToStringC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae7ffb99cd4d866ec28a35bd68295fae9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitVector to a vector string [index 0 on left]. </p><p>Convert this BitVector to a vector string [0 index on left]. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4flipE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4flipE6size_t\">\n<span id=\"_CPPv3N4Bits4flipE6size_t\"></span><span id=\"_CPPv2N4Bits4flipE6size_t\"></span><span id=\"Bits::flip__s\"></span><span class=\"target\" id=\"classBits_1ae5bb6130c2884683c06b013c121ae451\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrixcoEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrixcoEv\">\n<span id=\"_CPPv3NK9BitMatrixcoEv\"></span><span id=\"_CPPv2NK9BitMatrixcoEv\"></span><span id=\"BitMatrix::inv-operatorC\"></span><span class=\"target\" id=\"classBitMatrix_1add9eae59fe61efec0691aefca8238c93\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">~</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits4backEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits4backEv\">\n<span id=\"_CPPv3NK4Bits4backEv\"></span><span id=\"_CPPv2NK4Bits4backEv\"></span><span id=\"Bits::backC\"></span><span class=\"target\" id=\"classBits_1a81a371c2b7eb7310c07cf3094e3b4bd2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">back</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9ROTR_SELFEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9ROTR_SELFEK6size_t\">\n<span id=\"_CPPv3N4Bits9ROTR_SELFEK6size_t\"></span><span id=\"_CPPv2N4Bits9ROTR_SELFEK6size_t\"></span><span id=\"Bits::ROTR_SELF__sCCE\"></span><span class=\"target\" id=\"classBits_1ad3b9112351a0ce7a0b7c2b9921d9b60a\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size_raw</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper for calling ROTATE with positive number. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector10FIELD_BITSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector10FIELD_BITSE\">\n<span id=\"_CPPv3N3old9BitVector10FIELD_BITSE\"></span><span id=\"_CPPv2N3old9BitVector10FIELD_BITSE\"></span><span id=\"old::BitVector::FIELD_BITS__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a6961580b713719cbc83fd45a9d6d9b71\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">sizeof</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">8</span></span><br/></dt><dd><p>Number of bits in a field. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits14ToBinaryStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits14ToBinaryStringEv\">\n<span id=\"_CPPv3NK4Bits14ToBinaryStringEv\"></span><span id=\"_CPPv2NK4Bits14ToBinaryStringEv\"></span><span id=\"Bits::ToBinaryStringC\"></span><span class=\"target\" id=\"classBits_1a0572a4a99bbe75da29a294d32f4a60c9\"></span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToBinaryString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this Bits to a numerical string [index 0 on right]. </p><p>Convert this Bits object to a numerical string [0 index on right]. </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E7pop_bit6size_tR1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E7pop_bit6size_tR1T\">\n<span id=\"_CPPv3I0E7pop_bitR1T\"></span><span id=\"_CPPv2I0E7pop_bitR1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1afbaad89467a19fe060e6468c2d8e0522\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pop_bit</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E7pop_bit6size_tR1T\" title=\"pop_bit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return the position of the first one bit AND REMOVE IT. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitslSEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitslSEK6size_t\">\n<span id=\"_CPPv3N4BitslSEK6size_t\"></span><span id=\"_CPPv2N4BitslSEK6size_t\"></span><span id=\"Bits::lshift-assign-operator__sC\"></span><span class=\"target\" id=\"classBits_1a792c4194f3ad4034f755d678705438d9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator for shift left\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray8GetUInt8E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8GetUInt8E6size_t\">\n<span id=\"_CPPv3NK3old8BitArray8GetUInt8E6size_t\"></span><span id=\"_CPPv2NK3old8BitArray8GetUInt8E6size_t\"></span><span id=\"old::BitArray::GetUInt8__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a21c7bdb82fecae866b2f8faedd384e4b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt8</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 8-bit uint from the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsER6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsER6Random\">\n<span id=\"_CPPv3N4Bits4BitsER6Random\"></span><span id=\"_CPPv2N4Bits4BitsER6Random\"></span><span id=\"Bits::Bits__RandomR\"></span><span class=\"target\" id=\"classBits_1aaf08ec2c2e90cc4d800f28c156486096\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random set of bits in the default size. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits5ClearEK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits5ClearEK6size_tK6size_t\">\n<span id=\"_CPPv3N4Bits5ClearEK6size_tK6size_t\"></span><span id=\"_CPPv2N4Bits5ClearEK6size_tK6size_t\"></span><span id=\"Bits::Clear__sC.sC\"></span><span class=\"target\" id=\"classBits_1af04f88dba2e6b1e475f38bf4dc1ef8d1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set bits to 0 in the range [start, stop) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3SUBERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3SUBERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVector3SUBERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVector3SUBERK9BitVector\"></span><span id=\"old::BitVector::SUB__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a822f8799520214ed938d4f5bac0e8129\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SUB</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">set2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Subtraction of two BitVectors. Wraps around if it underflows. Returns result.</p><p>Subtraction of two Bitsets. Wraps around if it underflows. Returns result. </p></dd>", "a[href=\"api/Bits_Data.html#_CPPv4I_6size_tE15Bits_StaticData\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tE15Bits_StaticData\">\n<span id=\"_CPPv3I_6size_tE15Bits_StaticData\"></span><span id=\"_CPPv2I_6size_tE15Bits_StaticData\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"Bits__Data_8hpp_1afa45c4b423b51e527237c65cd4bfec4b\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits_StaticData</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">internal</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">Bits_Data</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">internal</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">Bits_Data_Mem_Static</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tE15Bits_StaticData\" title=\"Bits_StaticData::MAX_BITS\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector10SHIFT_SELFEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector10SHIFT_SELFEKi\">\n<span id=\"_CPPv3N3old9BitVector10SHIFT_SELFEKi\"></span><span id=\"_CPPv2N3old9BitVector10SHIFT_SELFEKi\"></span><span id=\"old::BitVector::SHIFT_SELF__iC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1abae0dde208c6f197620aac21dceb5b48\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SHIFT_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Positive shifts go left and negative go right; store result here, and return this object. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix6SetColE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix6SetColE6size_t\">\n<span id=\"_CPPv3N9BitMatrix6SetColE6size_t\"></span><span id=\"_CPPv2N9BitMatrix6SetColE6size_t\"></span><span id=\"BitMatrix::SetCol__s\"></span><span class=\"target\" id=\"classBitMatrix_1adad3c389e158f989633d107ee3c1be8f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetCol</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">col</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Bits.hpp<a class=\"headerlink\" href=\"#bits-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A generic bit-handler to replace vector&lt;bool&gt;, etc +additional bitwise logic features. </p><p>\nThe Bits template allows the user to recreate the functionality of std::vector&lt;bool&gt;, array&lt;bool&gt;, std::bitset, and other such bit-handling classes.</p>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9RandomizeER6RandomKdK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9RandomizeER6RandomKdK6size_t6size_t\">\n<span id=\"_CPPv3N3old9BitVector9RandomizeER6RandomKdK6size_t6size_t\"></span><span id=\"_CPPv2N3old9BitVector9RandomizeER6RandomKdK6size_t6size_t\"></span><span id=\"old::BitVector::Randomize__RandomR.doubleC.sC.s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a498fdfd7d42ccfe00158e765588a4cbd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Randomize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector8MAX_BITSE\" title=\"old::BitVector::MAX_BITS\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a given probability of being a one. </p><p>Set all bits randomly, with a given probability of being on. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix7ULShiftEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix7ULShiftEv\">\n<span id=\"_CPPv3NK9BitMatrix7ULShiftEv\"></span><span id=\"_CPPv2NK9BitMatrix7ULShiftEv\"></span><span id=\"BitMatrix::ULShiftC\"></span><span class=\"target\" id=\"classBitMatrix_1aa3139e6934aef4921cf2261918a21537\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ULShift</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix7GetSizeEv\">\n<span id=\"_CPPv3NK9BitMatrix7GetSizeEv\"></span><span id=\"_CPPv2NK9BitMatrix7GetSizeEv\"></span><span id=\"BitMatrix::GetSizeCCE\"></span><span class=\"target\" id=\"classBitMatrix_1afb7b1208740e209497a291ead414ad23\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many total cells are in this matrix? </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector5countEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector5countEv\">\n<span id=\"_CPPv3NK3old9BitVector5countEv\"></span><span id=\"_CPPv2NK3old9BitVector5countEv\"></span><span id=\"old::BitVector::countC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae0c515d85ffa77ce5ff9e2d0636e9e73\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">count</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6PopOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6PopOneEv\">\n<span id=\"_CPPv3N4Bits6PopOneEv\"></span><span id=\"_CPPv2N4Bits6PopOneEv\"></span><span id=\"Bits::PopOne\"></span><span class=\"target\" id=\"classBits_1ae69f4ce2164d773b5f6982b9dab9415a\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return the position of the first one and change it to a zero. Return -1 if none. </p><p>Return the position of the first one and change it to a zero. Return -1 if no ones. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix5UnsetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix5UnsetE6size_t\">\n<span id=\"_CPPv3N9BitMatrix5UnsetE6size_t\"></span><span id=\"_CPPv2N9BitMatrix5UnsetE6size_t\"></span><span id=\"BitMatrix::Unset__s\"></span><span class=\"target\" id=\"classBitMatrix_1acf38a70aa4d4bde3bf02454b4c5699c1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Unset</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector14GetUInt16AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector14GetUInt16AtBitE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector14GetUInt16AtBitE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector14GetUInt16AtBitE6size_t\"></span><span id=\"old::BitVector::GetUInt16AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3ee4e38ea86b9f1ca26dc85ec51a5993\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt16AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8SetUInt8EK6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8SetUInt8EK6size_t7uint8_t\">\n<span id=\"_CPPv3N3old8BitArray8SetUInt8EK6size_t7uint8_t\"></span><span id=\"_CPPv2N3old8BitArray8SetUInt8EK6size_t7uint8_t\"></span><span id=\"old::BitArray::SetUInt8__sC.uint8_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab56a458e4c9a2ef13c7f9ba6ee504e46\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt8</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 8-bit uint at the specified uint index. </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E14RotateBitsLeft1T1T6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E14RotateBitsLeft1T1T6size_t\">\n<span id=\"_CPPv3I0E14RotateBitsLeft1T6size_t\"></span><span id=\"_CPPv2I0E14RotateBitsLeft1T6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1a9c44054ad628f4c91e19a14b1822e40a\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E14RotateBitsLeft1T1T6size_t\" title=\"RotateBitsLeft::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateBitsLeft</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E14RotateBitsLeft1T1T6size_t\" title=\"RotateBitsLeft::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3NORERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3NORERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVector3NORERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVector3NORERK9BitVector\"></span><span id=\"old::BitVector::NOR__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a60e0cec6ec540c8b9fc7f999192b8516\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NOR on this BitVector and return the result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits8FieldPtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits8FieldPtrEv\">\n<span id=\"_CPPv3NK4Bits8FieldPtrEv\"></span><span id=\"_CPPv2NK4Bits8FieldPtrEv\"></span><span id=\"Bits::FieldPtrC\"></span><span class=\"target\" id=\"classBits_1ac588f93d89b1d0a015c7ad9c61b41a03\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldPtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return a const pointer to the set of fields. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I0EN3old8BitArray15SetValueAtIndexEvK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray15SetValueAtIndexEvK6size_t1T\">\n<span id=\"_CPPv3I0EN3old8BitArray15SetValueAtIndexEK6size_t1T\"></span><span id=\"_CPPv2I0EN3old8BitArray15SetValueAtIndexEK6size_t1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1ad70ef67dc3a5135990c91f1eae57aa53\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray15SetValueAtIndexEvK6size_t1T\" title=\"old::BitArray::SetValueAtIndex::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set specified type at a given index (in steps of that type size) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorcoEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorcoEv\">\n<span id=\"_CPPv3NK3old9BitVectorcoEv\"></span><span id=\"_CPPv2NK3old9BitVectorcoEv\"></span><span id=\"old::BitVector::inv-operatorC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a70001aa5309e7e9e4ec3e784c516987c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">~</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise NOT\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray10FlipRandomER6RandomKdK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10FlipRandomER6RandomKdK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray10FlipRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray10FlipRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"old::BitArray::FlipRandom__RandomR.doubleC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aec4cea5b59bfa888e18b12568b7a5ce0\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FlipRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip random bits with a given probability. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray8GetValueEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8GetValueEv\">\n<span id=\"_CPPv3NK3old8BitArray8GetValueEv\"></span><span id=\"_CPPv2NK3old8BitArray8GetValueEv\"></span><span id=\"old::BitArray::GetValueC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7dfcd08c798de75f7ccc70296fe2a832\"></span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValue</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the overall value of this BitArray, using a uint encoding, but including all bits and returning the value as a double. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArrayixE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayixE6size_t\">\n<span id=\"_CPPv3NK3old8BitArrayixE6size_t\"></span><span id=\"_CPPv2NK3old8BitArrayixE6size_t\"></span><span id=\"old::BitArray::subscript-operator__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6d0c9f4fc49e3f19bb6a1c549944dde5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">[]</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Index into a const BitArray (i.e., cannot be set this way.) </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8SUB_SELFERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8SUB_SELFERK4Bits\">\n<span id=\"_CPPv3N4Bits8SUB_SELFERK4Bits\"></span><span id=\"_CPPv2N4Bits8SUB_SELFERK4Bits\"></span><span id=\"Bits::SUB_SELF__BitsCR\"></span><span class=\"target\" id=\"classBits_1a13277ed1341131f9e10a0bf80b5eae3c\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SUB_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">set2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Subtracts another Bits object from this one (following uint rules); returns *this. </p><p>Subtraction of two Bitsets. Wraps if it underflows. Returns this object. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray12GetUIntAtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray12GetUIntAtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray12GetUIntAtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray12GetUIntAtBitE6size_t\"></span><span id=\"old::BitArray::GetUIntAtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a31d11eebc38eee07424650bae562d984\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUIntAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>By default, retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6PopBitEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6PopBitEv\">\n<span id=\"_CPPv3N3old9BitVector6PopBitEv\"></span><span id=\"_CPPv2N3old9BitVector6PopBitEv\"></span><span id=\"old::BitVector::PopBit\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a04154b6a0e1133413e158cf0a0f0fe89\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Deprecated version of PopOne(). </p></dd>", "a[href=\"api/Bits.html#_CPPv4I_N6Random4ProbEEN4Bits10RandomizePER4BitsI6DATA_T9ZERO_LEFTER6RandomK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_N6Random4ProbEEN4Bits10RandomizePER4BitsI6DATA_T9ZERO_LEFTER6RandomK6size_t6size_t\">\n<span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv4N6Random4ProbE\" title=\"Random::Prob\"><span class=\"n\"><span class=\"pre\">Prob</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">P</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a2d7e9bf39a375ee08fa58b5850f8855f\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RandomizeP</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with probability specified at compile time. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArraypLERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArraypLERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArraypLERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArraypLERK8BitArray\"></span><span id=\"old::BitArray::add-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a4db98e2c9006d48df47fa1c42c2f1885\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">+=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator plus\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray14SetUInt32AtBitEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray14SetUInt32AtBitEK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old8BitArray14SetUInt32AtBitEK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old8BitArray14SetUInt32AtBitEK6size_t8uint32_t\"></span><span id=\"old::BitArray::SetUInt32AtBit__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae9b5dbf47adf1333e5d04bf03bbf0093\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt32AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector10TotalBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector10TotalBytesEv\">\n<span id=\"_CPPv3NK3old9BitVector10TotalBytesEv\"></span><span id=\"_CPPv2NK3old9BitVector10TotalBytesEv\"></span><span id=\"old::BitVector::TotalBytesC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a179c890d6ae5de590b4e1bc92b2ab644\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TotalBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many bytes are allocated? (rounded up!) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3EQUERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3EQUERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3EQUERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3EQUERK8BitArray\"></span><span id=\"old::BitArray::EQU__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af553757cf164d0392d245ce2396b5886\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EQU</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean EQU with a second BitArray and return the result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray4sizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4sizeEv\">\n<span id=\"_CPPv3N3old8BitArray4sizeEv\"></span><span id=\"_CPPv2N3old8BitArray4sizeEv\"></span><span id=\"old::BitArray::sizeCE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad4de8b3c01698041da93dea166cf11b9\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">size</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>STL COMPATIBILITY A set of functions to allow drop-in replacement with std::bitset. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectororERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectororERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVectororERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVectororERK9BitVector\"></span><span id=\"old::BitVector::or-operator__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a50be664bdfad672142a6e5eeaf9747da\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise OR\u2026 </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENSt4hashI4BitsI6DATA_T9ZERO_LEFTEEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENSt4hashI4BitsI6DATA_T9ZERO_LEFTEEE\">\n<span id=\"_CPPv3I0_bENSt4hashI4BitsI6DATA_T9ZERO_LEFTEEE\"></span><span id=\"_CPPv2I0_bENSt4hashI4BitsI6DATA_T9ZERO_LEFTEEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"structstd_1_1hash_3_01Bits_3_01DATA__T_00_01ZERO__LEFT_01_4_01_4\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">hash</span></span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENSt4hashI4BitsI6DATA_T9ZERO_LEFTEEE\" title=\"std::hash&lt;Bits&lt;DATA_T, ZERO_LEFT&gt;&gt;::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENSt4hashI4BitsI6DATA_T9ZERO_LEFTEEE\" title=\"std::hash&lt;Bits&lt;DATA_T, ZERO_LEFT&gt;&gt;::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>Hash function to allow Bits objects to be used with maps and sets (must be in std). </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6ResizeE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6ResizeE6size_t\">\n<span id=\"_CPPv3N4Bits6ResizeE6size_t\"></span><span id=\"_CPPv2N4Bits6ResizeE6size_t\"></span><span id=\"Bits::Resize__s\"></span><span class=\"target\" id=\"classBits_1ae43a70b08a3029ae140827fc9f2b693f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Resize</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">new_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Resize this Bits object to have the specified number of bits (if allowed) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bENK3old8BitArray6ExportE8BitArrayI7TO_BITS7TO_LEFTE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArray6ExportE8BitArrayI7TO_BITS7TO_LEFTE6size_t\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArray6ExportE6size_t\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArray6ExportE6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TO_BITS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TO_LEFT</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1ae1b3a4619ff16c8ec1c8c22c13fb14f8\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArray6ExportE8BitArrayI7TO_BITS7TO_LEFTE6size_t\" title=\"old::BitArray::Export::TO_BITS\"><span class=\"n\"><span class=\"pre\">TO_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArray6ExportE8BitArrayI7TO_BITS7TO_LEFTE6size_t\" title=\"old::BitArray::Export::TO_LEFT\"><span class=\"n\"><span class=\"pre\">TO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Export</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert to a BitArray of a different size. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENK4BitsgtEbRK4BitsI7DATA2_T3ZL2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENK4BitsgtEbRK4BitsI7DATA2_T3ZL2E\">\n<span id=\"_CPPv3I0_bENK4BitsgtERK4BitsI7DATA2_T3ZL2E\"></span><span id=\"_CPPv2I0_bENK4BitsgtERK4BitsI7DATA2_T3ZL2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a3f95a0d958253a7dc20ae5da850fce05\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsgtEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator&gt;::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsgtEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator&gt;::ZL2\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bENK3old8BitArraygtEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArraygtEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArraygtERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArraygtERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a999ecd4d9b51b02611957b1da470d0a3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArraygtEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&gt;::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArraygtEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&gt;::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I_6size_tE6BitSet\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tE6BitSet\">\n<span id=\"_CPPv3I_6size_tE6BitSet\"></span><span id=\"_CPPv2I_6size_tE6BitSet\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"Bits_8hpp_1a4c742749fece7b56c2dc648d7a731504\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/Bits_Data.html#_CPPv4I_6size_tE14Bits_FixedData\" title=\"Bits_FixedData\"><span class=\"n\"><span class=\"pre\">Bits_FixedData</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tE6BitSet\" title=\"BitSet::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4I_N6Random4ProbEEN3old9BitVector10RandomizePER9BitVectorR6RandomK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_N6Random4ProbEEN3old9BitVector10RandomizePER9BitVectorR6RandomK6size_t6size_t\">\n<span id=\"_CPPv3I_N6Random4ProbEEN3old9BitVector10RandomizePER6RandomK6size_t6size_t\"></span><span id=\"_CPPv2I_N6Random4ProbEEN3old9BitVector10RandomizePER6RandomK6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv4N6Random4ProbE\" title=\"Random::Prob\"><span class=\"n\"><span class=\"pre\">Prob</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">P</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a3701d2a0811616f30f13f3164da235bf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RandomizeP</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector8MAX_BITSE\" title=\"old::BitVector::MAX_BITS\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with probability specified at compile time. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits2ORERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits2ORERK4Bits\">\n<span id=\"_CPPv3NK4Bits2ORERK4Bits\"></span><span id=\"_CPPv2NK4Bits2ORERK4Bits\"></span><span id=\"Bits::OR__BitsCRC\"></span><span class=\"target\" id=\"classBits_1a81b254e50138d66b043bfe11f12f8634\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean OR on this Bits and return the result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9SetUInt64EK6size_t8uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9SetUInt64EK6size_t8uint64_t\">\n<span id=\"_CPPv3N4Bits9SetUInt64EK6size_t8uint64_t\"></span><span id=\"_CPPv2N4Bits9SetUInt64EK6size_t8uint64_t\"></span><span id=\"Bits::SetUInt64__sC.uint64_t\"></span><span class=\"target\" id=\"classBits_1acd49fedc2c4bf473cf91f4cac29a42d2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt64</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 64-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits8FindZeroEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits8FindZeroEK6size_t\">\n<span id=\"_CPPv3NK4Bits8FindZeroEK6size_t\"></span><span id=\"_CPPv2NK4Bits8FindZeroEK6size_t\"></span><span id=\"Bits::FindZero__sCC\"></span><span class=\"target\" id=\"classBits_1a2a2082dbc2f2bd0c3a6f2d36db7e580e\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindZero</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first zero after start_pos (or -1 if none) You can loop through all 0-bit positions of Bits object \u201cbits\u201d with: </p><p>for (int pos = bits.FindZero(); pos &gt;= 0; pos = bits.FindZero(pos+1)) { \u2026 }</p><p>Return the position of the first zero after start_pos; return -1 if no zeroes in vector. You can loop through all 0-bit positions in \u201cbits\u201d with:</p><p>for (int pos = bits.FindZero(); pos &gt;= 0; pos = bits.FindZero(pos+1)) { \u2026 } </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits10PrintDebugERNSt7ostreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits10PrintDebugERNSt7ostreamERKNSt6stringE\">\n<span id=\"_CPPv3NK4Bits10PrintDebugERNSt7ostreamERKNSt6stringE\"></span><span id=\"_CPPv2NK4Bits10PrintDebugERNSt7ostreamERKNSt6stringE\"></span><span id=\"Bits::PrintDebug__osR.ssCRC\"></span><span class=\"target\" id=\"classBits_1a433718e1e4bbee034868e0de77676283\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintDebug</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">label</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print out details about the internals of Bits. </p><p>Print a space between each field (or other provided spacer) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArrayixE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayixE6size_t\">\n<span id=\"_CPPv3N3old8BitArrayixE6size_t\"></span><span id=\"_CPPv2N3old8BitArrayixE6size_t\"></span><span id=\"old::BitArray::subscript-operator__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a40e2511ecc30ebed42a52ea849a01690\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">BitProxy</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray6this_tE\" title=\"old::BitArray::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">[]</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Index into a BitArray, returning a proxy that will allow bit assignment to work. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7FindBitEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7FindBitEv\">\n<span id=\"_CPPv3NK3old9BitVector7FindBitEv\"></span><span id=\"_CPPv2NK3old9BitVector7FindBitEv\"></span><span id=\"old::BitVector::FindBitC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ac49861ffc8deff0aab6c0d3b6e8aecd9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Deprecated: Return the position of the first one; return -1 if no ones in vector. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9FIELD_255E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9FIELD_255E\">\n<span id=\"_CPPv3N3old9BitVector9FIELD_255E\"></span><span id=\"_CPPv2N3old9BitVector9FIELD_255E\"></span><span id=\"old::BitVector::FIELD_255__field_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a47f2f6aa41eea9830e25b2f9329cf38a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_255</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">255</span></span><br/></dt><dd><p>Least significant 8 bits set to 1. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits14GetUInt16AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits14GetUInt16AtBitE6size_t\">\n<span id=\"_CPPv3NK4Bits14GetUInt16AtBitE6size_t\"></span><span id=\"_CPPv2NK4Bits14GetUInt16AtBitE6size_t\"></span><span id=\"Bits::GetUInt16AtBit__sC\"></span><span class=\"target\" id=\"classBits_1a86bce8d8446f7680947692263ff460a5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt16AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 16-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix4bitsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix4bitsE\">\n<span id=\"_CPPv3N9BitMatrix4bitsE\"></span><span id=\"_CPPv2N9BitMatrix4bitsE\"></span><span id=\"BitMatrix::bits__BitSet:COLS-*-ROWS:\"></span><span class=\"target\" id=\"classBitMatrix_1a48729baeb4638f6b0dca7c58090f78bf\"></span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4I_6size_tE6BitSet\" title=\"BitSet\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::COLS\"><span class=\"n\"><span class=\"pre\">COLS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::ROWS\"><span class=\"n\"><span class=\"pre\">ROWS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">bits</span></span></span><br/></dt><dd><p>Actual bits in matrix. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7FIELD_1E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7FIELD_1E\">\n<span id=\"_CPPv3N3old9BitVector7FIELD_1E\"></span><span id=\"_CPPv2N3old9BitVector7FIELD_1E\"></span><span id=\"old::BitVector::FIELD_1__field_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a29e45311cbc7dd1e67c039bfbb177efa\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_1</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">1</span></span><br/></dt><dd><p>Least significant bit set to 1. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector4backEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector4backEv\">\n<span id=\"_CPPv3NK3old9BitVector4backEv\"></span><span id=\"_CPPv2NK3old9BitVector4backEv\"></span><span id=\"old::BitVector::backC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ad22312df7aa44d92421376b6dee4c81b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">back</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray11PrintFieldsERNSt7ostreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray11PrintFieldsERNSt7ostreamERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray11PrintFieldsERNSt7ostreamERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray11PrintFieldsERNSt7ostreamERKNSt6stringE\"></span><span id=\"old::BitArray::PrintFields__osR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7e8735008b9541544a71dcff637a3963\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintFields</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print a space between each field (or other provided spacer) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVectoraNERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVectoraNERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVectoraNERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVectoraNERK9BitVector\"></span><span id=\"old::BitVector::and-assign-operator__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a7111466e4d9f40a3a7d71fc47b3cc172\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise AND\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector5ClearEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector5ClearEv\">\n<span id=\"_CPPv3N3old9BitVector5ClearEv\"></span><span id=\"_CPPv2N3old9BitVector5ClearEv\"></span><span id=\"old::BitVector::Clear\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a0ef97ceb77a3db4a0c4efedf1f91626b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits to 0. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9SetRandomER6RandomKdK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9SetRandomER6RandomKdK6size_t6size_t\">\n<span id=\"_CPPv3N3old9BitVector9SetRandomER6RandomKdK6size_t6size_t\"></span><span id=\"_CPPv2N3old9BitVector9SetRandomER6RandomKdK6size_t6size_t\"></span><span id=\"old::BitVector::SetRandom__RandomR.doubleC.sC.s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a1b0b5b030457fbd15147ab2a6565a8ea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector8MAX_BITSE\" title=\"old::BitVector::MAX_BITS\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set random bits with a given probability (does not check if already set.) </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4I_6size_t_6size_tE9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_6size_tE9BitMatrix\">\n<span id=\"_CPPv3I_6size_t_6size_tE9BitMatrix\"></span><span id=\"_CPPv2I_6size_t_6size_tE9BitMatrix\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">COLS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROWS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBitMatrix\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></span><br/></dt><dd><p>A simple class to manage a COLS x ROWS matrix of bits.</p><p>Bits are translated to a bitset with 0 in the upper left and moving through bits from left to right and top to bottom. For example, the indices in a 3x3 bit matrix would be organized as such:</p><p>0 1 2 3 4 5 6 7 8 </p></dd>", "a[href=\"api/BitArray.html#_CPPv43old\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43old\">\n<span id=\"_CPPv33old\"></span><span id=\"_CPPv23old\"></span><span id=\"old\"></span><span class=\"target\" id=\"namespaceold\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">old</span></span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector10PrintArrayERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector10PrintArrayERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old9BitVector10PrintArrayERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old9BitVector10PrintArrayERNSt7ostreamE\"></span><span id=\"old::BitVector::PrintArray__osRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae7e95ac424b03595b0e440eb66ad4db3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print from smallest bit position to largest. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9FieldSpanEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9FieldSpanEv\">\n<span id=\"_CPPv3NK4Bits9FieldSpanEv\"></span><span id=\"_CPPv2NK4Bits9FieldSpanEv\"></span><span id=\"Bits::FieldSpanC\"></span><span class=\"target\" id=\"classBits_1a7e44e6ff253bfb7002b535d5044ac295\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">span</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldSpan</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return a const span with all fields in order. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bEN4Bits7RawCopyEvRK4BitsI7DATA2_T10ZERO_LEFT2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bEN4Bits7RawCopyEvRK4BitsI7DATA2_T10ZERO_LEFT2E\">\n<span id=\"_CPPv3I0_bEN4Bits7RawCopyERK4BitsI7DATA2_T10ZERO_LEFT2E\"></span><span id=\"_CPPv2I0_bEN4Bits7RawCopyERK4BitsI7DATA2_T10ZERO_LEFT2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a12b93001b9a9f70119e6be583836bc1b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawCopy</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits7RawCopyEvRK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::RawCopy::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits7RawCopyEvRK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::RawCopy::ZERO_LEFT2\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits14SetUInt64AtBitEK6size_t8uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits14SetUInt64AtBitEK6size_t8uint64_t\">\n<span id=\"_CPPv3N4Bits14SetUInt64AtBitEK6size_t8uint64_t\"></span><span id=\"_CPPv2N4Bits14SetUInt64AtBitEK6size_t8uint64_t\"></span><span id=\"Bits::SetUInt64AtBit__sC.uint64_t\"></span><span class=\"target\" id=\"classBits_1a65c1b8411ef48e9028999d5fb4cf6df6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt64AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 64-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits18LongestSegmentOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits18LongestSegmentOnesEv\">\n<span id=\"_CPPv3NK4Bits18LongestSegmentOnesEv\"></span><span id=\"_CPPv2NK4Bits18LongestSegmentOnesEv\"></span><span id=\"Bits::LongestSegmentOnesC\"></span><span class=\"target\" id=\"classBits_1a155d9a5d42b98720b3b1b8ba360f0654\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">LongestSegmentOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find the length of the longest continuous series of ones. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0ENK4Bits6ExportE5OUT_T6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK4Bits6ExportE5OUT_T6size_t6size_t\">\n<span id=\"_CPPv3I0ENK4Bits6ExportE6size_t6size_t\"></span><span id=\"_CPPv2I0ENK4Bits6ExportE6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OUT_T</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/Bits_Data.html#_CPPv416Bits_DynamicData\" title=\"Bits_DynamicData\"><span class=\"n\"><span class=\"pre\">Bits_DynamicData</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a45c538fbc1922d25fb690d7e0cd37134\"></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK4Bits6ExportE5OUT_T6size_t6size_t\" title=\"Bits::Export::OUT_T\"><span class=\"n\"><span class=\"pre\">OUT_T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Export</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">out_size</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert to a Bits of a different size. </p><p>Convert to a Bitset of a different size. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits8RawBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits8RawBytesEv\">\n<span id=\"_CPPv3NK4Bits8RawBytesEv\"></span><span id=\"_CPPv2NK4Bits8RawBytesEv\"></span><span id=\"Bits::RawBytesC\"></span><span class=\"target\" id=\"classBits_1a80943b1368b91177793390ab974c9bb7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get a read-only pointer to the internal array used by Bits. (note that bits are NOT in order at the byte level!) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits8GetValueEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits8GetValueEv\">\n<span id=\"_CPPv3NK4Bits8GetValueEv\"></span><span id=\"_CPPv2NK4Bits8GetValueEv\"></span><span id=\"Bits::GetValueC\"></span><span class=\"target\" id=\"classBits_1acd4454a64bfd28b69636fa2e3ee6a0b9\"></span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValue</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get overall base-2 value of this Bits, returning as a double. </p><p>Get the overall value of this BitSet, using a uint encoding, but including all bits and returning the value as a double. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector2atE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector2atE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector2atE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector2atE6size_t\"></span><span id=\"old::BitVector::at__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a8c81cc3af1a87966c92cbee6b940ebfd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">at</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9MaskFieldE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9MaskFieldE6size_t6size_t\">\n<span id=\"_CPPv3NK4Bits9MaskFieldE6size_t6size_t\"></span><span id=\"_CPPv2NK4Bits9MaskFieldE6size_t6size_t\"></span><span id=\"Bits::MaskField__s.sCCE\"></span><span class=\"target\" id=\"classBits_1ad8bbdad0959e5fa462c9c5a6b8226338\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaskField</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">mask_size</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">offset</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrixeqERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrixeqERK9BitMatrix\">\n<span id=\"_CPPv3NK9BitMatrixeqERK9BitMatrix\"></span><span id=\"_CPPv2NK9BitMatrixeqERK9BitMatrix\"></span><span id=\"BitMatrix::eq-operator__BitMatrixCRC\"></span><span class=\"target\" id=\"classBitMatrix_1a6744e3e8b777d211114adbe669cebc8d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">==</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray5SHIFTEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray5SHIFTEKi\">\n<span id=\"_CPPv3NK3old8BitArray5SHIFTEKi\"></span><span id=\"_CPPv2NK3old8BitArray5SHIFTEKi\"></span><span id=\"old::BitArray::SHIFT__iCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a67d18cc358deae02aeffeb643c440121\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SHIFT</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Positive shifts go right and negative shifts go left (0 does nothing); return result. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8EQU_SELFERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8EQU_SELFERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVector8EQU_SELFERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVector8EQU_SELFERK9BitVector\"></span><span id=\"old::BitVector::EQU_SELF__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a291f20add724eb6b614d320b2e08afc7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EQU_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean EQU with this BitVector, store result here, and return this object. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8END_MASKE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8END_MASKE\">\n<span id=\"_CPPv3N3old8BitArray8END_MASKE\"></span><span id=\"_CPPv2N3old8BitArray8END_MASKE\"></span><span id=\"old::BitArray::END_MASK__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afbf653dd1a7cdebe51ca45f9651a4c85\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">END_MASK</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/bitset_utils.html#_CPPv4I0E7MaskLow4TYPENSt6size_tE\" title=\"MaskLow\"><span class=\"n\"><span class=\"pre\">MaskLow</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray12NUM_END_BITSE\" title=\"old::BitArray::NUM_END_BITS\"><span class=\"n\"><span class=\"pre\">NUM_END_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6DeleteEK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6DeleteEK6size_tK6size_t\">\n<span id=\"_CPPv3N4Bits6DeleteEK6size_tK6size_t\"></span><span id=\"_CPPv2N4Bits6DeleteEK6size_tK6size_t\"></span><span id=\"Bits::Delete__sC.sC\"></span><span class=\"target\" id=\"classBits_1a77768f79e7272138cff6c4e60b43e934\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Delete</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Delete bits from any index in a vector. </p><p>\nDelete bits from any index in a vector. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9FieldSpanEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9FieldSpanEv\">\n<span id=\"_CPPv3N3old9BitVector9FieldSpanEv\"></span><span id=\"_CPPv2N3old9BitVector9FieldSpanEv\"></span><span id=\"old::BitVector::FieldSpan\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a717bfd485d7f4df555cf45bce2257e70\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">span</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldSpan</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return a span with all fields in order. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7FindOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7FindOneEv\">\n<span id=\"_CPPv3NK4Bits7FindOneEv\"></span><span id=\"_CPPv2NK4Bits7FindOneEv\"></span><span id=\"Bits::FindOneC\"></span><span class=\"target\" id=\"classBits_1ad80c3ac2aac44ca88036601acc01fe07\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first one; return -1 if no ones in vector. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6SetAllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6SetAllEv\">\n<span id=\"_CPPv3N4Bits6SetAllEv\"></span><span id=\"_CPPv2N4Bits6SetAllEv\"></span><span id=\"Bits::SetAll\"></span><span class=\"target\" id=\"classBits_1ac75804ccb91344d71d5caedbcc4c0d88\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetAll</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits to 1. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3SUBERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3SUBERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3SUBERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3SUBERK8BitArray\"></span><span id=\"old::BitArray::SUB__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa27b45a4109f12a382cb2071eac2355b\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SUB</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Subtraction of two BitArrays. Wraps around if it underflows. Returns result. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3EQUERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3EQUERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVector3EQUERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVector3EQUERK9BitVector\"></span><span id=\"old::BitVector::EQU__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aadb628bb6968830725cee4f7ef69cb54\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EQU</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean EQU on this BitVector and return the result. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorEPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorEPKc\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorEPKc\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorEPKc\"></span><span id=\"old::BitVector::BitVector__cCP\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3906dc88fee2f7e39bcccac6f4514b64\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a BitVector from a literal string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray6ToggleE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6ToggleE6size_t\">\n<span id=\"_CPPv3N3old8BitArray6ToggleE6size_t\"></span><span id=\"_CPPv2N3old8BitArray6ToggleE6size_t\"></span><span id=\"old::BitArray::Toggle__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac9358d53fe65b2fbcc3ba052171ad0bf\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip a single bit. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3AllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3AllEv\">\n<span id=\"_CPPv3NK3old8BitArray3AllEv\"></span><span id=\"_CPPv2NK3old8BitArray3AllEv\"></span><span id=\"old::BitArray::AllC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a87e37b67c683c87276fb7d4f5dc8e761\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">All</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if ALL bits in the BitArray are one, else return false. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArrayeoERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayeoERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArrayeoERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArrayeoERK8BitArray\"></span><span id=\"old::BitArray::xor-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a0180b751be8470fb4d2ed4b95631c5ce\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise XOR\u2026 </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix9BitMatrixEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix9BitMatrixEv\">\n<span id=\"_CPPv3N9BitMatrix9BitMatrixEv\"></span><span id=\"_CPPv2N9BitMatrix9BitMatrixEv\"></span><span id=\"BitMatrix::BitMatrix\"></span><span class=\"target\" id=\"classBitMatrix_1ada26fa79273ddce22a0ab18c2f9ac97a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray14SetUInt16AtBitEK6size_t8uint16_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray14SetUInt16AtBitEK6size_t8uint16_t\">\n<span id=\"_CPPv3N3old8BitArray14SetUInt16AtBitEK6size_t8uint16_t\"></span><span id=\"_CPPv2N3old8BitArray14SetUInt16AtBitEK6size_t8uint16_t\"></span><span id=\"old::BitArray::SetUInt16AtBit__sC.uint16_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa545ee5099b799501cba1d22faf5166a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt16AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 16-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3ADDERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3ADDERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVector3ADDERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVector3ADDERK9BitVector\"></span><span id=\"old::BitVector::ADD__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae91e35a0be9a1070f76b9fcdcd6c6f69\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ADD</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">set2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Addition of two BitVectors. Wraps if it overflows. Returns result.</p><p>Addition of two Bitsets. Wraps if it overflows. Returns result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray9GetUInt16E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9GetUInt16E6size_t\">\n<span id=\"_CPPv3NK3old8BitArray9GetUInt16E6size_t\"></span><span id=\"_CPPv2NK3old8BitArray9GetUInt16E6size_t\"></span><span id=\"old::BitArray::GetUInt16__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afd0badb711750acbae725e37948436b0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt16</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 16-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3XORERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3XORERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3XORERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3XORERK8BitArray\"></span><span id=\"old::BitArray::XOR__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8f6fd71dfa33f16b0823ef244dcd0334\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">XOR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean XOR with a second BitArray and return the result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7FIELD_1E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7FIELD_1E\">\n<span id=\"_CPPv3N4Bits7FIELD_1E\"></span><span id=\"_CPPv2N4Bits7FIELD_1E\"></span><span id=\"Bits::FIELD_1__field_t\"></span><span class=\"target\" id=\"classBits_1a83d3e645ef396ed45d9f75a8215e267a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_1</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">1</span></span><br/></dt><dd><p>Least significant bit set to 1. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray5ClearEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5ClearEv\">\n<span id=\"_CPPv3N3old8BitArray5ClearEv\"></span><span id=\"_CPPv2N3old8BitArray5ClearEv\"></span><span id=\"old::BitArray::Clear\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8873cb619abe3bafd046d83f9c68df01\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Set all bits to zero. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8SetUInt8EK6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8SetUInt8EK6size_t7uint8_t\">\n<span id=\"_CPPv3N3old9BitVector8SetUInt8EK6size_t7uint8_t\"></span><span id=\"_CPPv2N3old9BitVector8SetUInt8EK6size_t7uint8_t\"></span><span id=\"old::BitVector::SetUInt8__sC.uint8_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a1cdef238ba36c2d36e630639ec5f497c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt8</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 8-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits3SetE6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits3SetE6size_tb\">\n<span id=\"_CPPv3N4Bits3SetE6size_tb\"></span><span id=\"_CPPv2N4Bits3SetE6size_tb\"></span><span id=\"Bits::Set__s.b\"></span><span class=\"target\" id=\"classBits_1a3d7437ca5af25ee514a70ab4e18f1456\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the bit value at the specified index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3allEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3allEv\">\n<span id=\"_CPPv3NK3old9BitVector3allEv\"></span><span id=\"_CPPv2NK3old9BitVector3allEv\"></span><span id=\"old::BitVector::allC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab395e98ecd7de6d295cc56fb29753e0f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">all</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix8ClearColE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix8ClearColE6size_t\">\n<span id=\"_CPPv3N9BitMatrix8ClearColE6size_t\"></span><span id=\"_CPPv2N9BitMatrix8ClearColE6size_t\"></span><span id=\"BitMatrix::ClearCol__s\"></span><span class=\"target\" id=\"classBitMatrix_1a925d83557043a04863f5d20c19dd217f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearCol</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">col</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix9CountOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix9CountOnesEv\">\n<span id=\"_CPPv3NK9BitMatrix9CountOnesEv\"></span><span id=\"_CPPv2NK9BitMatrix9CountOnesEv\"></span><span id=\"BitMatrix::CountOnesC\"></span><span class=\"target\" id=\"classBitMatrix_1a4c9173d5398ec2b8faaac8513b83265a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of set bits in the matrix. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits5SHIFTEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits5SHIFTEKi\">\n<span id=\"_CPPv3NK4Bits5SHIFTEKi\"></span><span id=\"_CPPv2NK4Bits5SHIFTEKi\"></span><span id=\"Bits::SHIFT__iCC\"></span><span class=\"target\" id=\"classBits_1a98abd60d78b586023ad89adca301fa28\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SHIFT</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Positive shifts left and negative right (0 does nothing); return result. </p><p>Positive shifts go left and negative go right (0 does nothing); return result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray4testE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4testE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray4testE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray4testE6size_t\"></span><span id=\"old::BitArray::test__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac0afad9d99cc50c47c08d4afdca222eb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">test</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9FIELD_ALLE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9FIELD_ALLE\">\n<span id=\"_CPPv3N3old8BitArray9FIELD_ALLE\"></span><span id=\"_CPPv2N3old8BitArray9FIELD_ALLE\"></span><span id=\"old::BitArray::FIELD_ALL__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1add437d171673fa499738118d41987b95\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_ALL</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">~</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7FIELD_0E\" title=\"old::BitArray::FIELD_0\"><span class=\"n\"><span class=\"pre\">FIELD_0</span></span></a><br/></dt><dd><p>All bits in a field set to 1. </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E10count_bits6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E10count_bits6size_t1T\">\n<span id=\"_CPPv3I0E10count_bits1T\"></span><span id=\"_CPPv2I0E10count_bits1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1a0802c2874c664d19fd91a6e7cde25e67\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">count_bits</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E10count_bits6size_t1T\" title=\"count_bits::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Count the number of bits in an unsigned integer. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9SetUInt16EK6size_t8uint16_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9SetUInt16EK6size_t8uint16_t\">\n<span id=\"_CPPv3N3old9BitVector9SetUInt16EK6size_t8uint16_t\"></span><span id=\"_CPPv2N3old9BitVector9SetUInt16EK6size_t8uint16_t\"></span><span id=\"old::BitVector::SetUInt16__sC.uint16_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a9964b0fcd3c5f095d2a53cf4a852f13a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt16</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 16-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector5ClearE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector5ClearE6size_t\">\n<span id=\"_CPPv3N3old9BitVector5ClearE6size_t\"></span><span id=\"_CPPv2N3old9BitVector5ClearE6size_t\"></span><span id=\"old::BitVector::Clear__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a6cb55f16b1084ea5f548480baf5557c0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set specific bit to 0. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitsmiERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitsmiERK4Bits\">\n<span id=\"_CPPv3NK4BitsmiERK4Bits\"></span><span id=\"_CPPv2NK4BitsmiERK4Bits\"></span><span id=\"Bits::sub-operator__BitsCRC\"></span><span class=\"target\" id=\"classBits_1a5d1109922af027ca6b3d44d5f85834af\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">-</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator minus\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector4sizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector4sizeEv\">\n<span id=\"_CPPv3NK3old9BitVector4sizeEv\"></span><span id=\"_CPPv2NK3old9BitVector4sizeEv\"></span><span id=\"old::BitVector::sizeC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aefeab42b772145cfc57b2b28ec739cfc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">size</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8SUB_SELFERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8SUB_SELFERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVector8SUB_SELFERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVector8SUB_SELFERK9BitVector\"></span><span id=\"old::BitVector::SUB_SELF__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a42403df1a8abdb3772377add0e89dbbf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SUB_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">set2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Subtraction of two BitVectors. Wraps if it underflows. Returns this object.</p><p>Subtraction of two Bitsets. Wraps if it underflows. Returns this object. </p></dd>", "a[href=\"api/BitVector.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">BitVector.hpp<a class=\"headerlink\" href=\"#bitvector-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A drop-in replacement for std::vector&lt;bool&gt;, with additional bitwise logic features. Status: RELEASE. </p><p><dl>\n<dt class=\"sig sig-object cpp\">\n<em><span class=\"pre\">Todo:</span></em></dt>\n<dd><p>Most of the operators don\u2019t check to make sure that both BitVectors are the same size. We should create versions (Intersection() and Union()?) that adjust sizes if needed. </p>\n<p>For large BitVectors we can use a factory to preserve/adjust bit info. That should be just as efficient than a reserve, but without the need to store extra in-class info. </p>\n<p>Implement append(), resize(), push_bit(), insert(), remove() </p>\n<p>Think about how iterators should work for BitVector. It should probably go bit-by-bit, but there are very few circumstances where that would be useful. Going through the positions of all ones would be more useful, but perhaps less intuitive.</p>\n</dd></dl>\n</p>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray9GetUInt64E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9GetUInt64E6size_t\">\n<span id=\"_CPPv3NK3old8BitArray9GetUInt64E6size_t\"></span><span id=\"_CPPv2NK3old8BitArray9GetUInt64E6size_t\"></span><span id=\"old::BitArray::GetUInt64__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa8f1ade7a0064fe0b3cb447865c9c4d1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt64</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 64-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8BitArrayER6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayER6Random\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayER6Random\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayER6Random\"></span><span id=\"old::BitArray::BitArray__RandomR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8ecd38c291d0e97d96018dae8f795050\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitArray (with equal prob of 0 or 1). </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits10FIELD_LOG2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits10FIELD_LOG2E\">\n<span id=\"_CPPv3N4Bits10FIELD_LOG2E\"></span><span id=\"_CPPv2N4Bits10FIELD_LOG2E\"></span><span id=\"Bits::FIELD_LOG2__s\"></span><span class=\"target\" id=\"classBits_1af3a38bd50da30c6b7db37ac73e6550b9\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">static_cast</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"../math/api/math.html#_CPPv44Log2d\" title=\"Log2\"><span class=\"n\"><span class=\"pre\">Log2</span></span></a><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N4Bits10FIELD_BITSE\" title=\"Bits::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix5ToColE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix5ToColE6size_t\">\n<span id=\"_CPPv3N9BitMatrix5ToColE6size_t\"></span><span id=\"_CPPv2N9BitMatrix5ToColE6size_t\"></span><span id=\"BitMatrix::ToCol__s\"></span><span class=\"target\" id=\"classBitMatrix_1aba7fb8674b1814e3dc2b3138d9e44ef1\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToCol</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Identify which column a specific ID is part of. </p></dd>", "a[href=\"api/Bits_Data.html#_CPPv418Bits_WatermarkData\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv418Bits_WatermarkData\">\n<span id=\"_CPPv318Bits_WatermarkData\"></span><span id=\"_CPPv218Bits_WatermarkData\"></span><span class=\"target\" id=\"Bits__Data_8hpp_1a4985365e2ae07b1dc7b6230f30896a5e\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits_WatermarkData</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">internal</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">Bits_Data</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">internal</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">Bits_Data_Mem_Watermark</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits8FindZeroEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits8FindZeroEv\">\n<span id=\"_CPPv3NK4Bits8FindZeroEv\"></span><span id=\"_CPPv2NK4Bits8FindZeroEv\"></span><span id=\"Bits::FindZeroC\"></span><span class=\"target\" id=\"classBits_1af0be403ec19e4e9449be841375d1c562\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindZero</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first zero; return -1 if no zeroes in vector. </p><p>Return the position of the first zero; return -1 if no zeros in vector. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitsrsEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitsrsEK6size_t\">\n<span id=\"_CPPv3NK4BitsrsEK6size_t\"></span><span id=\"_CPPv2NK4BitsrsEK6size_t\"></span><span id=\"Bits::rshift-operator__sCC\"></span><span class=\"target\" id=\"classBits_1a00f0f633273db0c3e2014856e2cad0f3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator shift right\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorERK9BitVector\"></span><span id=\"old::BitVector::BitVector__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a687bba5283ec4ddd9d9bad2b7b325d1b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector9BitVectorERK9BitVector\" title=\"old::BitVector::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Copy constructor of existing bit field. </p></dd>", "a[href=\"api/Bits_Data.html#_CPPv4N8BitsMode5FIXEDE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8BitsMode5FIXEDE\">\n<span id=\"_CPPv3N8BitsMode5FIXEDE\"></span><span id=\"_CPPv2N8BitsMode5FIXEDE\"></span><span class=\"target\" id=\"Bits__Data_8hpp_1af31ec97e6be574fed2c89681498298a7ac6e6dc18b53b4c2681394b9d8aefcec7\"></span><span class=\"k\"><span class=\"pre\">enumerator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIXED</span></span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6ToggleE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6ToggleE6size_t6size_t\">\n<span id=\"_CPPv3N3old9BitVector6ToggleE6size_t6size_t\"></span><span id=\"_CPPv2N3old9BitVector6ToggleE6size_t6size_t\"></span><span id=\"old::BitVector::Toggle__s.s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ac6683423a61e98c0f071020326bef61a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flips all the bits in a range [start, end) </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix9BitMatrixERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix9BitMatrixERK9BitMatrix\">\n<span id=\"_CPPv3N9BitMatrix9BitMatrixERK9BitMatrix\"></span><span id=\"_CPPv2N9BitMatrix9BitMatrixERK9BitMatrix\"></span><span id=\"BitMatrix::BitMatrix__BitMatrixCR\"></span><span class=\"target\" id=\"classBitMatrix_1aeb25da25d1353ec5302789f91efff6d5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N9BitMatrix9BitMatrixERK9BitMatrix\" title=\"BitMatrix::BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_matrix</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8SetRangeE6size_t6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8SetRangeE6size_t6size_tb\">\n<span id=\"_CPPv3N3old9BitVector8SetRangeE6size_t6size_tb\"></span><span id=\"_CPPv2N3old9BitVector8SetRangeE6size_t6size_tb\"></span><span id=\"old::BitVector::SetRange__s.s.b\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a18f6e66efb0ec385501131c43dc84857\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set a range of bits to value (default one): [start, stop) </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits12SetUIntAtBitEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits12SetUIntAtBitEK6size_t8uint32_t\">\n<span id=\"_CPPv3N4Bits12SetUIntAtBitEK6size_t8uint32_t\"></span><span id=\"_CPPv2N4Bits12SetUIntAtBitEK6size_t8uint32_t\"></span><span id=\"Bits::SetUIntAtBit__sC.uint32_t\"></span><span class=\"target\" id=\"classBits_1a62c0c505bba908276161b6031caf0945\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUIntAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>By default, update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I0ENK3old8BitArray13GetValueAtBitE1TK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK3old8BitArray13GetValueAtBitE1TK6size_t\">\n<span id=\"_CPPv3I0ENK3old8BitArray13GetValueAtBitEK6size_t\"></span><span id=\"_CPPv2I0ENK3old8BitArray13GetValueAtBitEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a57c9a30e0e2623573574adc6c6a1b3da\"></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK3old8BitArray13GetValueAtBitE1TK6size_t\" title=\"old::BitArray::GetValueAtBit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValueAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get specified type starting at a given BIT position. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsERR6this_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsERR6this_t\">\n<span id=\"_CPPv3N4Bits4BitsERR6this_t\"></span><span id=\"_CPPv2N4Bits4BitsERR6this_t\"></span><span id=\"Bits::Bits__this_tRR\"></span><span class=\"target\" id=\"classBits_1ab2e50d5632099df8d5852c434ca04505\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4N4Bits6this_tE\" title=\"Bits::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd><p>Move constructor of existing bit field. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6PopBitEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6PopBitEv\">\n<span id=\"_CPPv3N4Bits6PopBitEv\"></span><span id=\"_CPPv2N4Bits6PopBitEv\"></span><span id=\"Bits::PopBit\"></span><span class=\"target\" id=\"classBits_1a4a727b7233deb49ce91fec6e630468b5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Deprecated version of PopOne(). </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix8GetReachEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix8GetReachEv\">\n<span id=\"_CPPv3NK9BitMatrix8GetReachEv\"></span><span id=\"_CPPv2NK9BitMatrix8GetReachEv\"></span><span id=\"BitMatrix::GetReachC\"></span><span class=\"target\" id=\"classBitMatrix_1a73b4b96bd2e8db38f92436e21bd5de61\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetReach</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find all points within one step of the ones on this bit matrix. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7PopBackEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7PopBackEv\">\n<span id=\"_CPPv3N3old9BitVector7PopBackEv\"></span><span id=\"_CPPv2N3old9BitVector7PopBackEv\"></span><span id=\"old::BitVector::PopBack\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3de7a336cd9cc8f88987f2f3b11ee660\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopBack</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Pop the last bit in the vector. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix7NumColsEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix7NumColsEv\">\n<span id=\"_CPPv3NK9BitMatrix7NumColsEv\"></span><span id=\"_CPPv2NK9BitMatrix7NumColsEv\"></span><span id=\"BitMatrix::NumColsCCE\"></span><span class=\"target\" id=\"classBitMatrix_1a82eeec3945ae26d98f24cf2754c653c2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NumCols</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many columns are in this matrix? </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3allEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3allEv\">\n<span id=\"_CPPv3NK4Bits3allEv\"></span><span id=\"_CPPv2NK4Bits3allEv\"></span><span id=\"Bits::allCCE\"></span><span class=\"target\" id=\"classBits_1a56453590d269543b78b7823a101f172c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">all</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray5resetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5resetE6size_t\">\n<span id=\"_CPPv3N3old8BitArray5resetE6size_t\"></span><span id=\"_CPPv2N3old8BitArray5resetE6size_t\"></span><span id=\"old::BitArray::reset__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a81b95d806e83288c23198dfea236609b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9RandomizeER6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9RandomizeER6Random\">\n<span id=\"_CPPv3N3old8BitArray9RandomizeER6Random\"></span><span id=\"_CPPv2N3old8BitArray9RandomizeER6Random\"></span><span id=\"old::BitArray::Randomize__RandomR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af008df7bfd9ccccc9b742a0b6fe4ae51\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Randomize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a 50% probability of being a 0 or 1. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray11GetNumBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11GetNumBytesEv\">\n<span id=\"_CPPv3N3old8BitArray11GetNumBytesEv\"></span><span id=\"_CPPv2N3old8BitArray11GetNumBytesEv\"></span><span id=\"old::BitArray::GetNumBytesCE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a4084acca2eecde2ba624ca196eff3a47\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNumBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>How many bytes are in this BitArray? </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3NK3old9BitVector12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2NK3old9BitVector12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"></span><span id=\"old::BitVector::PrintAsRange__osR.ssCR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1abb6b518cb0a8a0dba735b26511bdb2fa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintAsRange</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\",\"</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ranger</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"-\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print the ones in a range format. E.g., 2-5,7,10-15. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENK4BitsgeEbRK4BitsI7DATA2_T3ZL2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENK4BitsgeEbRK4BitsI7DATA2_T3ZL2E\">\n<span id=\"_CPPv3I0_bENK4BitsgeERK4BitsI7DATA2_T3ZL2E\"></span><span id=\"_CPPv2I0_bENK4BitsgeERK4BitsI7DATA2_T3ZL2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a72bfb3127045d8e0bb61bc036f0e6f99\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsgeEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator&gt;=::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsgeEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator&gt;=::ZL2\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray7REVERSEEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7REVERSEEv\">\n<span id=\"_CPPv3NK3old8BitArray7REVERSEEv\"></span><span id=\"_CPPv2NK3old8BitArray7REVERSEEv\"></span><span id=\"old::BitArray::REVERSEC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a563345ba4e2cf5ada8d8cb0166ec2dba\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">REVERSE</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Reverse order of bits in the BitArray. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9push_backEKbK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9push_backEKbK6size_t\">\n<span id=\"_CPPv3N4Bits9push_backEKbK6size_t\"></span><span id=\"_CPPv2N4Bits9push_backEKbK6size_t\"></span><span id=\"Bits::push_back__bC.sC\"></span><span class=\"target\" id=\"classBits_1a3dd786d964074538ce70aff5efb85fb8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">push_back</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector14SetUInt16AtBitEK6size_t8uint16_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector14SetUInt16AtBitEK6size_t8uint16_t\">\n<span id=\"_CPPv3N3old9BitVector14SetUInt16AtBitEK6size_t8uint16_t\"></span><span id=\"_CPPv2N3old9BitVector14SetUInt16AtBitEK6size_t8uint16_t\"></span><span id=\"old::BitVector::SetUInt16AtBit__sC.uint16_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a4961afae577fe2f687fa283b12bde776\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt16AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 16-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI6DATA_T9ZERO_LEFTE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI6DATA_T9ZERO_LEFTE\">\n<span id=\"_CPPv3I0_bENR4BitsaSERK4BitsI6DATA_T9ZERO_LEFTE\"></span><span id=\"_CPPv2I0_bENR4BitsaSERK4BitsI6DATA_T9ZERO_LEFTE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a6ead3fba448845cda8f44174868e42db\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI6DATA_T9ZERO_LEFTE\" title=\"Bits::operator=::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI6DATA_T9ZERO_LEFTE\" title=\"Bits::operator=::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI6DATA_T9ZERO_LEFTE\" title=\"Bits::operator=::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI6DATA_T9ZERO_LEFTE\" title=\"Bits::operator=::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Copy assignment operator. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I_6size_tE8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tE8BitArray\">\n<span id=\"_CPPv3I_6size_tE8BitArray\"></span><span id=\"_CPPv2I_6size_tE8BitArray\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"Bits_8hpp_1a39d3ab7f966a4fdb613b405f00c1077b\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/Bits_Data.html#_CPPv4I_6size_tE14Bits_FixedData\" title=\"Bits_FixedData\"><span class=\"n\"><span class=\"pre\">Bits_FixedData</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tE8BitArray\" title=\"BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray3SetE6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray3SetE6size_tb\">\n<span id=\"_CPPv3N3old8BitArray3SetE6size_tb\"></span><span id=\"_CPPv2N3old8BitArray3SetE6size_tb\"></span><span id=\"old::BitArray::Set__s.b\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a5dd87fb46f968c5bb5dc85299e94306b\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set the bit at a specified index. </p></dd>", "a[href=\"api/Bits.html#_CPPv49BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49BitVector\">\n<span id=\"_CPPv39BitVector\"></span><span id=\"_CPPv29BitVector\"></span><span class=\"target\" id=\"Bits_8hpp_1a5d2f930a5e5d86a910b3a02d7e94dd13\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/Bits_Data.html#_CPPv418Bits_WatermarkData\" title=\"Bits_WatermarkData\"><span class=\"n\"><span class=\"pre\">Bits_WatermarkData</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix3AnyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix3AnyEv\">\n<span id=\"_CPPv3NK9BitMatrix3AnyEv\"></span><span id=\"_CPPv2NK9BitMatrix3AnyEv\"></span><span id=\"BitMatrix::AnyC\"></span><span class=\"target\" id=\"classBitMatrix_1a560241dce1b25d4b6d445b029358c41f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Any</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7field_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7field_tE\">\n<span id=\"_CPPv3N3old9BitVector7field_tE\"></span><span id=\"_CPPv2N3old9BitVector7field_tE\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aeb1d425587708df9f3464546815c4cbc\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">field_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits4dataEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits4dataEv\">\n<span id=\"_CPPv3NK4Bits4dataEv\"></span><span id=\"_CPPv2NK4Bits4dataEv\"></span><span id=\"Bits::dataC\"></span><span class=\"target\" id=\"classBits_1a888d52477b7045b3aed8ab8286da7701\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">data</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bEN3old8BitArrayE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bEN3old8BitArrayE\">\n<span id=\"_CPPv3I_6size_t_bEN3old8BitArrayE\"></span><span id=\"_CPPv2I_6size_t_bEN3old8BitArrayE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><br/></dt><dd><p>A fixed-sized (but arbitrarily large) array of bits, and optimizes operations on those bits to be as fast as possible. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3NK4Bits12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2NK4Bits12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"></span><span id=\"Bits::PrintAsRange__osR.ssCR.ssCRC\"></span><span class=\"target\" id=\"classBits_1a18c1bf61a2cad67f21c50db78855d78f\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintAsRange</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\",\"</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ranger</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"-\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print the ones in a range format. E.g., 2-5,7,10-15. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray6ToggleE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6ToggleE6size_t6size_t\">\n<span id=\"_CPPv3N3old8BitArray6ToggleE6size_t6size_t\"></span><span id=\"_CPPv2N3old8BitArray6ToggleE6size_t6size_t\"></span><span id=\"old::BitArray::Toggle__s.s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a2b0abcaefe9df0eb45f751586e9531a0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flips all the bits in a range [start, stop) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7RawCopyEK3PtrI7field_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7RawCopyEK3PtrI7field_tE\">\n<span id=\"_CPPv3N3old9BitVector7RawCopyEK3PtrI7field_tE\"></span><span id=\"_CPPv2N3old9BitVector7RawCopyEK3PtrI7field_tE\"></span><span id=\"old::BitVector::RawCopy__Ptr:field_t:C\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ad5b5fa5eeef282608d0dc797b34bcdfb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawCopy</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector11PrintOneIDsERNSt7ostreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector11PrintOneIDsERNSt7ostreamERKNSt6stringE\">\n<span id=\"_CPPv3NK3old9BitVector11PrintOneIDsERNSt7ostreamERKNSt6stringE\"></span><span id=\"_CPPv2NK3old9BitVector11PrintOneIDsERNSt7ostreamERKNSt6stringE\"></span><span id=\"old::BitVector::PrintOneIDs__osR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ac5968e3bf1049a014f3d51e9cbe1eee7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintOneIDs</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print the positions of all one bits, spaces are the default separator. </p></dd>", "a[href=\"#api\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">API<a class=\"headerlink\" href=\"#api\" title=\"Link to this heading\">\uf0c1</a></h2>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray13SetUInt8AtBitEK6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray13SetUInt8AtBitEK6size_t7uint8_t\">\n<span id=\"_CPPv3N3old8BitArray13SetUInt8AtBitEK6size_t7uint8_t\"></span><span id=\"_CPPv2N3old8BitArray13SetUInt8AtBitEK6size_t7uint8_t\"></span><span id=\"old::BitArray::SetUInt8AtBit__sC.uint8_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a230f1976ba8606e03abb5e6b60ae8e06\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt8AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 8-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray3setEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray3setEv\">\n<span id=\"_CPPv3N3old8BitArray3setEv\"></span><span id=\"_CPPv2N3old8BitArray3setEv\"></span><span id=\"old::BitArray::set\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1fe28092dec036a5726e73bd6d028009\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">set</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray7FindOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7FindOneEv\">\n<span id=\"_CPPv3NK3old8BitArray7FindOneEv\"></span><span id=\"_CPPv2NK3old8BitArray7FindOneEv\"></span><span id=\"old::BitArray::FindOneC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab82382ab6cf415bcdad47f6fda7d0e4a\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first one; return -1 if no ones in vector. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bEN3old8BitArray6ImportER8BitArrayRK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bEN3old8BitArray6ImportER8BitArrayRK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\">\n<span id=\"_CPPv3I_6size_t_bEN3old8BitArray6ImportERK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\"></span><span id=\"_CPPv2I_6size_t_bEN3old8BitArray6ImportERK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FROM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FROM_LEFT</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a01f25a44d12b11f9017879ab95fb1302\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Import</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArray6ImportER8BitArrayRK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\" title=\"old::BitArray::Import::FROM_BITS\"><span class=\"n\"><span class=\"pre\">FROM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArray6ImportER8BitArrayRK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\" title=\"old::BitArray::Import::FROM_LEFT\"><span class=\"n\"><span class=\"pre\">FROM_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">from_bits</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Assignment from another BitArray of a different size. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix7FindOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix7FindOneEv\">\n<span id=\"_CPPv3NK9BitMatrix7FindOneEv\"></span><span id=\"_CPPv2NK9BitMatrix7FindOneEv\"></span><span id=\"BitMatrix::FindOneC\"></span><span class=\"target\" id=\"classBitMatrix_1a885e669b838763680d7f52e72e1d8f37\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find the position of the first non-zero bit. size_t FindOne() const { return (~bits &amp; (bits - 1)).count(); } </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVectorD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVectorD0Ev\">\n<span id=\"_CPPv3N3old9BitVectorD0Ev\"></span><span id=\"_CPPv2N3old9BitVectorD0Ev\"></span><span id=\"old::BitVector::~BitVector\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3fd62a48568fc4f9931dcb80c522b745\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Destructor. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector4flipE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector4flipE6size_t\">\n<span id=\"_CPPv3N3old9BitVector4flipE6size_t\"></span><span id=\"_CPPv2N3old9BitVector4flipE6size_t\"></span><span id=\"old::BitVector::flip__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a940f054dd4fd16d49318a1aeb6fe43ef\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray2OKEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray2OKEv\">\n<span id=\"_CPPv3NK3old8BitArray2OKEv\"></span><span id=\"_CPPv2NK3old8BitArray2OKEv\"></span><span id=\"old::BitArray::OKC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1ffe0624443d98510f55db7795ff05dc\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OK</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>For debugging: make sure that there are no obvious problems with a BitArray object. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix6SetRowE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix6SetRowE6size_t\">\n<span id=\"_CPPv3N9BitMatrix6SetRowE6size_t\"></span><span id=\"_CPPv2N9BitMatrix6SetRowE6size_t\"></span><span id=\"BitMatrix::SetRow__s\"></span><span class=\"target\" id=\"classBitMatrix_1a86093c51a86230d0f4795c1de53cce3c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRow</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">row</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/bitset_utils.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">bitset_utils.hpp<a class=\"headerlink\" href=\"#bitset-utils-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A set of simple functions to manipulate bitsets. </p>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7RawCopyEK6size_tK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7RawCopyEK6size_tK6size_tK6size_t\">\n<span id=\"_CPPv3N3old9BitVector7RawCopyEK6size_tK6size_tK6size_t\"></span><span id=\"_CPPv2N3old9BitVector7RawCopyEK6size_tK6size_tK6size_t\"></span><span id=\"old::BitVector::RawCopy__sC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab7a2a678cfe6ba7e12c1ceeec42de67d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawCopy</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_start</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_stop</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">to</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4flipE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4flipE6size_t6size_t\">\n<span id=\"_CPPv3N4Bits4flipE6size_t6size_t\"></span><span id=\"_CPPv2N4Bits4flipE6size_t6size_t\"></span><span id=\"Bits::flip__s.s\"></span><span class=\"target\" id=\"classBits_1a72fd882f3b43a9388a0a10d371dcd3fe\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">end</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9FIELD_ALLE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9FIELD_ALLE\">\n<span id=\"_CPPv3N3old9BitVector9FIELD_ALLE\"></span><span id=\"_CPPv2N3old9BitVector9FIELD_ALLE\"></span><span id=\"old::BitVector::FIELD_ALL__field_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a2726adb00f441a2861d6d5286365e81d\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_ALL</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">~</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7FIELD_0E\" title=\"old::BitVector::FIELD_0\"><span class=\"n\"><span class=\"pre\">FIELD_0</span></span></a><br/></dt><dd><p>All bits in a field set to 1. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7END_GAPE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7END_GAPE\">\n<span id=\"_CPPv3N3old8BitArray7END_GAPE\"></span><span id=\"_CPPv2N3old8BitArray7END_GAPE\"></span><span id=\"old::BitArray::END_GAP__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7a4d64a57f811b78b66b24e764a3b0c8\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">END_GAP</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray12NUM_END_BITSE\" title=\"old::BitArray::NUM_END_BITS\"><span class=\"n\"><span class=\"pre\">NUM_END_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">?</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_BITSE\" title=\"old::BitArray::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray12NUM_END_BITSE\" title=\"old::BitArray::NUM_END_BITS\"><span class=\"n\"><span class=\"pre\">NUM_END_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3NORERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3NORERK4Bits\">\n<span id=\"_CPPv3NK4Bits3NORERK4Bits\"></span><span id=\"_CPPv2NK4Bits3NORERK4Bits\"></span><span id=\"Bits::NOR__BitsCRC\"></span><span class=\"target\" id=\"classBits_1a92402e91ab1c0e5a11f039c3d569a887\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NOR on this Bits and return the result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8XOR_SELFERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8XOR_SELFERK4Bits\">\n<span id=\"_CPPv3N4Bits8XOR_SELFERK4Bits\"></span><span id=\"_CPPv2N4Bits8XOR_SELFERK4Bits\"></span><span id=\"Bits::XOR_SELF__BitsCR\"></span><span class=\"target\" id=\"classBits_1afbeaeb9933cc5655ba9624c76ad34dd5\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">XOR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean XOR with this Bits, store result here, and return this object. </p><p>Perform a Boolean XOR with this Bits object, store result here, and return this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9RandomizeER6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9RandomizeER6Random\">\n<span id=\"_CPPv3N3old9BitVector9RandomizeER6Random\"></span><span id=\"_CPPv2N3old9BitVector9RandomizeER6Random\"></span><span id=\"old::BitVector::Randomize__RandomR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae8a0b1957f3386371d649206168db88f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Randomize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a 50% probability of being a 0 or 1. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits3setEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits3setEv\">\n<span id=\"_CPPv3N4Bits3setEv\"></span><span id=\"_CPPv2N4Bits3setEv\"></span><span id=\"Bits::set\"></span><span class=\"target\" id=\"classBits_1ab89f1a8caf9f57c2d10a72687f3ea827\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">set</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8NOR_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8NOR_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8NOR_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8NOR_SELFERK8BitArray\"></span><span id=\"old::BitArray::NOR_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afbdea77bcd8bd9e28ebece24c3947e38\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NOR with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitsaNERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitsaNERK4Bits\">\n<span id=\"_CPPv3N4BitsaNERK4Bits\"></span><span id=\"_CPPv2N4BitsaNERK4Bits\"></span><span id=\"Bits::and-assign-operator__BitsCR\"></span><span class=\"target\" id=\"classBits_1a0ac1ea61cc3f09f1523141b1cca1d956\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise AND\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray14ToBinaryStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray14ToBinaryStringEv\">\n<span id=\"_CPPv3NK3old8BitArray14ToBinaryStringEv\"></span><span id=\"_CPPv2NK3old8BitArray14ToBinaryStringEv\"></span><span id=\"old::BitArray::ToBinaryStringC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a769470280788e19e9881dfbda0bc17bb\"></span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToBinaryString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to a numerical string [index 0 on right]. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3XORERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3XORERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVector3XORERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVector3XORERK9BitVector\"></span><span id=\"old::BitVector::XOR__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a7301adaf68683993734d4857cce26091\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">XOR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean XOR on this BitVector and return the result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits14SetRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits14SetRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N4Bits14SetRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N4Bits14SetRandomCountER6RandomK6size_t\"></span><span id=\"Bits::SetRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classBits_1a9c9498a9e6b84e77ed24b843b36b4cf7\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set a specified number of random bits (does not check if already set.) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorERK9BitVector6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorERK9BitVector6size_t\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorERK9BitVector6size_t\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorERK9BitVector6size_t\"></span><span id=\"old::BitVector::BitVector__BitVectorCR.s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1adcda2f299e014df19c54349fa837e431\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector9BitVectorERK9BitVector6size_t\" title=\"old::BitVector::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">new_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Copy, but with a resize. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8BitArrayERKNSt6bitsetI8NUM_BITSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayERKNSt6bitsetI8NUM_BITSEE\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"old::BitArray::BitArray__std::bitset:NUM_BITS:CR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae5e48befca6e305f184495b1d40b9d71\"></span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">bitset</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitset</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a BitArray from a std::bitset. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorgeERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorgeERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVectorgeERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVectorgeERK9BitVector\"></span><span id=\"old::BitVector::gte-operator__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1abbb75f210eba5f91d8b61484e03876fe\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I0ENK4Bits15GetValueAtIndexE1TK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK4Bits15GetValueAtIndexE1TK6size_t\">\n<span id=\"_CPPv3I0ENK4Bits15GetValueAtIndexEK6size_t\"></span><span id=\"_CPPv2I0ENK4Bits15GetValueAtIndexEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a766a9feb18a4f505149240243a731ee3\"></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK4Bits15GetValueAtIndexE1TK6size_t\" title=\"Bits::GetValueAtIndex::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValueAtIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get specified type at a given index (in steps of that type size) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorneERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorneERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVectorneERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVectorneERK9BitVector\"></span><span id=\"old::BitVector::neq-operator__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab18f70c9735e22a8e7618b29ed1c9516\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">!=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsE6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsE6size_tb\">\n<span id=\"_CPPv3N4Bits4BitsE6size_tb\"></span><span id=\"_CPPv2N4Bits4BitsE6size_tb\"></span><span id=\"Bits::Bits__s.b\"></span><span class=\"target\" id=\"classBits_1ac231ce6f9eed859e564d05e2a6c65320\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">init_val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Build a new Bits with specified bit count and initialization (default 0) </p><p>Build a new Bits object with specified bit count and initialization (default 0) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9CountOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9CountOnesEv\">\n<span id=\"_CPPv3NK4Bits9CountOnesEv\"></span><span id=\"_CPPv2NK4Bits9CountOnesEv\"></span><span id=\"Bits::CountOnesCCE\"></span><span class=\"target\" id=\"classBits_1ab47adef99f4cae21f63524978bf68666\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of ones in Bits. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9RandomizeER6RandomKdK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9RandomizeER6RandomKdK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray9RandomizeER6RandomKdK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray9RandomizeER6RandomKdK6size_tK6size_t\"></span><span id=\"old::BitArray::Randomize__RandomR.doubleC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae82317aacadbfda294baba2d3b6ae4df\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Randomize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a given probability of being a one. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9SetUInt64EK6size_t8uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9SetUInt64EK6size_t8uint64_t\">\n<span id=\"_CPPv3N3old8BitArray9SetUInt64EK6size_t8uint64_t\"></span><span id=\"_CPPv2N3old8BitArray9SetUInt64EK6size_t8uint64_t\"></span><span id=\"old::BitArray::SetUInt64__sC.uint64_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab66abe165a02574a8227c54f9e4f5b91\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt64</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 64-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix3SetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix3SetE6size_t\">\n<span id=\"_CPPv3N9BitMatrix3SetE6size_t\"></span><span id=\"_CPPv2N9BitMatrix3SetE6size_t\"></span><span id=\"BitMatrix::Set__s\"></span><span class=\"target\" id=\"classBitMatrix_1a9d9f62c9a6cbff23f9a5096320413498\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits6ROTATEEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits6ROTATEEKi\">\n<span id=\"_CPPv3NK4Bits6ROTATEEKi\"></span><span id=\"_CPPv2NK4Bits6ROTATEEKi\"></span><span id=\"Bits::ROTATE__iCC\"></span><span class=\"target\" id=\"classBits_1adac41ab0976cbadfd05bdf405f24445e\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTATE</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Positive rotates right and negative goes left; return result. </p><p>Positive rotates go left and negative rotates go left (0 does nothing); return result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I0EN3old8BitArray9serializeEvR7Archive\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray9serializeEvR7Archive\">\n<span id=\"_CPPv3I0EN3old8BitArray9serializeER7Archive\"></span><span id=\"_CPPv2I0EN3old8BitArray9serializeER7Archive\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Archive</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a8fc383d33fa293f5cdeaaceac61d9622\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">serialize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray9serializeEvR7Archive\" title=\"old::BitArray::serialize::Archive\"><span class=\"n\"><span class=\"pre\">Archive</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9RandomizeER6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9RandomizeER6Random\">\n<span id=\"_CPPv3N4Bits9RandomizeER6Random\"></span><span id=\"_CPPv2N4Bits9RandomizeER6Random\"></span><span id=\"Bits::Randomize__RandomR\"></span><span class=\"target\" id=\"classBits_1a3d831dcc20c4899d2afa11dab31ad89e\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Randomize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a 50% probability of being a 0 or 1. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector12GetNumStatesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector12GetNumStatesEv\">\n<span id=\"_CPPv3NK3old9BitVector12GetNumStatesEv\"></span><span id=\"_CPPv2NK3old9BitVector12GetNumStatesEv\"></span><span id=\"old::BitVector::GetNumStatesC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae3e5edb6a83308db91a9609c45a8a392\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNumStates</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many distinct values could be held in this BitVector? </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENK4BitsltEbRK4BitsI7DATA2_T3ZL2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENK4BitsltEbRK4BitsI7DATA2_T3ZL2E\">\n<span id=\"_CPPv3I0_bENK4BitsltERK4BitsI7DATA2_T3ZL2E\"></span><span id=\"_CPPv2I0_bENK4BitsltERK4BitsI7DATA2_T3ZL2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a696ccd3a647630c455f3458d2e461c6f\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsltEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator&lt;::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsltEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator&lt;::ZL2\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Compare the would-be numerical values of two bit vectors. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector10Byte2FieldEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector10Byte2FieldEK6size_t\">\n<span id=\"_CPPv3N3old9BitVector10Byte2FieldEK6size_t\"></span><span id=\"_CPPv2N3old9BitVector10Byte2FieldEK6size_t\"></span><span id=\"old::BitVector::Byte2Field__sCCE\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ac9562c8aba33c076b28bad9cb6154b55\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Byte2Field</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray4NoneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4NoneEv\">\n<span id=\"_CPPv3NK3old8BitArray4NoneEv\"></span><span id=\"_CPPv2NK3old8BitArray4NoneEv\"></span><span id=\"old::BitArray::NoneC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aff45aa6b27cc78187d9d2503e95623a4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">None</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if NO bits in the BitArray are one, else return false. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits2OKEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits2OKEv\">\n<span id=\"_CPPv3NK4Bits2OKEv\"></span><span id=\"_CPPv2NK4Bits2OKEv\"></span><span id=\"Bits::OKC\"></span><span class=\"target\" id=\"classBits_1ab1595907fc51547f4f31f437fb83451c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OK</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray8GetSizeTE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8GetSizeTE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray8GetSizeTE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray8GetSizeTE6size_t\"></span><span id=\"old::BitArray::GetSizeT__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a60f18425a2e5fa018dd08826170eec51\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSizeT</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve a \u2018size_t\u2019 chunk from the current bits at the specified index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray16ClearRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray16ClearRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N3old8BitArray16ClearRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N3old8BitArray16ClearRandomCountER6RandomK6size_t\"></span><span id=\"old::BitArray::ClearRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afc4160e635c52b8b99e4114babe78b60\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Unset a specified number of random bits (does not check if already zero.) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray9GetAsCharE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9GetAsCharE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray9GetAsCharE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray9GetAsCharE6size_t\"></span><span id=\"old::BitArray::GetAsChar__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a48db094d4671b4c12c0481a2b1c1c2f9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetAsChar</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert a specified bit to a character. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArraylsEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArraylsEK6size_t\">\n<span id=\"_CPPv3NK3old8BitArraylsEK6size_t\"></span><span id=\"_CPPv2NK3old8BitArraylsEK6size_t\"></span><span id=\"old::BitArray::lshift-operator__sCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a385234ab12bfcad24ba8d5ba5f4d4bbb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator shift left\u2026 </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E14RotateBitsLeft1T1T6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E14RotateBitsLeft1T1T6size_t6size_t\">\n<span id=\"_CPPv3I0E14RotateBitsLeft1T6size_t6size_t\"></span><span id=\"_CPPv2I0E14RotateBitsLeft1T6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1accbdb76a298d9c7499a825afa9bbf886\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E14RotateBitsLeft1T1T6size_t6size_t\" title=\"RotateBitsLeft::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateBitsLeft</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E14RotateBitsLeft1T1T6size_t6size_t\" title=\"RotateBitsLeft::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">bit_count</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector15FIELD_LOG2_MASKE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector15FIELD_LOG2_MASKE\">\n<span id=\"_CPPv3N3old9BitVector15FIELD_LOG2_MASKE\"></span><span id=\"_CPPv2N3old9BitVector15FIELD_LOG2_MASKE\"></span><span id=\"old::BitVector::FIELD_LOG2_MASK__field_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aff91e85ef354baa767ca7da9a7d961e9\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2_MASK</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/bitset_utils.html#_CPPv4I0E7MaskLow4TYPENSt6size_tE\" title=\"MaskLow\"><span class=\"n\"><span class=\"pre\">MaskLow</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector10FIELD_LOG2E\" title=\"old::BitVector::FIELD_LOG2\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray9CountOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9CountOnesEv\">\n<span id=\"_CPPv3NK3old8BitArray9CountOnesEv\"></span><span id=\"_CPPv2NK3old8BitArray9CountOnesEv\"></span><span id=\"old::BitArray::CountOnesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a13465a51b832252a0fbb5dbf3e75d4f5\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of ones in the BitArray. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7BytePtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7BytePtrEv\">\n<span id=\"_CPPv3NK3old9BitVector7BytePtrEv\"></span><span id=\"_CPPv2NK3old9BitVector7BytePtrEv\"></span><span id=\"old::BitVector::BytePtrC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aa3816f79bf4d35902f8edc60458964aa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVectoreOERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVectoreOERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVectoreOERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVectoreOERK9BitVector\"></span><span id=\"old::BitVector::xor-assign-operator__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae5004d6bcb2752983fb71ad4e42cd0ea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise XOR\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector2atE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector2atE6size_t\">\n<span id=\"_CPPv3N3old9BitVector2atE6size_t\"></span><span id=\"_CPPv2N3old9BitVector2atE6size_t\"></span><span id=\"old::BitVector::at__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a63616c36e5585e3ea6fc97796feb22ed\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">at</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv48BitValue\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv48BitValue\">\n<span id=\"_CPPv38BitValue\"></span><span id=\"_CPPv28BitValue\"></span><span class=\"target\" id=\"Bits_8hpp_1a98b3a55a4ece20d20648c3899a156f32\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitValue</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/Bits_Data.html#_CPPv416Bits_DynamicData\" title=\"Bits_DynamicData\"><span class=\"n\"><span class=\"pre\">Bits_DynamicData</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4I0ENK3old9BitVector7GetOnesER6vectorI1TER6vectorI1TE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK3old9BitVector7GetOnesER6vectorI1TER6vectorI1TE\">\n<span id=\"_CPPv3I0ENK3old9BitVector7GetOnesER6vectorI1TE\"></span><span id=\"_CPPv2I0ENK3old9BitVector7GetOnesER6vectorI1TE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1acc3e1f96c5d0af3bdb3a21f773af4343\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK3old9BitVector7GetOnesER6vectorI1TER6vectorI1TE\" title=\"old::BitVector::GetOnes::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetOnes</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK3old9BitVector7GetOnesER6vectorI1TER6vectorI1TE\" title=\"old::BitVector::GetOnes::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out_vals</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Collect positions of ones in the provided vector (allows id type choice) </p><p>Return positions of all ones using a specified type. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENK4BitsleEbRK4BitsI7DATA2_T3ZL2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENK4BitsleEbRK4BitsI7DATA2_T3ZL2E\">\n<span id=\"_CPPv3I0_bENK4BitsleERK4BitsI7DATA2_T3ZL2E\"></span><span id=\"_CPPv2I0_bENK4BitsleERK4BitsI7DATA2_T3ZL2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1aa0a864e889edd72f7b4bf94094eab405\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsleEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator&lt;=::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsleEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator&lt;=::ZL2\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits16CountOnes_SparseEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits16CountOnes_SparseEv\">\n<span id=\"_CPPv3NK4Bits16CountOnes_SparseEv\"></span><span id=\"_CPPv2NK4Bits16CountOnes_SparseEv\"></span><span id=\"Bits::CountOnes_SparseCCE\"></span><span class=\"target\" id=\"classBits_1a88bd9d971f6d9a62ab8bed08f9cd9692\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes_Sparse</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Faster counting of ones for very sparse bit vectors. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray11ROTATE_SELFEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11ROTATE_SELFEKi\">\n<span id=\"_CPPv3N3old8BitArray11ROTATE_SELFEKi\"></span><span id=\"_CPPv2N3old8BitArray11ROTATE_SELFEKi\"></span><span id=\"old::BitArray::ROTATE_SELF__iC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8760b6649c7fbdce709f1b04311622e3\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTATE_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Positive rotates go right and negative rotates go left (0 does nothing); store result here, and return this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7FindOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7FindOneEv\">\n<span id=\"_CPPv3NK3old9BitVector7FindOneEv\"></span><span id=\"_CPPv2NK3old9BitVector7FindOneEv\"></span><span id=\"old::BitVector::FindOneC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a4f4777805f75496b363bf7f260884a34\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first one; return -1 if no ones in vector. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits5resetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits5resetE6size_t\">\n<span id=\"_CPPv3N4Bits5resetE6size_t\"></span><span id=\"_CPPv2N4Bits5resetE6size_t\"></span><span id=\"Bits::reset__s\"></span><span class=\"target\" id=\"classBits_1a1c6fdfb66b085764649d7bac71c7e3ef\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorERKNSt6stringE\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorERKNSt6stringE\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorERKNSt6stringE\"></span><span id=\"old::BitVector::BitVector__ssCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a6ff0d565b310bb778f7509ab979e0843\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a BitVector from a string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/BitSet.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">BitSet.hpp<a class=\"headerlink\" href=\"#bitset-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A drop-in replacement for std::bitset, with additional bit magic features; aliases BitArray. Status: RELEASE. </p>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6DeleteEK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6DeleteEK6size_tK6size_t\">\n<span id=\"_CPPv3N3old9BitVector6DeleteEK6size_tK6size_t\"></span><span id=\"_CPPv2N3old9BitVector6DeleteEK6size_tK6size_t\"></span><span id=\"old::BitVector::Delete__sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1acf016aa95cc4b59e1e48f21765fab237\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Delete</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Delete bits from any index in a vector. TODO: consider a bit magic approach here. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector4flipEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector4flipEv\">\n<span id=\"_CPPv3N3old9BitVector4flipEv\"></span><span id=\"_CPPv2N3old9BitVector4flipEv\"></span><span id=\"old::BitVector::flip\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a245a109a2cf2afeb8c94340931049a73\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9ShiftLeftEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9ShiftLeftEK6size_t\">\n<span id=\"_CPPv3N3old9BitVector9ShiftLeftEK6size_t\"></span><span id=\"_CPPv2N3old9BitVector9ShiftLeftEK6size_t\"></span><span id=\"old::BitVector::ShiftLeft__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a60db7ee73550402bbbd6c06c658290ec\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ShiftLeft</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6ToggleE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6ToggleE6size_t\">\n<span id=\"_CPPv3N3old9BitVector6ToggleE6size_t\"></span><span id=\"_CPPv2N3old9BitVector6ToggleE6size_t\"></span><span id=\"old::BitVector::Toggle__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a731ef39d794d14f7e42b41296e1a52f4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Change a specified bit to the opposite value. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArrayrSEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayrSEK6size_t\">\n<span id=\"_CPPv3N3old8BitArrayrSEK6size_t\"></span><span id=\"_CPPv2N3old8BitArrayrSEK6size_t\"></span><span id=\"old::BitArray::rshift-assign-operator__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a5562bdb3b26c0f6a68d8cb33d1c75033\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;&gt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator shift right\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArrayorERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayorERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArrayorERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArrayorERK8BitArray\"></span><span id=\"old::BitArray::or-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aff64764d0c7d51b72b165a54c393b6f7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise OR\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7FieldIDEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7FieldIDEK6size_t\">\n<span id=\"_CPPv3N3old9BitVector7FieldIDEK6size_t\"></span><span id=\"_CPPv2N3old9BitVector7FieldIDEK6size_t\"></span><span id=\"old::BitVector::FieldID__sCCE\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a504874f7a0baaacd4c8cb7e39faae9bf\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldID</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NR4BitsaSERK4BitsI6DATA_T9ZERO_LEFTE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR4BitsaSERK4BitsI6DATA_T9ZERO_LEFTE\">\n<span id=\"_CPPv3NR4BitsaSERK4BitsI6DATA_T9ZERO_LEFTE\"></span><span id=\"_CPPv2NR4BitsaSERK4BitsI6DATA_T9ZERO_LEFTE\"></span><span id=\"Bits::assign-operator__Bits:DATA_T.ZERO_LEFT:CRR\"></span><span class=\"target\" id=\"classBits_1acbee4fe1324d50e573aa7a9947313807\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Copy assignment operator. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitslsERNSt7ostreamERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitslsERNSt7ostreamERK4Bits\">\n<span id=\"_CPPv3N4BitslsERNSt7ostreamERK4Bits\"></span><span id=\"_CPPv2N4BitslsERNSt7ostreamERK4Bits\"></span><span id=\"Bits::lshift-operator__osR.BitsCR\"></span><span class=\"target\" id=\"classBits_1af3f09533aafbcef936bb6fc9208d7ae2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">friend</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Overload ostream operator to return Print. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old8BitArray5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old8BitArray5PrintERNSt7ostreamE\"></span><span id=\"old::BitArray::Print__osRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a2b06fef566e2e345256c6e88cb669a9a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Regular print function (from least significant bit to most) </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix7DRShiftEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix7DRShiftEv\">\n<span id=\"_CPPv3NK9BitMatrix7DRShiftEv\"></span><span id=\"_CPPv2NK9BitMatrix7DRShiftEv\"></span><span id=\"BitMatrix::DRShiftC\"></span><span class=\"target\" id=\"classBitMatrix_1ac746d9fdec8fb9256c228a286a069755\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DRShift</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector12GetUIntAtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector12GetUIntAtBitE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector12GetUIntAtBitE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector12GetUIntAtBitE6size_t\"></span><span id=\"old::BitVector::GetUIntAtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aa082fc063e9b39ba188e96c157ea93fd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUIntAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray4flipE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4flipE6size_t6size_t\">\n<span id=\"_CPPv3N3old8BitArray4flipE6size_t6size_t\"></span><span id=\"_CPPv2N3old8BitArray4flipE6size_t6size_t\"></span><span id=\"old::BitArray::flip__s.s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1acee2fbe30f7c019263c9442094ad85d3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8ADD_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8ADD_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8ADD_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8ADD_SELFERK8BitArray\"></span><span id=\"old::BitArray::ADD_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6c89ca3a3bfa0730e39c0624004307a2\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ADD_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Addition of two BitArrays. Wraps if it overflows. Returns this object. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8BitArrayEPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayEPKc\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayEPKc\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayEPKc\"></span><span id=\"old::BitArray::BitArray__cCP\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1f4991fc4923d94218ffa2e48f472533\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a BitArray from a literal string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3anyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3anyEv\">\n<span id=\"_CPPv3NK3old9BitVector3anyEv\"></span><span id=\"_CPPv2NK3old9BitVector3anyEv\"></span><span id=\"old::BitVector::anyC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1af35395b7edf91037ff16c028ddfe2c32\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">any</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray13ToArrayStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray13ToArrayStringEv\">\n<span id=\"_CPPv3NK3old8BitArray13ToArrayStringEv\"></span><span id=\"_CPPv2NK3old8BitArray13ToArrayStringEv\"></span><span id=\"old::BitArray::ToArrayStringC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a29b6bf207a61e451bdb1ac27356df7f1\"></span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToArrayString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to an array-based string [index 0 on left]. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray5resetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5resetEv\">\n<span id=\"_CPPv3N3old8BitArray5resetEv\"></span><span id=\"_CPPv2N3old8BitArray5resetEv\"></span><span id=\"old::BitArray::reset\"></span><span class=\"target\" id=\"classold_1_1BitArray_1adc12916262ecf322401780e4f8a9c93e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix3GetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix3GetE6size_t\">\n<span id=\"_CPPv3NK9BitMatrix3GetE6size_t\"></span><span id=\"_CPPv2NK9BitMatrix3GetE6size_t\"></span><span id=\"BitMatrix::Get__sC\"></span><span class=\"target\" id=\"classBitMatrix_1a1e5fda78c7cf8035041072dbce29d619\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4I0ENK3old8BitArray15GetValueAtIndexE1TK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK3old8BitArray15GetValueAtIndexE1TK6size_t\">\n<span id=\"_CPPv3I0ENK3old8BitArray15GetValueAtIndexEK6size_t\"></span><span id=\"_CPPv2I0ENK3old8BitArray15GetValueAtIndexEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1ad3200967a4aadaa1de24b478a9c841fc\"></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK3old8BitArray15GetValueAtIndexE1TK6size_t\" title=\"old::BitArray::GetValueAtIndex::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValueAtIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get specified type at a given index (in steps of that type size) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8FieldPosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8FieldPosEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray8FieldPosEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray8FieldPosEK6size_t\"></span><span id=\"old::BitArray::FieldPos__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a202db85a59563193adc03860ea532473\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldPos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrixanERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrixanERK9BitMatrix\">\n<span id=\"_CPPv3NK9BitMatrixanERK9BitMatrix\"></span><span id=\"_CPPv2NK9BitMatrixanERK9BitMatrix\"></span><span id=\"BitMatrix::and-operator__BitMatrixCRC\"></span><span class=\"target\" id=\"classBitMatrix_1a31c98ed9283fcd3301890c0f43ac28cd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector4testE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector4testE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector4testE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector4testE6size_t\"></span><span id=\"old::BitVector::test__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a93747c364c8bb03f98d7a6b9a470aa2d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">test</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I0EN4Bitscv6vectorI1TEEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN4Bitscv6vectorI1TEEv\">\n<span id=\"_CPPv3I0EN4Bitscv6vectorI1TEEv\"></span><span id=\"_CPPv2I0EN4Bitscv6vectorI1TEEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a275965fd10383f70ee455e90b358e755\"></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0EN4Bitscv6vectorI1TEEv\" title=\"Bits::operator vector&lt;T&gt;::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Automatically convert Bits to other vector types. </p><p>Automatically convert Bits object to other vector types. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray14GetUInt16AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray14GetUInt16AtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray14GetUInt16AtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray14GetUInt16AtBitE6size_t\"></span><span id=\"old::BitArray::GetUInt16AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1d6526ccbf6718b698c53aecfed84197\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt16AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 16-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray10NUM_FIELDSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10NUM_FIELDSE\">\n<span id=\"_CPPv3N3old8BitArray10NUM_FIELDSE\"></span><span id=\"_CPPv2N3old8BitArray10NUM_FIELDSE\"></span><span id=\"old::BitArray::NUM_FIELDS__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae868a2ad5a1349eac39ec08b2e4f03dc\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_FIELDS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">+</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">/</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_BITSE\" title=\"old::BitArray::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3EQUERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3EQUERK4Bits\">\n<span id=\"_CPPv3NK4Bits3EQUERK4Bits\"></span><span id=\"_CPPv2NK4Bits3EQUERK4Bits\"></span><span id=\"Bits::EQU__BitsCRC\"></span><span class=\"target\" id=\"classBits_1adfc2b02128c1ee3a37fe594c1449cd1c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EQU</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean EQU on this Bits and return the result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9FIELD_ALLE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9FIELD_ALLE\">\n<span id=\"_CPPv3N4Bits9FIELD_ALLE\"></span><span id=\"_CPPv2N4Bits9FIELD_ALLE\"></span><span id=\"Bits::FIELD_ALL__field_t\"></span><span class=\"target\" id=\"classBits_1a896d5c8904b95008279a2bff04b1f29d\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_ALL</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">~</span></span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7FIELD_0E\" title=\"Bits::FIELD_0\"><span class=\"n\"><span class=\"pre\">FIELD_0</span></span></a><br/></dt><dd><p>All bits in a field set to 1. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray11PrintOneIDsERNSt7ostreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray11PrintOneIDsERNSt7ostreamERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray11PrintOneIDsERNSt7ostreamERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray11PrintOneIDsERNSt7ostreamERKNSt6stringE\"></span><span id=\"old::BitArray::PrintOneIDs__osR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a15edc9f36b2aae96706c3ca1f883fb7e\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintOneIDs</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print the locations of all one bits, using the provided spacer (default is a single space) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9NAND_SELFERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9NAND_SELFERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVector9NAND_SELFERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVector9NAND_SELFERK9BitVector\"></span><span id=\"old::BitVector::NAND_SELF__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a30779ccb8230d5d0bf6cf9e50cbf8ad4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NAND_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NAND with this BitVector, store result here, and return this object. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits11GetNumBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits11GetNumBytesEv\">\n<span id=\"_CPPv3NK4Bits11GetNumBytesEv\"></span><span id=\"_CPPv2NK4Bits11GetNumBytesEv\"></span><span id=\"Bits::GetNumBytesCCE\"></span><span class=\"target\" id=\"classBits_1af4f5176f51426d1aacf1ea1581340891\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNumBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many bytes are in this Bits? (includes empty field space) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits10ToIDStringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits10ToIDStringERKNSt6stringE\">\n<span id=\"_CPPv3NK4Bits10ToIDStringERKNSt6stringE\"></span><span id=\"_CPPv2NK4Bits10ToIDStringERKNSt6stringE\"></span><span id=\"Bits::ToIDString__ssCRC\"></span><span class=\"target\" id=\"classBits_1a812efba1dab10daa4aad9e575f0b0bca\"></span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToIDString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this Bits to a series of IDs. </p><p>Convert this Bits object to a series of IDs. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray9GetUInt32E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9GetUInt32E6size_t\">\n<span id=\"_CPPv3NK3old8BitArray9GetUInt32E6size_t\"></span><span id=\"_CPPv2NK3old8BitArray9GetUInt32E6size_t\"></span><span id=\"old::BitArray::GetUInt32__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a27471ecaf559d55d0232ee5ea5157db6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt32</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits12GetUIntAtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits12GetUIntAtBitE6size_t\">\n<span id=\"_CPPv3NK4Bits12GetUIntAtBitE6size_t\"></span><span id=\"_CPPv2NK4Bits12GetUIntAtBitE6size_t\"></span><span id=\"Bits::GetUIntAtBit__sC\"></span><span class=\"target\" id=\"classBits_1a7e3ae132f5a2fa7cf7251020da6e7b27\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUIntAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>By default, retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0EN4Bits13SetValueAtBitER4BitsI6DATA_T9ZERO_LEFTEK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN4Bits13SetValueAtBitER4BitsI6DATA_T9ZERO_LEFTEK6size_t1T\">\n<span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1adbb7fe3299cb0c6f91c16735a561342e\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN4Bits13SetValueAtBitER4BitsI6DATA_T9ZERO_LEFTEK6size_t1T\" title=\"Bits::SetValueAtBit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set the specified type starting from a given BIT position. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector4flipE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector4flipE6size_t6size_t\">\n<span id=\"_CPPv3N3old9BitVector4flipE6size_t6size_t\"></span><span id=\"_CPPv2N3old9BitVector4flipE6size_t6size_t\"></span><span id=\"old::BitVector::flip__s.s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a5832decffdcc19ffb46852057ad0ed61\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">end</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray12REVERSE_SELFEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12REVERSE_SELFEv\">\n<span id=\"_CPPv3N3old8BitArray12REVERSE_SELFEv\"></span><span id=\"_CPPv2N3old8BitArray12REVERSE_SELFEv\"></span><span id=\"old::BitArray::REVERSE_SELF\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aea55f4bf07958ba9ac05124dab5f49a4\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">REVERSE_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Reverse the order of bits in the BitArray. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix9GetRegionE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix9GetRegionE6size_t6size_t\">\n<span id=\"_CPPv3NK9BitMatrix9GetRegionE6size_t6size_t\"></span><span id=\"_CPPv2NK9BitMatrix9GetRegionE6size_t6size_t\"></span><span id=\"BitMatrix::GetRegion__s.sC\"></span><span class=\"target\" id=\"classBitMatrix_1a80c18d80942f6cab0d3abae01a76f8d8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetRegion</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">col</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">row</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits_Data.html#_CPPv4N8BitsMode7DYNAMICE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8BitsMode7DYNAMICE\">\n<span id=\"_CPPv3N8BitsMode7DYNAMICE\"></span><span id=\"_CPPv2N8BitsMode7DYNAMICE\"></span><span class=\"target\" id=\"Bits__Data_8hpp_1af31ec97e6be574fed2c89681498298a7a0fcc90da4811c877ba9f9c12f7d60bc9\"></span><span class=\"k\"><span class=\"pre\">enumerator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DYNAMIC</span></span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4I_6size_tEN3old9BitVector9ROTR_SELFER9BitVectorv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN3old9BitVector9ROTR_SELFER9BitVectorv\">\n<span id=\"_CPPv3I_6size_tEN3old9BitVector9ROTR_SELFEv\"></span><span id=\"_CPPv2I_6size_tEN3old9BitVector9ROTR_SELFEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">shift_size_raw</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a09edb6d4928cc9ded0e4d6d05f2484ab\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper for calling ROTATE with positive number. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray10ToIDStringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10ToIDStringERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray10ToIDStringERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray10ToIDStringERKNSt6stringE\"></span><span id=\"old::BitArray::ToIDString__ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7c64b5422c179634a09077cf422ebe97\"></span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToIDString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to a series of IDs. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3ANDERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3ANDERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3ANDERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3ANDERK8BitArray\"></span><span id=\"old::BitArray::AND__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a331f6e819ae037981c6aeb96b78838d5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AND</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean AND with a second BitArray and return the result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray10ShiftRightEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10ShiftRightEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray10ShiftRightEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray10ShiftRightEK6size_t\"></span><span id=\"old::BitArray::ShiftRight__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6bc51908ef4812e16314555ab73a2b9e\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ShiftRight</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector11RotateRightEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector11RotateRightEK6size_t\">\n<span id=\"_CPPv3N3old9BitVector11RotateRightEK6size_t\"></span><span id=\"_CPPv2N3old9BitVector11RotateRightEK6size_t\"></span><span id=\"old::BitVector::RotateRight__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a8d870aad97139b308317248b15c8b8c8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateRight</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size_raw</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper for calling ROTATE with positive number. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7FIELD_0E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7FIELD_0E\">\n<span id=\"_CPPv3N3old9BitVector7FIELD_0E\"></span><span id=\"_CPPv2N3old9BitVector7FIELD_0E\"></span><span id=\"old::BitVector::FIELD_0__field_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1adfa90fdf674748d5f09379ee1e1d2598\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_0</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">0</span></span><br/></dt><dd><p>All bits in a field set to 0. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bENK3old8BitArraygeEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArraygeEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArraygeERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArraygeERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a4db64875c60a334e3d16fbe373036a2b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArraygeEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&gt;=::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArraygeEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&gt;=::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E8find_bit6size_tK1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E8find_bit6size_tK1T\">\n<span id=\"_CPPv3I0E8find_bitK1T\"></span><span id=\"_CPPv2I0E8find_bitK1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1a9b7c2bda0d0d604846368e29e4719a8e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_bit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E8find_bit6size_tK1T\" title=\"find_bit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return the position of the first one bit. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits13GetUInt8AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits13GetUInt8AtBitE6size_t\">\n<span id=\"_CPPv3NK4Bits13GetUInt8AtBitE6size_t\"></span><span id=\"_CPPv2NK4Bits13GetUInt8AtBitE6size_t\"></span><span id=\"Bits::GetUInt8AtBit__sC\"></span><span class=\"target\" id=\"classBits_1a91af450a4936e18fe51253c87e8fa9be\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt8AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 8-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector5SHIFTEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector5SHIFTEKi\">\n<span id=\"_CPPv3NK3old9BitVector5SHIFTEKi\"></span><span id=\"_CPPv2NK3old9BitVector5SHIFTEKi\"></span><span id=\"old::BitVector::SHIFT__iCC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1abb1ab344b2f1394a0c06ea0b8e2d72c1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SHIFT</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Positive shifts go left and negative go right (0 does nothing); return result. </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv414NUM_FIELD_BITS\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv414NUM_FIELD_BITS\">\n<span id=\"_CPPv314NUM_FIELD_BITS\"></span><span id=\"_CPPv214NUM_FIELD_BITS\"></span><span id=\"NUM_FIELD_BITS__s\"></span><span class=\"target\" id=\"bitset__utils_8hpp_1aed470878f9dd47b428c92e80a90785de\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_FIELD_BITS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">sizeof</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv412bits_field_t\" title=\"bits_field_t\"><span class=\"n\"><span class=\"pre\">bits_field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">8</span></span><br/></dt><dd><p>Track the number of bits in a single bit field. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3GetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3GetE6size_t\">\n<span id=\"_CPPv3NK4Bits3GetE6size_t\"></span><span id=\"_CPPv2NK4Bits3GetE6size_t\"></span><span id=\"Bits::Get__sCCE\"></span><span class=\"target\" id=\"classBits_1a0c7569b5060cf4daff419fcad805c261\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the bit value from the specified index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8AND_SELFERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8AND_SELFERK4Bits\">\n<span id=\"_CPPv3N4Bits8AND_SELFERK4Bits\"></span><span id=\"_CPPv2N4Bits8AND_SELFERK4Bits\"></span><span id=\"Bits::AND_SELF__BitsCR\"></span><span class=\"target\" id=\"classBits_1ad40eb8bd9ff5af5ea4d71237614f92ff\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AND_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean AND with this Bits, store result here, and return this object. </p><p>Perform a Boolean AND with this Bits object, store result here, and return this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector13ToRangeStringERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector13ToRangeStringERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3NK3old9BitVector13ToRangeStringERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2NK3old9BitVector13ToRangeStringERKNSt6stringERKNSt6stringE\"></span><span id=\"old::BitVector::ToRangeString__ssCR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae217e651899a6fa50608a62ace6558c1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToRangeString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\",\"</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ranger</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"-\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitVector to a series of IDs with ranges condensed. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7GetOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7GetOnesEv\">\n<span id=\"_CPPv3NK3old9BitVector7GetOnesEv\"></span><span id=\"_CPPv2NK3old9BitVector7GetOnesEv\"></span><span id=\"old::BitVector::GetOnesC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a49a184353135e1d1dcffb8642dc4d636\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return positions of all ones. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8FieldPosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8FieldPosEK6size_t\">\n<span id=\"_CPPv3N3old9BitVector8FieldPosEK6size_t\"></span><span id=\"_CPPv2N3old9BitVector8FieldPosEK6size_t\"></span><span id=\"old::BitVector::FieldPos__sCCE\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a01f8bdc2eda7b7175bda013f3a4fd846\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldPos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray15FlipRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray15FlipRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N3old8BitArray15FlipRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N3old8BitArray15FlipRandomCountER6RandomK6size_t\"></span><span id=\"old::BitArray::FlipRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a97e71cb6fe5e916fd70728482a17d347\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FlipRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip a specified number of random bits. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray10FindMaxOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10FindMaxOneEv\">\n<span id=\"_CPPv3NK3old8BitArray10FindMaxOneEv\"></span><span id=\"_CPPv2NK3old8BitArray10FindMaxOneEv\"></span><span id=\"old::BitArray::FindMaxOneC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8c9b01c8d6e968bfa30f9af2f8ed417d\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindMaxOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find the most-significant set-bit. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9NumFieldsEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9NumFieldsEv\">\n<span id=\"_CPPv3NK4Bits9NumFieldsEv\"></span><span id=\"_CPPv2NK4Bits9NumFieldsEv\"></span><span id=\"Bits::NumFieldsC\"></span><span class=\"target\" id=\"classBits_1a2a9ddc88596f1be43ae37d4f398b3f2c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NumFields</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitsoRERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitsoRERK4Bits\">\n<span id=\"_CPPv3N4BitsoRERK4Bits\"></span><span id=\"_CPPv2N4BitsoRERK4Bits\"></span><span id=\"Bits::or-assign-operator__BitsCR\"></span><span class=\"target\" id=\"classBits_1a438de37eb7e73760b7a7e3748056692f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise OR\u2026 </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E8MaskHigh4TYPENSt6size_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E8MaskHigh4TYPENSt6size_tE\">\n<span id=\"_CPPv3I0E8MaskHighNSt6size_tE\"></span><span id=\"_CPPv2I0E8MaskHighNSt6size_tE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1adc5b023063c4841243c082e429d334dc\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E8MaskHigh4TYPENSt6size_tE\" title=\"MaskHigh::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaskHigh</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Quick bit-mask generator for high bits. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray11ClearRandomER6RandomKdK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11ClearRandomER6RandomKdK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray11ClearRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray11ClearRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"old::BitArray::ClearRandom__RandomR.doubleC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8005745b43ea0d68123f9155b38c2403\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Unset random bits with a given probability (does not check if already zero.) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector13GetUInt8AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector13GetUInt8AtBitE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector13GetUInt8AtBitE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector13GetUInt8AtBitE6size_t\"></span><span id=\"old::BitVector::GetUInt8AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a9f133af6f480cc6af8b64be5e296a702\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt8AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits15FlipRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits15FlipRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N4Bits15FlipRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N4Bits15FlipRandomCountER6RandomK6size_t\"></span><span id=\"Bits::FlipRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classBits_1af8a5abdef9bd11edfaf468cfead65f71\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FlipRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip a specified number of random bits. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray14SetUInt64AtBitEK6size_t8uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray14SetUInt64AtBitEK6size_t8uint64_t\">\n<span id=\"_CPPv3N3old8BitArray14SetUInt64AtBitEK6size_t8uint64_t\"></span><span id=\"_CPPv2N3old8BitArray14SetUInt64AtBitEK6size_t8uint64_t\"></span><span id=\"old::BitArray::SetUInt64AtBit__sC.uint64_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a9093c439820a622e0b2393abbf7c4581\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt64AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 64-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0EN4Bits10ApplyRangeER4BitsI6DATA_T9ZERO_LEFTERK5FUN_T6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN4Bits10ApplyRangeER4BitsI6DATA_T9ZERO_LEFTERK5FUN_T6size_t6size_t\">\n<span id=\"_CPPv3I0EN4Bits10ApplyRangeERK5FUN_T6size_t6size_t\"></span><span id=\"_CPPv2I0EN4Bits10ApplyRangeERK5FUN_T6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a6d3644dffca7711fd04aa222d99a96ed\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ApplyRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0EN4Bits10ApplyRangeER4BitsI6DATA_T9ZERO_LEFTERK5FUN_T6size_t6size_t\" title=\"Bits::ApplyRange::FUN_T\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">fun</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bENK3old8BitArrayleEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArrayleEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArrayleERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArrayleERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a8f6b8754c93e8b8c59a00caba1d24556\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayleEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&lt;=::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayleEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&lt;=::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray12NUM_END_BITSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12NUM_END_BITSE\">\n<span id=\"_CPPv3N3old8BitArray12NUM_END_BITSE\"></span><span id=\"_CPPv2N3old8BitArray12NUM_END_BITSE\"></span><span id=\"old::BitArray::NUM_END_BITS__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6f09a1631f22a9b0246e913c128943f8\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_END_BITS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">&amp;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_BITSE\" title=\"old::BitArray::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray6PopBitEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6PopBitEv\">\n<span id=\"_CPPv3N3old8BitArray6PopBitEv\"></span><span id=\"_CPPv2N3old8BitArray6PopBitEv\"></span><span id=\"old::BitArray::PopBit\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a539a291699a124a2c589782b98f6f7cb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Deprecated version of PopOne(). </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector6EndGapEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector6EndGapEv\">\n<span id=\"_CPPv3NK3old9BitVector6EndGapEv\"></span><span id=\"_CPPv2NK3old9BitVector6EndGapEv\"></span><span id=\"old::BitVector::EndGapC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a12b633a2ed360fcfec6484caa2d6d84a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EndGap</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many EXTRA bits are leftover in the gap at the end? </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3HasE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3HasE6size_t\">\n<span id=\"_CPPv3NK4Bits3HasE6size_t\"></span><span id=\"_CPPv2NK4Bits3HasE6size_t\"></span><span id=\"Bits::Has__sCCE\"></span><span class=\"target\" id=\"classBits_1a10fc62015b25359dba349ad8ceaa84d9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Has</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>A safe version of Get() for indexing out of range. Useful for representing collections. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector9CountOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector9CountOnesEv\">\n<span id=\"_CPPv3NK3old9BitVector9CountOnesEv\"></span><span id=\"_CPPv2NK3old9BitVector9CountOnesEv\"></span><span id=\"old::BitVector::CountOnesC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a36e6d675970bd9c31efbdb2a3688feea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of ones in the BitVector. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9SetUInt32EK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9SetUInt32EK6size_t8uint32_t\">\n<span id=\"_CPPv3N4Bits9SetUInt32EK6size_t8uint32_t\"></span><span id=\"_CPPv2N4Bits9SetUInt32EK6size_t8uint32_t\"></span><span id=\"Bits::SetUInt32__sC.uint32_t\"></span><span class=\"target\" id=\"classBits_1adef9bfe794f0adbfd6b022048b01e058\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt32</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits5countEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits5countEv\">\n<span id=\"_CPPv3NK4Bits5countEv\"></span><span id=\"_CPPv2NK4Bits5countEv\"></span><span id=\"Bits::countCCE\"></span><span class=\"target\" id=\"classBits_1a7da015f42a9716949616f76681afbcfd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">count</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray16CountOnes_SparseEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray16CountOnes_SparseEv\">\n<span id=\"_CPPv3NK3old8BitArray16CountOnes_SparseEv\"></span><span id=\"_CPPv2NK3old8BitArray16CountOnes_SparseEv\"></span><span id=\"old::BitArray::CountOnes_SparseC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa6b395a359ba4e3ce9352e4c07c7a369\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes_Sparse</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Faster counting of ones for very sparse bit vectors. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9push_backEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9push_backEb\">\n<span id=\"_CPPv3N3old9BitVector9push_backEb\"></span><span id=\"_CPPv2N3old9BitVector9push_backEb\"></span><span id=\"old::BitVector::push_back__b\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a4ea5f94c42b9379121c5c0d984cbd7b8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">push_back</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits3setE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits3setE6size_t\">\n<span id=\"_CPPv3N4Bits3setE6size_t\"></span><span id=\"_CPPv2N4Bits3setE6size_t\"></span><span id=\"Bits::set__s\"></span><span class=\"target\" id=\"classBits_1ad0a6dc6f67d63637d0c6c8144a6482e9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/bitset_utils.html#_CPPv417BitFieldsToString3PtrI12bits_field_tE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv417BitFieldsToString3PtrI12bits_field_tE6size_t\">\n<span id=\"_CPPv317BitFieldsToString3PtrI12bits_field_tE6size_t\"></span><span id=\"_CPPv217BitFieldsToString3PtrI12bits_field_tE6size_t\"></span><span id=\"BitFieldsToString__Ptr:bits_field_t:.s\"></span><span class=\"target\" id=\"bitset__utils_8hpp_1a16f7722d9f790006155ebf98a2a5bdba\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitFieldsToString</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv412bits_field_t\" title=\"bits_field_t\"><span class=\"n\"><span class=\"pre\">bits_field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">bits</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">count</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Convert a series of bit fields to a string. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E\">\n<span id=\"_CPPv3I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E\"></span><span id=\"_CPPv2I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1aac046a4491d2d12fc3112955a1c02795\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::Bits::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::Bits::ZERO_LEFT2\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor for other type of existing bits object. </p><p>Constructor from other type of Bits field. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsER6RandomKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsER6RandomKi\">\n<span id=\"_CPPv3N4Bits4BitsER6RandomKi\"></span><span id=\"_CPPv2N4Bits4BitsER6RandomKi\"></span><span id=\"Bits::Bits__RandomR.iC\"></span><span class=\"target\" id=\"classBits_1a5e30326faafa94e51c49656e931c5ad1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate random Bits with specified # of ones, default size. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9CountOnesE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9CountOnesE6size_t6size_t\">\n<span id=\"_CPPv3NK4Bits9CountOnesE6size_t6size_t\"></span><span id=\"_CPPv2NK4Bits9CountOnesE6size_t6size_t\"></span><span id=\"Bits::CountOnes__s.sCCE\"></span><span class=\"target\" id=\"classBits_1af620f171f493f22bfb96edb8f970eefe\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">end</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of ones in a range within Bits. [start, end) </p><p>Count the number of ones in a specified range of Bits. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8BitArrayER6Randomi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayER6Randomi\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayER6Randomi\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayER6Randomi\"></span><span id=\"old::BitArray::BitArray__RandomR.i\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af3e1ea43aaa727e790ed7455c3e1c729\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitArray with provided NUMBER of 1\u2019s. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4I_6size_tEN3old9BitVector9ROTL_SELFER9BitVectorv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN3old9BitVector9ROTL_SELFER9BitVectorv\">\n<span id=\"_CPPv3I_6size_tEN3old9BitVector9ROTL_SELFEv\"></span><span id=\"_CPPv2I_6size_tEN3old9BitVector9ROTL_SELFEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">shift_size_raw</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a0ea89fb1c06f3d85ad50c611d0b680d8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTL_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper: call ROTATE with negative number instead. </p></dd>", "a[href=\"api/BitVector.html#_CPPv43old\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43old\">\n<span id=\"_CPPv33old\"></span><span id=\"_CPPv23old\"></span><span id=\"old\"></span><span class=\"target\" id=\"namespaceold\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">old</span></span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsERKNSt6stringE\">\n<span id=\"_CPPv3N4Bits4BitsERKNSt6stringE\"></span><span id=\"_CPPv2N4Bits4BitsERKNSt6stringE\"></span><span id=\"Bits::Bits__ssCR\"></span><span class=\"target\" id=\"classBits_1a99076df5e389f9458b6a543ca038520c\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a Bits from a string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NR4BitsaSERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR4BitsaSERKNSt6stringE\">\n<span id=\"_CPPv3NR4BitsaSERKNSt6stringE\"></span><span id=\"_CPPv2NR4BitsaSERKNSt6stringE\"></span><span id=\"Bits::assign-operator__ssCRR\"></span><span class=\"target\" id=\"classBits_1ad49ed6503153aacba037bd7864c5f254\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3AllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3AllEv\">\n<span id=\"_CPPv3NK3old9BitVector3AllEv\"></span><span id=\"_CPPv2NK3old9BitVector3AllEv\"></span><span id=\"old::BitVector::AllC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a9db40f7c2a1a7c9e21aeb1d5feadccab\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">All</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if ALL bits are set to 1, otherwise return false. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4I0EN3old9BitVector9BitVectorEKNSt16initializer_listI1TEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old9BitVector9BitVectorEKNSt16initializer_listI1TEE\">\n<span id=\"_CPPv3I0EN3old9BitVector9BitVectorEKNSt16initializer_listI1TEE\"></span><span id=\"_CPPv2I0EN3old9BitVector9BitVectorEKNSt16initializer_listI1TEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a599241825a5e21309bca7d809d91127e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">initializer_list</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old9BitVector9BitVectorEKNSt16initializer_listI1TEE\" title=\"old::BitVector::BitVector::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">l</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Initializer list constructor. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix8ClearRowE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix8ClearRowE6size_t\">\n<span id=\"_CPPv3N9BitMatrix8ClearRowE6size_t\"></span><span id=\"_CPPv2N9BitMatrix8ClearRowE6size_t\"></span><span id=\"BitMatrix::ClearRow__s\"></span><span class=\"target\" id=\"classBitMatrix_1a4891b13cec8c7612b4879ec0856ed206\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearRow</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">row</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits13ToRangeStringERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits13ToRangeStringERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3NK4Bits13ToRangeStringERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2NK4Bits13ToRangeStringERKNSt6stringERKNSt6stringE\"></span><span id=\"Bits::ToRangeString__ssCR.ssCRC\"></span><span class=\"target\" id=\"classBits_1aff7f6000ab3446e7eb71c2b676d6022c\"></span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToRangeString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\",\"</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ranger</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"-\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this Bits to a series of IDs with ranges condensed. </p><p>Convert this Bits object to a series of IDs with ranges condensed. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray4flipE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4flipE6size_t\">\n<span id=\"_CPPv3N3old8BitArray4flipE6size_t\"></span><span id=\"_CPPv2N3old8BitArray4flipE6size_t\"></span><span id=\"old::BitArray::flip__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a0ea1849817554d4439d039cbd32632f2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorlsEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorlsEK6size_t\">\n<span id=\"_CPPv3NK3old9BitVectorlsEK6size_t\"></span><span id=\"_CPPv2NK3old9BitVectorlsEK6size_t\"></span><span id=\"old::BitVector::lshift-operator__sCC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a743dae818528046411d19d95d0a5ba00\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator shift left\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_tEN3old8BitArray9ROTR_SELFER8BitArrayv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN3old8BitArray9ROTR_SELFER8BitArrayv\">\n<span id=\"_CPPv3I_6size_tEN3old8BitArray9ROTR_SELFEv\"></span><span id=\"_CPPv2I_6size_tEN3old8BitArray9ROTR_SELFEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">shift_size_raw</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a03fd19f29706443b6c1d701e5abd079f\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper for calling ROTATE with positive number. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVectoroRERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVectoroRERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVectoroRERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVectoroRERK9BitVector\"></span><span id=\"old::BitVector::or-assign-operator__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a33f4c702fa82c2a10d02c8f358df2814\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise OR\u2026 </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv49CountBitsRKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49CountBitsRKNSt6stringE\">\n<span id=\"_CPPv39CountBitsRKNSt6stringE\"></span><span id=\"_CPPv29CountBitsRKNSt6stringE\"></span><span id=\"CountBits__ssCR\"></span><span class=\"target\" id=\"bitset__utils_8hpp_1aaa6940662e724836ec20b84f31fc28b2\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountBits</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Count the number of bits (\u20180\u2019 or \u20181\u2019) found in a string. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7FindOneEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7FindOneEK6size_t\">\n<span id=\"_CPPv3NK4Bits7FindOneEK6size_t\"></span><span id=\"_CPPv2NK4Bits7FindOneEK6size_t\"></span><span id=\"Bits::FindOne__sCC\"></span><span class=\"target\" id=\"classBits_1a45db3ad2413da508db1d7d62cdce9293\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first one after start_pos (or -1 if none) You can loop through all 1-bit positions of Bits object \u201cbits\u201d with: </p><p>for (int pos = bits.FindOne(); pos &gt;= 0; pos = bits.FindOne(pos+1)) { \u2026 }</p><p>Return the position of the first one after start_pos; return -1 if no ones in vector. You can loop through all 1-bit positions in \u201cbits\u201d with:</p><p>for (int pos = bits.FindOne(); pos &gt;= 0; pos = bits.FindOne(pos+1)) { \u2026 } </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits5resetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits5resetEv\">\n<span id=\"_CPPv3N4Bits5resetEv\"></span><span id=\"_CPPv2N4Bits5resetEv\"></span><span id=\"Bits::reset\"></span><span class=\"target\" id=\"classBits_1a0d2369b8cbab791d08a12965d8a18b7f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray10LAST_FIELDE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10LAST_FIELDE\">\n<span id=\"_CPPv3N3old8BitArray10LAST_FIELDE\"></span><span id=\"_CPPv2N3old8BitArray10LAST_FIELDE\"></span><span id=\"old::BitArray::LAST_FIELD__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad35795ad059fa3d87f059b5aefd3c861\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">LAST_FIELD</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10NUM_FIELDSE\" title=\"old::BitArray::NUM_FIELDS\"><span class=\"n\"><span class=\"pre\">NUM_FIELDS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9FIELD_255E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9FIELD_255E\">\n<span id=\"_CPPv3N4Bits9FIELD_255E\"></span><span id=\"_CPPv2N4Bits9FIELD_255E\"></span><span id=\"Bits::FIELD_255__field_t\"></span><span class=\"target\" id=\"classBits_1a8b78d339e1b6262f1e5255cd14287a15\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_255</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">255</span></span><br/></dt><dd><p>Least significant 8 bits set to 1. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitsixE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitsixE6size_t\">\n<span id=\"_CPPv3N4BitsixE6size_t\"></span><span id=\"_CPPv2N4BitsixE6size_t\"></span><span id=\"Bits::subscript-operator__s\"></span><span class=\"target\" id=\"classBits_1a05486dfd05c9cb790d61cd18c10e3d4c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">BitProxy</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">[]</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Index operator; return proxy to bit at specified position usable as an lvalue. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7GetOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7GetOnesEv\">\n<span id=\"_CPPv3NK4Bits7GetOnesEv\"></span><span id=\"_CPPv2NK4Bits7GetOnesEv\"></span><span id=\"Bits::GetOnesC\"></span><span class=\"target\" id=\"classBits_1a91f72edbb9b2d329f791e72df852afca\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return vector of positions of all ones. </p><p>Return positions of all ones. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector14SetUInt32AtBitEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector14SetUInt32AtBitEK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old9BitVector14SetUInt32AtBitEK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old9BitVector14SetUInt32AtBitEK6size_t8uint32_t\"></span><span id=\"old::BitVector::SetUInt32AtBit__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3d34cb9a534ceda7846d5f2088b26f3e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt32AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9SetUInt64EK6size_t8uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9SetUInt64EK6size_t8uint64_t\">\n<span id=\"_CPPv3N3old9BitVector9SetUInt64EK6size_t8uint64_t\"></span><span id=\"_CPPv2N3old9BitVector9SetUInt64EK6size_t8uint64_t\"></span><span id=\"old::BitVector::SetUInt64__sC.uint64_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a5bbd3aaf497487226330bf3ca292c998\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt64</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 64-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6ImportERK9BitVectorK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6ImportERK9BitVectorK6size_t\">\n<span id=\"_CPPv3N3old9BitVector6ImportERK9BitVectorK6size_t\"></span><span id=\"_CPPv2N3old9BitVector6ImportERK9BitVectorK6size_t\"></span><span id=\"old::BitVector::Import__BitVectorCR.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab4c676a467f789aba778ea6be8ad0602\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Import</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">from_bv</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Assignment from another BitVector without changing size. </p><p>Assign from a BitVector of a different size. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8BitArrayERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayERKNSt6stringE\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayERKNSt6stringE\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayERKNSt6stringE\"></span><span id=\"old::BitArray::BitArray__ssCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab9e372f2900efab2394e15d502f76730\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a BitArray from a string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_6size_tEN3old8BitArray4CopyER8BitArrayA9IN_FIELDS_K7field_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_6size_tEN3old8BitArray4CopyER8BitArrayA9IN_FIELDS_K7field_t\">\n<span id=\"_CPPv3I_6size_t_6size_tEN3old8BitArray4CopyEA9IN_FIELDS_K7field_t\"></span><span id=\"_CPPv2I_6size_t_6size_tEN3old8BitArray4CopyEAIN_FIELDS_K7field_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IN_FIELDS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">COPY_FIELDS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10NUM_FIELDSE\" title=\"old::BitArray::NUM_FIELDS\"><span class=\"n\"><span class=\"pre\">NUM_FIELDS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1acc61e9aab9e8abf7e5c3bc8e13c4888a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Copy</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_bits</span></span><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old8BitArray4CopyER8BitArrayA9IN_FIELDS_K7field_t\" title=\"old::BitArray::Copy::IN_FIELDS\"><span class=\"n\"><span class=\"pre\">IN_FIELDS</span></span></a><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8ADD_SELFERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8ADD_SELFERK4Bits\">\n<span id=\"_CPPv3N4Bits8ADD_SELFERK4Bits\"></span><span id=\"_CPPv2N4Bits8ADD_SELFERK4Bits\"></span><span id=\"Bits::ADD_SELF__BitsCR\"></span><span class=\"target\" id=\"classBits_1a92a259083aee035c24035b59782fc690\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ADD_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">set2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Sums another Bits object onto this one (following uint rules); returns *this. </p><p>Addition of two Bitsets. Wraps if it overflows. Returns this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NR3old9BitVectoraSERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old9BitVectoraSERKNSt6stringE\">\n<span id=\"_CPPv3NR3old9BitVectoraSERKNSt6stringE\"></span><span id=\"_CPPv2NR3old9BitVectoraSERKNSt6stringE\"></span><span id=\"old::BitVector::assign-operator__ssCRR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a7b5bc5d67b94f586ede47b85c62e487d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"></span><span id=\"old::BitArray::PrintAsRange__osR.ssCR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af8c1edfdc143c3edaeae02d5c734f3b6\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintAsRange</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\",\"</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ranger</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"-\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print the ones in a range format. E.g., 2-5,7,10-15. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits13SetUInt8AtBitEK6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits13SetUInt8AtBitEK6size_t7uint8_t\">\n<span id=\"_CPPv3N4Bits13SetUInt8AtBitEK6size_t7uint8_t\"></span><span id=\"_CPPv2N4Bits13SetUInt8AtBitEK6size_t7uint8_t\"></span><span id=\"Bits::SetUInt8AtBit__sC.uint8_t\"></span><span class=\"target\" id=\"classBits_1a1a76d4f7b6b1fbca9660ea78cf4a5c2e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt8AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 8-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits10Byte2FieldEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits10Byte2FieldEK6size_t\">\n<span id=\"_CPPv3N4Bits10Byte2FieldEK6size_t\"></span><span id=\"_CPPv2N4Bits10Byte2FieldEK6size_t\"></span><span id=\"Bits::Byte2Field__sCCE\"></span><span class=\"target\" id=\"classBits_1a775e83e71fbf0e749ccbf20adee742c7\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Byte2Field</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayI8NUM_BITS9ZERO_LEFTERK5FUN_T6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayI8NUM_BITS9ZERO_LEFTERK5FUN_T6size_t6size_t\">\n<span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a024587fcf500fc2fbe07136bfd5b16e9\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ApplyRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayI8NUM_BITS9ZERO_LEFTERK5FUN_T6size_t6size_t\" title=\"old::BitArray::ApplyRange::FUN_T\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">fun</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArraycvbEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArraycvbEv\">\n<span id=\"_CPPv3NK3old8BitArraycvbEv\"></span><span id=\"_CPPv2NK3old8BitArraycvbEv\"></span><span id=\"old::BitArray::castto-b-operatorC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8a511e2bae948793650b6c7d554cf89d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Casting a BitArray to bool identifies if ANY bits are set to 1. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorE6size_tR6RandomKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorE6size_tR6RandomKi\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorE6size_tR6RandomKi\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorE6size_tR6RandomKi\"></span><span id=\"old::BitVector::BitVector__s.RandomR.iC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1acfce033e728f6d18957d75ee470babfa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitVector with provided number of 1\u2019s. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix7DLShiftEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix7DLShiftEv\">\n<span id=\"_CPPv3NK9BitMatrix7DLShiftEv\"></span><span id=\"_CPPv2NK9BitMatrix7DLShiftEv\"></span><span id=\"BitMatrix::DLShiftC\"></span><span class=\"target\" id=\"classBitMatrix_1a63d0bdb3a4f46601df00c4cb8519ed57\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DLShift</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits4testE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits4testE6size_t\">\n<span id=\"_CPPv3NK4Bits4testE6size_t\"></span><span id=\"_CPPv2NK4Bits4testE6size_t\"></span><span id=\"Bits::test__sC\"></span><span class=\"target\" id=\"classBits_1a596da88c371d716e53c0dc1742b1498f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">test</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector5ClearEK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector5ClearEK6size_tK6size_t\">\n<span id=\"_CPPv3N3old9BitVector5ClearEK6size_tK6size_t\"></span><span id=\"_CPPv2N3old9BitVector5ClearEK6size_tK6size_t\"></span><span id=\"old::BitVector::Clear__sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a2cf3c264195eab823593c42ee909e01c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set bits to 0 in the range [start, stop) </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9GetCTSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9GetCTSizeEv\">\n<span id=\"_CPPv3N4Bits9GetCTSizeEv\"></span><span id=\"_CPPv2N4Bits9GetCTSizeEv\"></span><span id=\"Bits::GetCTSizeCE\"></span><span class=\"target\" id=\"classBits_1ac685d114614f72a5ff0c66dd7c9d4b5a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetCTSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>How many bits are locked in a compile time? </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7field_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7field_tE\">\n<span id=\"_CPPv3N4Bits7field_tE\"></span><span id=\"_CPPv2N4Bits7field_tE\"></span><span class=\"target\" id=\"classBits_1a5c32ffd1acf267f68f5c31f254c5bb4e\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">field_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/bitset_utils.html#_CPPv412bits_field_t\" title=\"bits_field_t\"><span class=\"n\"><span class=\"pre\">bits_field_t</span></span></a><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3ADDERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3ADDERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3ADDERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3ADDERK8BitArray\"></span><span id=\"old::BitArray::ADD__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a428cfd79a150956cce1a9876fdfce207\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ADD</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Addition of two BitArrays. Wraps if it overflows. Returns result. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrixneERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrixneERK9BitMatrix\">\n<span id=\"_CPPv3NK9BitMatrixneERK9BitMatrix\"></span><span id=\"_CPPv2NK9BitMatrixneERK9BitMatrix\"></span><span id=\"BitMatrix::neq-operator__BitMatrixCRC\"></span><span class=\"target\" id=\"classBitMatrix_1a59c4a32163c6841db025e68710879a56\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">!=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I_6size_tE15StaticBitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tE15StaticBitVector\">\n<span id=\"_CPPv3I_6size_tE15StaticBitVector\"></span><span id=\"_CPPv2I_6size_tE15StaticBitVector\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"Bits_8hpp_1ae9d65ab65fc04ca4ef076abdb2f1e0bf\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">StaticBitVector</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/Bits_Data.html#_CPPv4I_6size_tE15Bits_StaticData\" title=\"Bits_StaticData\"><span class=\"n\"><span class=\"pre\">Bits_StaticData</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tE15StaticBitVector\" title=\"StaticBitVector::MAX_BITS\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NR3old9BitVectoraSERR9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old9BitVectoraSERR9BitVector\">\n<span id=\"_CPPv3NR3old9BitVectoraSERR9BitVector\"></span><span id=\"_CPPv2NR3old9BitVectoraSERR9BitVector\"></span><span id=\"old::BitVector::assign-operator__BitVectorRRR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a01153f917676be37d095eff6004e432c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Move operator. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray7BytePtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7BytePtrEv\">\n<span id=\"_CPPv3NK3old8BitArray7BytePtrEv\"></span><span id=\"_CPPv2NK3old8BitArray7BytePtrEv\"></span><span id=\"old::BitArray::BytePtrC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1abbf457be0f78029b17e6d3ad39f1fae9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits11ROTATE_SELFEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits11ROTATE_SELFEKi\">\n<span id=\"_CPPv3N4Bits11ROTATE_SELFEKi\"></span><span id=\"_CPPv2N4Bits11ROTATE_SELFEKi\"></span><span id=\"Bits::ROTATE_SELF__iC\"></span><span class=\"target\" id=\"classBits_1a7b088a35346b68ebc5721cdafbdf6bdf\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTATE_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Positive rotates right and negative goes left; store here, and return *this. </p><p>Positive rotates go right and negative rotates go left (0 does nothing); store result here, and return this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NR3old9BitVectoraSERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old9BitVectoraSERK9BitVector\">\n<span id=\"_CPPv3NR3old9BitVectoraSERK9BitVector\"></span><span id=\"_CPPv2NR3old9BitVectoraSERK9BitVector\"></span><span id=\"old::BitVector::assign-operator__BitVectorCRR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1acaa22786cd4f33964b530ab9cc8ee50c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray10PrintDebugERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10PrintDebugERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old8BitArray10PrintDebugERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old8BitArray10PrintDebugERNSt7ostreamE\"></span><span id=\"old::BitArray::PrintDebug__osRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a283fc58808e0f908acacf6816793b977\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintDebug</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print out details about the internals of the BitArray. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray13ToRangeStringERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray13ToRangeStringERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray13ToRangeStringERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray13ToRangeStringERKNSt6stringERKNSt6stringE\"></span><span id=\"old::BitArray::ToRangeString__ssCR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1a871fdd17104f9bf7b3954e9a9f7e30\"></span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToRangeString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\",\"</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ranger</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"-\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to a series of IDs with ranges condensed. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9FieldSpanEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9FieldSpanEv\">\n<span id=\"_CPPv3N4Bits9FieldSpanEv\"></span><span id=\"_CPPv2N4Bits9FieldSpanEv\"></span><span id=\"Bits::FieldSpan\"></span><span class=\"target\" id=\"classBits_1a49dbf8cfff580cab67cd1d5c4a4eedbb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">span</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldSpan</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return a span with all fields in order. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray14GetUInt32AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray14GetUInt32AtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray14GetUInt32AtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray14GetUInt32AtBitE6size_t\"></span><span id=\"old::BitArray::GetUInt32AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a3c6b529df9a043eb8ada5f29eaf42bd6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt32AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits14SetUInt16AtBitEK6size_t8uint16_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits14SetUInt16AtBitEK6size_t8uint16_t\">\n<span id=\"_CPPv3N4Bits14SetUInt16AtBitEK6size_t8uint16_t\"></span><span id=\"_CPPv2N4Bits14SetUInt16AtBitEK6size_t8uint16_t\"></span><span id=\"Bits::SetUInt16AtBit__sC.uint16_t\"></span><span class=\"target\" id=\"classBits_1a42eb009f245fa670d840a6ae12e85f34\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt16AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 16-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitseOERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitseOERK4Bits\">\n<span id=\"_CPPv3N4BitseOERK4Bits\"></span><span id=\"_CPPv2N4BitseOERK4Bits\"></span><span id=\"Bits::xor-assign-operator__BitsCR\"></span><span class=\"target\" id=\"classBits_1acc90641c53f731633f0a580831a0b27c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise XOR\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector13Byte2FieldPosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector13Byte2FieldPosEK6size_t\">\n<span id=\"_CPPv3N3old9BitVector13Byte2FieldPosEK6size_t\"></span><span id=\"_CPPv2N3old9BitVector13Byte2FieldPosEK6size_t\"></span><span id=\"old::BitVector::Byte2FieldPos__sCCE\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a891fe49f0db64db74cc754caba306e8f\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Byte2FieldPos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray14GetUInt64AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray14GetUInt64AtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray14GetUInt64AtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray14GetUInt64AtBitE6size_t\"></span><span id=\"old::BitArray::GetUInt64AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a291ab20662b0941f56e54e2019afeff6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt64AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 64-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7OR_SELFERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7OR_SELFERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVector7OR_SELFERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVector7OR_SELFERK9BitVector\"></span><span id=\"old::BitVector::OR_SELF__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a35cf363bf8bcb0cb2482368f649be74d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean OR with this BitVector, store result here, and return this object. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9GetUInt32E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9GetUInt32E6size_t\">\n<span id=\"_CPPv3NK4Bits9GetUInt32E6size_t\"></span><span id=\"_CPPv2NK4Bits9GetUInt32E6size_t\"></span><span id=\"Bits::GetUInt32__sC\"></span><span class=\"target\" id=\"classBits_1a33d2ea7c5cb4a9b37b54ac28f632c1c9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt32</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray11TOTAL_BYTESE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11TOTAL_BYTESE\">\n<span id=\"_CPPv3N3old8BitArray11TOTAL_BYTESE\"></span><span id=\"_CPPv2N3old8BitArray11TOTAL_BYTESE\"></span><span id=\"old::BitArray::TOTAL_BYTES__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa4050780197bbedef1b626e264c5fac6\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TOTAL_BYTES</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">+</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">&gt;&gt;</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector4noneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector4noneEv\">\n<span id=\"_CPPv3NK3old9BitVector4noneEv\"></span><span id=\"_CPPv2NK3old9BitVector4noneEv\"></span><span id=\"old::BitVector::noneC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a9d3b07b61d74a6dc30b902a0bd1821ba\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">none</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bEN4Bits6AppendER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bEN4Bits6AppendER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2E\">\n<span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a4e836282da430096375d49a115f29fc2\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Append</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits6AppendER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::Append::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits6AppendER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::Append::ZERO_LEFT2\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Concatenate another Bits object on to the end of this one. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8ADD_SELFERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8ADD_SELFERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVector8ADD_SELFERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVector8ADD_SELFERK9BitVector\"></span><span id=\"old::BitVector::ADD_SELF__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3c55d00cd23d0e24ee06cfc9bcb0bcf8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ADD_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">set2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Addition of two BitVectors. Wraps if it overflows. Returns this object.</p><p>Addition of two Bitsets. Wraps if it overflows. Returns this object. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix4FlipE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix4FlipE6size_t6size_t\">\n<span id=\"_CPPv3N9BitMatrix4FlipE6size_t6size_t\"></span><span id=\"_CPPv2N9BitMatrix4FlipE6size_t6size_t\"></span><span id=\"BitMatrix::Flip__s.s\"></span><span class=\"target\" id=\"classBitMatrix_1a0bdf70a5888b5480b7b4190da462ed6f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">col</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">row</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9NAND_SELFERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9NAND_SELFERK4Bits\">\n<span id=\"_CPPv3N4Bits9NAND_SELFERK4Bits\"></span><span id=\"_CPPv2N4Bits9NAND_SELFERK4Bits\"></span><span id=\"Bits::NAND_SELF__BitsCR\"></span><span class=\"target\" id=\"classBits_1a331c31e59533794704ec1d01484ac176\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NAND_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NAND with this Bits, store result here, and return this object. </p><p>Perform a Boolean NAND with this Bits object, store result here, and return this object. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I_6size_tEN4Bits4BitsERKNSt6bitsetI8NUM_BITSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN4Bits4BitsERKNSt6bitsetI8NUM_BITSEE\">\n<span id=\"_CPPv3I_6size_tEN4Bits4BitsERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"_CPPv2I_6size_tEN4Bits4BitsERKNSt6bitsetI8NUM_BITSEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a0ba0ab8229ada6e66a3f1d4d6e7fa12e\"></span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">bitset</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tEN4Bits4BitsERKNSt6bitsetI8NUM_BITSEE\" title=\"Bits::Bits::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitset</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a Bits from a std::bitset. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9SetUInt16EK6size_t8uint16_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9SetUInt16EK6size_t8uint16_t\">\n<span id=\"_CPPv3N4Bits9SetUInt16EK6size_t8uint16_t\"></span><span id=\"_CPPv2N4Bits9SetUInt16EK6size_t8uint16_t\"></span><span id=\"Bits::SetUInt16__sC.uint16_t\"></span><span class=\"target\" id=\"classBits_1a306939ea4467950d86835ce3c4059437\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt16</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 16-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK4Bits5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK4Bits5PrintERNSt7ostreamE\"></span><span id=\"Bits::Print__osRC\"></span><span class=\"target\" id=\"classBits_1afaced0675f78f02a22ce4e35ec5a0991\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Regular print function (from least significant bit to most) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray5ClearE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5ClearE6size_t\">\n<span id=\"_CPPv3N3old8BitArray5ClearE6size_t\"></span><span id=\"_CPPv2N3old8BitArray5ClearE6size_t\"></span><span id=\"old::BitArray::Clear__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae5b64568bfd17e5bf3f33b1978f862dc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set specific bit to 0. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix6Has2x2Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix6Has2x2Ev\">\n<span id=\"_CPPv3NK9BitMatrix6Has2x2Ev\"></span><span id=\"_CPPv2NK9BitMatrix6Has2x2Ev\"></span><span id=\"BitMatrix::Has2x2C\"></span><span class=\"target\" id=\"classBitMatrix_1af05147b2a61e0abd5e665e9484d10334\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Has2x2</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Does this bit matrix have any 2x2 square of ones in it? </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7REVERSEEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7REVERSEEv\">\n<span id=\"_CPPv3NK4Bits7REVERSEEv\"></span><span id=\"_CPPv2NK4Bits7REVERSEEv\"></span><span id=\"Bits::REVERSEC\"></span><span class=\"target\" id=\"classBits_1a274b176a6a3467d9031ef531479d3fe3\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">REVERSE</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Reverse order of bits in the bitset. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorE6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorE6size_tb\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorE6size_tb\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorE6size_tb\"></span><span id=\"old::BitVector::BitVector__s.b\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aa15b7e5a1995de57903a807a349a6e76\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">init_val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Build a new BitVector with specified bit count (default 0) and initialization (default 0) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector11ROTATE_SELFEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector11ROTATE_SELFEKi\">\n<span id=\"_CPPv3N3old9BitVector11ROTATE_SELFEKi\"></span><span id=\"_CPPv2N3old9BitVector11ROTATE_SELFEKi\"></span><span id=\"old::BitVector::ROTATE_SELF__iC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a2b6d146c61603f61814ebf583ba77462\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTATE_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Positive rotates go right and negative rotates go left (0 does nothing); store result here, and return this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3AnyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3AnyEv\">\n<span id=\"_CPPv3NK3old9BitVector3AnyEv\"></span><span id=\"_CPPv2NK3old9BitVector3AnyEv\"></span><span id=\"old::BitVector::AnyC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a39887f7afb724e23740f84bf6b330b3d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Any</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if ANY bits are set to 1, otherwise return false. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3HasE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3HasE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray3HasE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray3HasE6size_t\"></span><span id=\"old::BitArray::Has__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a088e58d4f58a5eab4cab32ed21219a84\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Has</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>A safe version of Get() for indexing out of range. Useful for representing collections. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray12GetNumStatesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12GetNumStatesEv\">\n<span id=\"_CPPv3N3old8BitArray12GetNumStatesEv\"></span><span id=\"_CPPv2N3old8BitArray12GetNumStatesEv\"></span><span id=\"old::BitArray::GetNumStatesCE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa1b714bcc226f90fa5be4ac48ed50945\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNumStates</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>How many distinct values could be held in this BitArray? </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7FieldIDEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7FieldIDEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray7FieldIDEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray7FieldIDEK6size_t\"></span><span id=\"old::BitArray::FieldID__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab5aff40a64367d432405d1d72f1b2dcc\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldID</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3HasE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3HasE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector3HasE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector3HasE6size_t\"></span><span id=\"old::BitVector::Has__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a805ed38d63a2f39349fd8197269bdd3a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Has</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>A safe version of Get() for indexing out of range. Useful for representing collections. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8BitArrayER6Randomd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayER6Randomd\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayER6Randomd\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayER6Randomd\"></span><span id=\"old::BitArray::BitArray__RandomR.double\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a394c09ca6317f648d2e832292cbdd2e4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitArray with provided PROBABILITY of 1\u2019s. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix7URShiftEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix7URShiftEv\">\n<span id=\"_CPPv3NK9BitMatrix7URShiftEv\"></span><span id=\"_CPPv2NK9BitMatrix7URShiftEv\"></span><span id=\"BitMatrix::URShiftC\"></span><span class=\"target\" id=\"classBitMatrix_1a9d7828938634d3a120f2e39bcc537a23\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">URShift</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3GetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3GetE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray3GetE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray3GetE6size_t\"></span><span id=\"old::BitArray::Get__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afcc369eac0994753860a1a71221e6662\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the bit as a specified index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray12SetUIntAtBitEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12SetUIntAtBitEK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old8BitArray12SetUIntAtBitEK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old8BitArray12SetUIntAtBitEK6size_t8uint32_t\"></span><span id=\"old::BitArray::SetUIntAtBit__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a26343500678fe2bcee69f585a3896c5d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUIntAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>By default, update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits14SetUInt32AtBitEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits14SetUInt32AtBitEK6size_t8uint32_t\">\n<span id=\"_CPPv3N4Bits14SetUInt32AtBitEK6size_t8uint32_t\"></span><span id=\"_CPPv2N4Bits14SetUInt32AtBitEK6size_t8uint32_t\"></span><span id=\"Bits::SetUInt32AtBit__sC.uint32_t\"></span><span class=\"target\" id=\"classBits_1a9ca44a78bd44a936e6b7178e24b724b4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt32AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"api/BitSet.html#_CPPv4I_6size_tEN3old6BitSetE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN3old6BitSetE\">\n<span id=\"_CPPv3I_6size_tEN3old6BitSetE\"></span><span id=\"_CPPv2I_6size_tEN3old6BitSetE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"namespaceold_1ac56784bf29919b9528adae560730d573\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/BitArray.html#_CPPv43old\" title=\"old\"><span class=\"n\"><span class=\"pre\">old</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"api/BitArray.html#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tEN3old6BitSetE\" title=\"old::BitSet::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits12GetNumStatesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits12GetNumStatesEv\">\n<span id=\"_CPPv3NK4Bits12GetNumStatesEv\"></span><span id=\"_CPPv2NK4Bits12GetNumStatesEv\"></span><span id=\"Bits::GetNumStatesCCE\"></span><span class=\"target\" id=\"classBits_1abf6ebcc02420c1b74859ba0894257834\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNumStates</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many distinct values could be held in this Bits? </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8BitArrayER6Random6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayER6Random6size_t\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayER6Random6size_t\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayER6Random6size_t\"></span><span id=\"old::BitArray::BitArray__RandomR.s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a33767c91554fa9dd62db8008def8a343\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitArray with provided NUMBER of 1\u2019s. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix4FlipE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix4FlipE6size_t\">\n<span id=\"_CPPv3N9BitMatrix4FlipE6size_t\"></span><span id=\"_CPPv2N9BitMatrix4FlipE6size_t\"></span><span id=\"BitMatrix::Flip__s\"></span><span class=\"target\" id=\"classBitMatrix_1ac87bb6a26392fdde98da242757fb0d61\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorixE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorixE6size_t\">\n<span id=\"_CPPv3NK3old9BitVectorixE6size_t\"></span><span id=\"_CPPv2NK3old9BitVectorixE6size_t\"></span><span id=\"old::BitVector::subscript-operator__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a6b58187f6710d52008352346ae691f86\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">[]</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Const index operator &amp;#8212; return the bit at the specified position. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector13SetUInt8AtBitEK6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector13SetUInt8AtBitEK6size_t7uint8_t\">\n<span id=\"_CPPv3N3old9BitVector13SetUInt8AtBitEK6size_t7uint8_t\"></span><span id=\"_CPPv2N3old9BitVector13SetUInt8AtBitEK6size_t7uint8_t\"></span><span id=\"old::BitVector::SetUInt8AtBit__sC.uint8_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a14d8f73856af61935b93ce7986fb0cba\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt8AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 8-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitsplERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitsplERK4Bits\">\n<span id=\"_CPPv3NK4BitsplERK4Bits\"></span><span id=\"_CPPv2NK4BitsplERK4Bits\"></span><span id=\"Bits::add-operator__BitsCRC\"></span><span class=\"target\" id=\"classBits_1a2d158faa6ef90dfd886d9e96b6adfb79\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">+</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator plus\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVectorE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVectorE\">\n<span id=\"_CPPv3N3old9BitVectorE\"></span><span id=\"_CPPv2N3old9BitVectorE\"></span><span id=\"old::BitVector\"></span><span class=\"target\" id=\"classold_1_1BitVector\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><br/></dt><dd><p>A drop-in replacement for std::vector&lt;bool&gt;, but with extra bitwise logic features.</p><p>This class stores an arbitrary number of bits in a set of \u201cfields\u201d (typically 32 bits or 64 bits per field, depending on which should be faster.) Individual bits can be extracted, -or- bitwise logic (including more complex bit magic) can be used on the groups of bits. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray13Byte2FieldPosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray13Byte2FieldPosEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray13Byte2FieldPosEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray13Byte2FieldPosEK6size_t\"></span><span id=\"old::BitArray::Byte2FieldPos__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae399b0fc2436e4dc19f90d007ab5c7f3\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Byte2FieldPos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray8GetBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8GetBytesEv\">\n<span id=\"_CPPv3NK3old8BitArray8GetBytesEv\"></span><span id=\"_CPPv2NK3old8BitArray8GetBytesEv\"></span><span id=\"old::BitArray::GetBytesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aad533bb91ab148e4073bd8f535f31735\"></span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">span</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get a read-only view into the internal array used by BitArray. </p></dd>", "a[href=\"api/Bits_Data.html#_CPPv416Bits_DynamicData\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416Bits_DynamicData\">\n<span id=\"_CPPv316Bits_DynamicData\"></span><span id=\"_CPPv216Bits_DynamicData\"></span><span class=\"target\" id=\"Bits__Data_8hpp_1a580f800f2b155f908a037f3225932ed6\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits_DynamicData</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">internal</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">Bits_Data</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">internal</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">Bits_Data_Mem_Dynamic</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray4flipEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4flipEv\">\n<span id=\"_CPPv3N3old8BitArray4flipEv\"></span><span id=\"_CPPv2N3old8BitArray4flipEv\"></span><span id=\"old::BitArray::flip\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a47eda9be6fc67da19ab953c3d7b2aff0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3allEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3allEv\">\n<span id=\"_CPPv3NK3old8BitArray3allEv\"></span><span id=\"_CPPv2NK3old8BitArray3allEv\"></span><span id=\"old::BitArray::allC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad74bb0131adf0aef18e5a505902035aa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">all</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3GetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3GetE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector3GetE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector3GetE6size_t\"></span><span id=\"old::BitVector::Get__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a66a45ba73891cf10d99375bf9fcdf6a7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the bit value from the specified index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector15FlipRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector15FlipRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N3old9BitVector15FlipRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N3old9BitVector15FlipRandomCountER6RandomK6size_t\"></span><span id=\"old::BitVector::FlipRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ac5dca53a1fa08ff3f9329a8e36af2bf0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FlipRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip a specified number of random bits. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6resizeENSt6size_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6resizeENSt6size_tE\">\n<span id=\"_CPPv3N3old9BitVector6resizeENSt6size_tE\"></span><span id=\"_CPPv2N3old9BitVector6resizeENSt6size_tE\"></span><span id=\"old::BitVector::resize__std::s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ad534a922ac511b7925a4d3fea360aead\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">resize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">new_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArraylSEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArraylSEK6size_t\">\n<span id=\"_CPPv3N3old8BitArraylSEK6size_t\"></span><span id=\"_CPPv2N3old8BitArraylSEK6size_t\"></span><span id=\"old::BitArray::lshift-assign-operator__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a24b854f502449c26e24d0d7ca3182d0a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator shift left\u2026 </p></dd>", "a[href=\"api/BitSet.html#_CPPv43old\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43old\">\n<span id=\"_CPPv33old\"></span><span id=\"_CPPv23old\"></span><span id=\"old\"></span><span class=\"target\" id=\"namespaceold\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">old</span></span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArrayaNERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayaNERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArrayaNERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArrayaNERK8BitArray\"></span><span id=\"old::BitArray::and-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6a6e25ba0d5d3fcb442e75b14a33bc08\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise AND\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArraylsERNSt7ostreamERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArraylsERNSt7ostreamERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArraylsERNSt7ostreamERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArraylsERNSt7ostreamERK8BitArray\"></span><span id=\"old::BitArray::lshift-operator__osR.BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1adcc482760b9ab048016aabf7f7c39171\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">friend</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bs</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Overload ostream operator to return Print. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector8GetUInt8E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector8GetUInt8E6size_t\">\n<span id=\"_CPPv3NK3old9BitVector8GetUInt8E6size_t\"></span><span id=\"_CPPv2NK3old9BitVector8GetUInt8E6size_t\"></span><span id=\"old::BitVector::GetUInt8__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a182ed788945888bfba83e25741619e78\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt8</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits8FindZeroEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits8FindZeroEi\">\n<span id=\"_CPPv3NK4Bits8FindZeroEi\"></span><span id=\"_CPPv2NK4Bits8FindZeroEi\"></span><span id=\"Bits::FindZero__iC\"></span><span class=\"target\" id=\"classBits_1ad98dd6d175d8960f7d1465a381a3b754\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindZero</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Special version of FindZero takes int; common way to call. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8FieldPosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8FieldPosEK6size_t\">\n<span id=\"_CPPv3N4Bits8FieldPosEK6size_t\"></span><span id=\"_CPPv2N4Bits8FieldPosEK6size_t\"></span><span id=\"Bits::FieldPos__sCCE\"></span><span class=\"target\" id=\"classBits_1a38128a1b654bc755521974c4ca251d57\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldPos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVectorixE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVectorixE6size_t\">\n<span id=\"_CPPv3N3old9BitVectorixE6size_t\"></span><span id=\"_CPPv2N3old9BitVectorixE6size_t\"></span><span id=\"old::BitVector::subscript-operator__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a629fe57a2dd28fb00042848d7077a537\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">BitProxy</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">[]</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Index operator &amp;#8212; return a proxy to the bit at the specified position so it can be an lvalue. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorleERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorleERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVectorleERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVectorleERK9BitVector\"></span><span id=\"old::BitVector::lte-operator__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a9aad1059716c5f84bb9ba55b56e05e46\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits4NoneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits4NoneEv\">\n<span id=\"_CPPv3NK4Bits4NoneEv\"></span><span id=\"_CPPv2NK4Bits4NoneEv\"></span><span id=\"Bits::NoneC\"></span><span class=\"target\" id=\"classBits_1a9a5705e5e8d75da3e12edb9cf59878c1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">None</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if NO bits are set to 1, otherwise return false. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector5frontEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector5frontEv\">\n<span id=\"_CPPv3NK3old9BitVector5frontEv\"></span><span id=\"_CPPv2NK3old9BitVector5frontEv\"></span><span id=\"old::BitVector::frontC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a5190d61901ddec5b1534975a5844b03d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">front</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray8RawBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8RawBytesEv\">\n<span id=\"_CPPv3NK3old8BitArray8RawBytesEv\"></span><span id=\"_CPPv2NK3old8BitArray8RawBytesEv\"></span><span id=\"old::BitArray::RawBytesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a3bf46397c32395e983c9bf7fa3e60aa9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get a read-only pointer to the internal array used by BitArray. </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E13find_last_bit6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E13find_last_bit6size_t1T\">\n<span id=\"_CPPv3I0E13find_last_bit1T\"></span><span id=\"_CPPv2I0E13find_last_bit1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1aa45c4adfa63b08e273327e545835d98c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">find_last_bit</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E13find_last_bit6size_t1T\" title=\"find_last_bit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return the position of the first one bit. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix7NumRowsEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix7NumRowsEv\">\n<span id=\"_CPPv3NK9BitMatrix7NumRowsEv\"></span><span id=\"_CPPv2NK9BitMatrix7NumRowsEv\"></span><span id=\"BitMatrix::NumRowsCCE\"></span><span class=\"target\" id=\"classBitMatrix_1af71b87f7825180bc700bba763235e563\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NumRows</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many rows are in this matrix? </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bE4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bE4Bits\">\n<span id=\"_CPPv3I0_bE4Bits\"></span><span id=\"_CPPv2I0_bE4Bits\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><br/></dt><dd><p>A flexible base template to handle BitVector, BitArray, BitSet, &amp; other combinations. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8FieldPtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8FieldPtrEv\">\n<span id=\"_CPPv3N4Bits8FieldPtrEv\"></span><span id=\"_CPPv2N4Bits8FieldPtrEv\"></span><span id=\"Bits::FieldPtr\"></span><span class=\"target\" id=\"classBits_1a24564ebbaf65cc19e2d293b3c6fe5e2f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldPtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return a pointer to the set of fields. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector8GetValueEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector8GetValueEv\">\n<span id=\"_CPPv3NK3old9BitVector8GetValueEv\"></span><span id=\"_CPPv2NK3old9BitVector8GetValueEv\"></span><span id=\"old::BitVector::GetValueC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a60e27a60acd94c1c15ee9ef0db958d04\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValue</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the overall value of this BitVector, using a uint encoding, but including all bits and returning the value as a double.</p><p>Get the overall value of this BitSet, using a uint encoding, but including all bits and returning the value as a double. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7GetUIntE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7GetUIntE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector7GetUIntE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector7GetUIntE6size_t\"></span><span id=\"old::BitVector::GetUInt__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae00f3974879bd8deda3f53eaed0dfbe4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector16CountOnes_SparseEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector16CountOnes_SparseEv\">\n<span id=\"_CPPv3NK3old9BitVector16CountOnes_SparseEv\"></span><span id=\"_CPPv2NK3old9BitVector16CountOnes_SparseEv\"></span><span id=\"old::BitVector::CountOnes_SparseC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a480f9724e1f6fbf8f98390c31ea84100\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes_Sparse</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Faster counting of ones for very sparse bit vectors. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits5_dataE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits5_dataE\">\n<span id=\"_CPPv3N4Bits5_dataE\"></span><span id=\"_CPPv2N4Bits5_dataE\"></span><span id=\"Bits::_data__DATA_T\"></span><span class=\"target\" id=\"classBits_1ab385f8676d1e0182fa28abf8d275a563\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">_data</span></span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsEb\">\n<span id=\"_CPPv3N4Bits4BitsEb\"></span><span id=\"_CPPv2N4Bits4BitsEb\"></span><span id=\"Bits::Bits__b\"></span><span class=\"target\" id=\"classBits_1a7d50b2328a03a9f164999e2aba1ec463\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">init_val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Default constructor; will build the default number of bits (often 0, but not always) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray7GetUIntE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7GetUIntE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray7GetUIntE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray7GetUIntE6size_t\"></span><span id=\"old::BitArray::GetUInt__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a47de2617fb4044e9c2918eb73f8806ca\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>By default, retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector18LongestSegmentOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector18LongestSegmentOnesEv\">\n<span id=\"_CPPv3NK3old9BitVector18LongestSegmentOnesEv\"></span><span id=\"_CPPv2NK3old9BitVector18LongestSegmentOnesEv\"></span><span id=\"old::BitVector::LongestSegmentOnesC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1afd857c39d18bb5feb8698c4050dfcdf3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">LongestSegmentOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find the length of the longest continuous series of ones. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENR4BitsaSER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENR4BitsaSER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2E\">\n<span id=\"_CPPv3I0_bENR4BitsaSERK4BitsI7DATA2_T10ZERO_LEFT2E\"></span><span id=\"_CPPv2I0_bENR4BitsaSERK4BitsI7DATA2_T10ZERO_LEFT2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1aa8911f394c7a26463975ddd65b00fbcb\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::operator=::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::operator=::ZERO_LEFT2\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator for other Bits object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3ANDERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3ANDERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVector3ANDERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVector3ANDERK9BitVector\"></span><span id=\"old::BitVector::AND__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a4fa04383dd8cf02d83dc0d4f9c60a713\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AND</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean AND on this BitVector and return the result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9MaskFieldE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9MaskFieldE6size_t\">\n<span id=\"_CPPv3NK4Bits9MaskFieldE6size_t\"></span><span id=\"_CPPv2NK4Bits9MaskFieldE6size_t\"></span><span id=\"Bits::MaskField__sCCE\"></span><span class=\"target\" id=\"classBits_1a38a589e8958b99923388336f66cf1e0d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaskField</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">mask_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4I0ENK3old9BitVector15GetValueAtIndexE1TK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK3old9BitVector15GetValueAtIndexE1TK6size_t\">\n<span id=\"_CPPv3I0ENK3old9BitVector15GetValueAtIndexEK6size_t\"></span><span id=\"_CPPv2I0ENK3old9BitVector15GetValueAtIndexEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a597f137a11566b42c21aa8e8081216cb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0ENK3old9BitVector15GetValueAtIndexE1TK6size_t\" title=\"old::BitVector::GetValueAtIndex::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValueAtIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get specified type at a given index (in steps of that type size) </p></dd>", "a[href=\"api/Bits.html#_CPPv4I_6size_tE14StaticBitValue\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tE14StaticBitValue\">\n<span id=\"_CPPv3I_6size_tE14StaticBitValue\"></span><span id=\"_CPPv2I_6size_tE14StaticBitValue\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"Bits_8hpp_1a9cd40719f1e60fe0afed98d7ad022a38\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">StaticBitValue</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/Bits_Data.html#_CPPv4I_6size_tE15Bits_StaticData\" title=\"Bits_StaticData\"><span class=\"n\"><span class=\"pre\">Bits_StaticData</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tE14StaticBitValue\" title=\"StaticBitValue::MAX_BITS\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK9BitMatrix5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK9BitMatrix5PrintERNSt7ostreamE\"></span><span id=\"BitMatrix::Print__osRC\"></span><span class=\"target\" id=\"classBitMatrix_1a39328118dded7c12086a1166fddf0391\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">os</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4backEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4backEv\">\n<span id=\"_CPPv3N4Bits4backEv\"></span><span id=\"_CPPv2N4Bits4backEv\"></span><span id=\"Bits::back\"></span><span class=\"target\" id=\"classBits_1a5f32b01da63728f2b5682a61de237b00\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">back</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8pop_backEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8pop_backEv\">\n<span id=\"_CPPv3N4Bits8pop_backEv\"></span><span id=\"_CPPv2N4Bits8pop_backEv\"></span><span id=\"Bits::pop_back\"></span><span class=\"target\" id=\"classBits_1a44b8116a5f6a3188a67d26090724385a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">pop_back</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix7UpShiftEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix7UpShiftEv\">\n<span id=\"_CPPv3NK9BitMatrix7UpShiftEv\"></span><span id=\"_CPPv2NK9BitMatrix7UpShiftEv\"></span><span id=\"BitMatrix::UpShiftC\"></span><span class=\"target\" id=\"classBitMatrix_1a4fd840b4a759b239392bb2e9a4b0ff09\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">UpShift</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix3GetE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix3GetE6size_t6size_t\">\n<span id=\"_CPPv3NK9BitMatrix3GetE6size_t6size_t\"></span><span id=\"_CPPv2NK9BitMatrix3GetE6size_t6size_t\"></span><span id=\"BitMatrix::Get__s.sC\"></span><span class=\"target\" id=\"classBitMatrix_1a2c08f789fb50c031fac465a9db740a42\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">col</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">row</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\">\n<span id=\"_CPPv3I_6size_t_6size_tEN3old4joinERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\"></span><span id=\"_CPPv2I_6size_t_6size_tEN3old4joinERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS1</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"namespaceold_1a2b66d41f2b36e24431004b723be8e61c\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\" title=\"old::join::NUM_BITS1\"><span class=\"n\"><span class=\"pre\">NUM_BITS1</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">+</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\" title=\"old::join::NUM_BITS2\"><span class=\"n\"><span class=\"pre\">NUM_BITS2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">join</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\" title=\"old::join::NUM_BITS1\"><span class=\"n\"><span class=\"pre\">NUM_BITS1</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\" title=\"old::join::NUM_BITS2\"><span class=\"n\"><span class=\"pre\">NUM_BITS2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">BitMatrix.hpp<a class=\"headerlink\" href=\"#bitmatrix-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>A COL x ROW matrix of bits and provides easy indexing and manipulation. </p>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray6SetAllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6SetAllEv\">\n<span id=\"_CPPv3N3old8BitArray6SetAllEv\"></span><span id=\"_CPPv2N3old8BitArray6SetAllEv\"></span><span id=\"old::BitArray::SetAll\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af4fabf2175902b7a767eed9e9b5ea8b4\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetAll</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Set all bits to one. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7OR_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7OR_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray7OR_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray7OR_SELFERK8BitArray\"></span><span id=\"old::BitArray::OR_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad953526077996a92e10d01abc1a753dc\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean OR with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix9LeftShiftEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix9LeftShiftEv\">\n<span id=\"_CPPv3NK9BitMatrix9LeftShiftEv\"></span><span id=\"_CPPv2NK9BitMatrix9LeftShiftEv\"></span><span id=\"BitMatrix::LeftShiftC\"></span><span class=\"target\" id=\"classBitMatrix_1a7b34ab90cdcdb71b4406fda3f5c2d1a4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">LeftShift</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Shift the whole matrix in the specified direction. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrixoRERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrixoRERK9BitMatrix\">\n<span id=\"_CPPv3N9BitMatrixoRERK9BitMatrix\"></span><span id=\"_CPPv2N9BitMatrixoRERK9BitMatrix\"></span><span id=\"BitMatrix::or-assign-operator__BitMatrixCR\"></span><span class=\"target\" id=\"classBitMatrix_1a3d8bb4f9a28ff54e3477c31e43681030\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector10NumEndBitsEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector10NumEndBitsEv\">\n<span id=\"_CPPv3NK3old9BitVector10NumEndBitsEv\"></span><span id=\"_CPPv2NK3old9BitVector10NumEndBitsEv\"></span><span id=\"old::BitVector::NumEndBitsC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab7f45df54477ebacdc484d6ec5c3ec03\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NumEndBits</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Num bits used in partial field at the end; 0 if perfect fit. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I_6size_tENK4Bits11ExportArrayE4BitsI14Bits_FixedDataI8NUM_BITSEXL1EEE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tENK4Bits11ExportArrayE4BitsI14Bits_FixedDataI8NUM_BITSEXL1EEE6size_t\">\n<span id=\"_CPPv3I_6size_tENK4Bits11ExportArrayE6size_t\"></span><span id=\"_CPPv2I_6size_tENK4Bits11ExportArrayE6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a67b7163bc25ee64af93364283669c6e8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/Bits_Data.html#_CPPv4I_6size_tE14Bits_FixedData\" title=\"Bits_FixedData\"><span class=\"n\"><span class=\"pre\">Bits_FixedData</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tENK4Bits11ExportArrayE4BitsI14Bits_FixedDataI8NUM_BITSEXL1EEE6size_t\" title=\"Bits::ExportArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ExportArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert to a BitArray of a different size. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8SetUInt8EK6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8SetUInt8EK6size_t7uint8_t\">\n<span id=\"_CPPv3N4Bits8SetUInt8EK6size_t7uint8_t\"></span><span id=\"_CPPv2N4Bits8SetUInt8EK6size_t7uint8_t\"></span><span id=\"Bits::SetUInt8__sC.uint8_t\"></span><span class=\"target\" id=\"classBits_1a7f9875ba7c5c560f9df598eebea2fc9a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt8</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 8-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bENK3old8BitArrayneEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArrayneEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArrayneERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArrayneERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1acc16320bfaf823c5cd3841add90f1b3c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">!=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayneEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator!=::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayneEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator!=::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits11PrintBinaryERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits11PrintBinaryERNSt7ostreamE\">\n<span id=\"_CPPv3NK4Bits11PrintBinaryERNSt7ostreamE\"></span><span id=\"_CPPv2NK4Bits11PrintBinaryERNSt7ostreamE\"></span><span id=\"Bits::PrintBinary__osRC\"></span><span class=\"target\" id=\"classBits_1a606154339bf51e7ce36573d5356dfeb8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintBinary</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Numerical print function (from most significant bit to least) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3ANDERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3ANDERK4Bits\">\n<span id=\"_CPPv3NK4Bits3ANDERK4Bits\"></span><span id=\"_CPPv2NK4Bits3ANDERK4Bits\"></span><span id=\"Bits::AND__BitsCRC\"></span><span class=\"target\" id=\"classBits_1a5bfb524e107fd488349a5e3cf69953a4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AND</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean AND on this Bits and return the result. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix5ClearEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix5ClearEv\">\n<span id=\"_CPPv3N9BitMatrix5ClearEv\"></span><span id=\"_CPPv2N9BitMatrix5ClearEv\"></span><span id=\"BitMatrix::Clear\"></span><span class=\"target\" id=\"classBitMatrix_1a1e68c75722e8390c8a91a50125c3e057\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NR4BitsaSERR4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR4BitsaSERR4Bits\">\n<span id=\"_CPPv3NR4BitsaSERR4Bits\"></span><span id=\"_CPPv2NR4BitsaSERR4Bits\"></span><span id=\"Bits::assign-operator__BitsRRR\"></span><span class=\"target\" id=\"classBits_1a2430a3cff587109739f295d71cf3c67a\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Move operator. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8AND_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8AND_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8AND_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8AND_SELFERK8BitArray\"></span><span id=\"old::BitArray::AND_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a59cad230d5c8473244a8a1c385807538\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AND_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean AND with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits12ChooseRandomER6RandomK6size_tK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits12ChooseRandomER6RandomK6size_tK6size_t6size_t\">\n<span id=\"_CPPv3N4Bits12ChooseRandomER6RandomK6size_tK6size_t6size_t\"></span><span id=\"_CPPv2N4Bits12ChooseRandomER6RandomK6size_tK6size_t6size_t\"></span><span id=\"Bits::ChooseRandom__RandomR.sC.sC.s\"></span><span class=\"target\" id=\"classBits_1af17e244fe2dbc6b4d32fd039d28c8db2\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ChooseRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../math/api/constants.html#_CPPv410MAX_SIZE_T\" title=\"MAX_SIZE_T\"><span class=\"n\"><span class=\"pre\">MAX_SIZE_T</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a given number of ones. </p><p>Set all bits randomly, with a given number of them being on. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray12ChooseRandomER6RandomK6size_tK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12ChooseRandomER6RandomK6size_tK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray12ChooseRandomER6RandomK6size_tK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray12ChooseRandomER6RandomK6size_tK6size_tK6size_t\"></span><span id=\"old::BitArray::ChooseRandom__RandomR.sC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae756bf151d547df7429151c72d209155\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ChooseRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a fixed number of them being ones. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits13ToArrayStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits13ToArrayStringEv\">\n<span id=\"_CPPv3NK4Bits13ToArrayStringEv\"></span><span id=\"_CPPv2NK4Bits13ToArrayStringEv\"></span><span id=\"Bits::ToArrayStringC\"></span><span class=\"target\" id=\"classBits_1a7c5fa8dd43e04b93489865b7727ebcfe\"></span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToArrayString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this Bits to an array-based string [index 0 on left]. </p><p>Convert this Bits object to a vector string [0 index on left]. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits15FIELD_LOG2_MASKE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits15FIELD_LOG2_MASKE\">\n<span id=\"_CPPv3N4Bits15FIELD_LOG2_MASKE\"></span><span id=\"_CPPv2N4Bits15FIELD_LOG2_MASKE\"></span><span id=\"Bits::FIELD_LOG2_MASK__field_t\"></span><span class=\"target\" id=\"classBits_1af0103588331d18cda41b9c67e93a22c3\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2_MASK</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/bitset_utils.html#_CPPv4I0E7MaskLow4TYPENSt6size_tE\" title=\"MaskLow\"><span class=\"n\"><span class=\"pre\">MaskLow</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N4Bits10FIELD_LOG2E\" title=\"Bits::FIELD_LOG2\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8num_bitsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8num_bitsE\">\n<span id=\"_CPPv3N3old9BitVector8num_bitsE\"></span><span id=\"_CPPv2N3old9BitVector8num_bitsE\"></span><span id=\"old::BitVector::num_bits__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aa030d1ca270478ec44aa2133e83a7679\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">num_bits</span></span></span><br/></dt><dd><p>Total number of bits are we using. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits15ClearExcessBitsEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits15ClearExcessBitsEv\">\n<span id=\"_CPPv3N4Bits15ClearExcessBitsEv\"></span><span id=\"_CPPv2N4Bits15ClearExcessBitsEv\"></span><span id=\"Bits::ClearExcessBitsCE\"></span><span class=\"target\" id=\"classBits_1a236d4b70baefe58abe4316696b46c515\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits6this_tE\" title=\"Bits::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearExcessBits</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray5ClearEK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5ClearEK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray5ClearEK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray5ClearEK6size_tK6size_t\"></span><span id=\"old::BitArray::Clear__sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aceb70db11b49da965ec261d059cb8f3d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set bits to 0 in the range [start, stop) </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0EN4Bits4BitsEKNSt16initializer_listI1TEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN4Bits4BitsEKNSt16initializer_listI1TEE\">\n<span id=\"_CPPv3I0EN4Bits4BitsEKNSt16initializer_listI1TEE\"></span><span id=\"_CPPv2I0EN4Bits4BitsEKNSt16initializer_listI1TEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a2bd8d9efac88cd82c442c1d80f59442a\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">initializer_list</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0EN4Bits4BitsEKNSt16initializer_listI1TEE\" title=\"Bits::Bits::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">l</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Initializer list constructor. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArraymiERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArraymiERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArraymiERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArraymiERK8BitArray\"></span><span id=\"old::BitArray::sub-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a0b0ebe9a686d369d32b1301c6e049d0b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">-</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator minus\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8BitArrayERK6this_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayERK6this_t\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayERK6this_t\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayERK6this_t\"></span><span id=\"old::BitArray::BitArray__this_tCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af65dde55ca219190bcedefafc469068e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray6this_tE\" title=\"old::BitArray::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArrayrsEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayrsEK6size_t\">\n<span id=\"_CPPv3NK3old8BitArrayrsEK6size_t\"></span><span id=\"_CPPv2NK3old8BitArrayrsEK6size_t\"></span><span id=\"old::BitArray::rshift-operator__sCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad9655f405ac61cd0a066171b21332304\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator shift right\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector16ClearRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector16ClearRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N3old9BitVector16ClearRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N3old9BitVector16ClearRandomCountER6RandomK6size_t\"></span><span id=\"old::BitVector::ClearRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a9b07e02e467b254cf22677479365d44c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Unset a specified number of random bits (does not check if already zero.) </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E6size_t\">\n<span id=\"_CPPv3I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E6size_t\"></span><span id=\"_CPPv2I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1ab892e8780659422fa2f33649e23767a4\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E6size_t\" title=\"Bits::Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E6size_t\" title=\"Bits::Bits::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits4BitsERK4BitsI7DATA2_T10ZERO_LEFT2E6size_t\" title=\"Bits::Bits::ZERO_LEFT2\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">new_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Copy, but with a resize. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray10CountZerosEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10CountZerosEv\">\n<span id=\"_CPPv3NK3old8BitArray10CountZerosEv\"></span><span id=\"_CPPv2NK3old8BitArray10CountZerosEv\"></span><span id=\"old::BitArray::CountZerosC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a490a68473d79cbb0f5884122196d4a37\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountZeros</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of zeros in the BitArray. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits12REVERSE_SELFEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits12REVERSE_SELFEv\">\n<span id=\"_CPPv3N4Bits12REVERSE_SELFEv\"></span><span id=\"_CPPv2N4Bits12REVERSE_SELFEv\"></span><span id=\"Bits::REVERSE_SELF\"></span><span class=\"target\" id=\"classBits_1a4bcab68a71d5f2d521eb61faed096862\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">REVERSE_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Reverse the order of bits in the bitset. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray6ROTATEEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray6ROTATEEKi\">\n<span id=\"_CPPv3NK3old8BitArray6ROTATEEKi\"></span><span id=\"_CPPv2NK3old8BitArray6ROTATEEKi\"></span><span id=\"old::BitArray::ROTATE__iCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a98906d3e7487379a2becbfb3027236bf\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTATE</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Positive rotates go left and negative rotates go left (0 does nothing); return result. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector4bitsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector4bitsE\">\n<span id=\"_CPPv3N3old9BitVector4bitsE\"></span><span id=\"_CPPv2N3old9BitVector4bitsE\"></span><span id=\"old::BitVector::bits__Ptr:field_t:\"></span><span class=\"target\" id=\"classold_1_1BitVector_1af28c633cdb99cd82e3fd18c995927d80\"></span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">bits</span></span></span><br/></dt><dd><p>Pointer to array with the status of each bit. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9ShiftLeftEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9ShiftLeftEK6size_t\">\n<span id=\"_CPPv3N4Bits9ShiftLeftEK6size_t\"></span><span id=\"_CPPv2N4Bits9ShiftLeftEK6size_t\"></span><span id=\"Bits::ShiftLeft__sCCE\"></span><span class=\"target\" id=\"classBits_1ad6ab7dace72a9e7191f99f4ca2b8e778\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ShiftLeft</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray4bitsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4bitsE\">\n<span id=\"_CPPv3N3old8BitArray4bitsE\"></span><span id=\"_CPPv2N3old8BitArray4bitsE\"></span><span id=\"old::BitArray::bits__field_tA\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac15e669dbf50b3ef22eae8c2abb01cee\"></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">bits</span></span></span><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10NUM_FIELDSE\" title=\"old::BitArray::NUM_FIELDS\"><span class=\"n\"><span class=\"pre\">NUM_FIELDS</span></span></a><span class=\"p\"><span class=\"pre\">]</span></span><br/></dt><dd><p>Fields to hold the actual bits for this BitArray. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits5frontEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits5frontEv\">\n<span id=\"_CPPv3NK4Bits5frontEv\"></span><span id=\"_CPPv2NK4Bits5frontEv\"></span><span id=\"Bits::frontC\"></span><span class=\"target\" id=\"classBits_1a42bbcfea98258279c2e422d7cc14ed15\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">front</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits4HashE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits4HashE6size_t\">\n<span id=\"_CPPv3NK4Bits4HashE6size_t\"></span><span id=\"_CPPv2NK4Bits4HashE6size_t\"></span><span id=\"Bits::Hash__sC\"></span><span class=\"target\" id=\"classBits_1a3fb262bfa8ead73edab3282f22519e8f\"></span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Hash</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_field</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>A simple hash function for bit vectors. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7PopBackEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7PopBackEv\">\n<span id=\"_CPPv3N4Bits7PopBackEv\"></span><span id=\"_CPPv2N4Bits7PopBackEv\"></span><span id=\"Bits::PopBack\"></span><span class=\"target\" id=\"classBits_1a0b568b274e1484c2513193f4d4788759\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopBack</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Pop the last bit in the vector. </p><p>\nPop the last bit in the vector. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN4Bits4BitsE1Tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN4Bits4BitsE1Tb\">\n<span id=\"_CPPv3I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN4Bits4BitsE1Tb\"></span><span id=\"_CPPv2I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN4Bits4BitsE1Tb\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">enable_if</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">is_arithmetic</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN4Bits4BitsE1Tb\" title=\"Bits::Bits::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">type</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1adeb7d0d140fe0485f66e8741a67b5f0f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN4Bits4BitsE1Tb\" title=\"Bits::Bits::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">init_val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Anything not otherwise defined for first argument, convert to size_t. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6ToggleE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6ToggleE6size_t6size_t\">\n<span id=\"_CPPv3N4Bits6ToggleE6size_t6size_t\"></span><span id=\"_CPPv2N4Bits6ToggleE6size_t6size_t\"></span><span id=\"Bits::Toggle__s.s\"></span><span class=\"target\" id=\"classBits_1a9e8dfc4bee04d470dbbca833ce94df4a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flips all the bits in a range [start, end) </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8NOR_SELFERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8NOR_SELFERK4Bits\">\n<span id=\"_CPPv3N4Bits8NOR_SELFERK4Bits\"></span><span id=\"_CPPv2N4Bits8NOR_SELFERK4Bits\"></span><span id=\"Bits::NOR_SELF__BitsCR\"></span><span class=\"target\" id=\"classBits_1a008f333bd6b7c9299f3c499d02784249\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NOR with this Bits, store result here, and return this object. </p><p>Perform a Boolean NOR with this Bits object, store result here, and return this object. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray7GetOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7GetOnesEv\">\n<span id=\"_CPPv3NK3old8BitArray7GetOnesEv\"></span><span id=\"_CPPv2NK3old8BitArray7GetOnesEv\"></span><span id=\"old::BitArray::GetOnesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac1d8b0573d129a855a631c742e91903c\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return positions of all ones. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3anyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3anyEv\">\n<span id=\"_CPPv3NK3old8BitArray3anyEv\"></span><span id=\"_CPPv2NK3old8BitArray3anyEv\"></span><span id=\"old::BitArray::anyC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a230eea8ffa85170455efb757b46cc071\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">any</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix9to_bitsetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix9to_bitsetEv\">\n<span id=\"_CPPv3N9BitMatrix9to_bitsetEv\"></span><span id=\"_CPPv2N9BitMatrix9to_bitsetEv\"></span><span id=\"BitMatrix::to_bitset\"></span><span class=\"target\" id=\"classBitMatrix_1af8f6564a65231bb3c16a718cbd029d44\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4I_6size_tE6BitSet\" title=\"BitSet\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::COLS\"><span class=\"n\"><span class=\"pre\">COLS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::ROWS\"><span class=\"n\"><span class=\"pre\">ROWS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">to_bitset</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3anyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3anyEv\">\n<span id=\"_CPPv3NK4Bits3anyEv\"></span><span id=\"_CPPv2NK4Bits3anyEv\"></span><span id=\"Bits::anyCCE\"></span><span class=\"target\" id=\"classBits_1a7928f7071d511f2198fb0215e46a6546\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">any</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7RawMoveEK6size_tK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7RawMoveEK6size_tK6size_tK6size_t\">\n<span id=\"_CPPv3N4Bits7RawMoveEK6size_tK6size_tK6size_t\"></span><span id=\"_CPPv2N4Bits7RawMoveEK6size_tK6size_tK6size_t\"></span><span id=\"Bits::RawMove__sC.sC.sCCE\"></span><span class=\"target\" id=\"classBits_1adc759d8e8f810768d9beb14127847416\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawMove</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_start</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_stop</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">to</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/bitset_utils.html#_CPPv412NumBitFields6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412NumBitFields6size_t\">\n<span id=\"_CPPv312NumBitFields6size_t\"></span><span id=\"_CPPv212NumBitFields6size_t\"></span><span id=\"NumBitFields__sCE\"></span><span class=\"target\" id=\"bitset__utils_8hpp_1aaa54122b5cc5a5021996a37ca05c125c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NumBitFields</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Convert a bit count to the number of fields needed to store them. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7BytePtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7BytePtrEv\">\n<span id=\"_CPPv3N3old9BitVector7BytePtrEv\"></span><span id=\"_CPPv2N3old9BitVector7BytePtrEv\"></span><span id=\"old::BitVector::BytePtr\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a7050ea99139ff325b57943f9c3cb73ca\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray7FindBitEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7FindBitEv\">\n<span id=\"_CPPv3NK3old8BitArray7FindBitEv\"></span><span id=\"_CPPv2NK3old8BitArray7FindBitEv\"></span><span id=\"old::BitArray::FindBitC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab8f6121932adc8dc634ebb30a99b3987\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Deprecated: Return the position of the first one; return -1 if no ones in vector. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector9GetUInt64E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector9GetUInt64E6size_t\">\n<span id=\"_CPPv3NK3old9BitVector9GetUInt64E6size_t\"></span><span id=\"_CPPv2NK3old9BitVector9GetUInt64E6size_t\"></span><span id=\"old::BitVector::GetUInt64__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a27b37efc2e313090c2a0e98fb43de31c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt64</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7OR_SELFERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7OR_SELFERK4Bits\">\n<span id=\"_CPPv3N4Bits7OR_SELFERK4Bits\"></span><span id=\"_CPPv2N4Bits7OR_SELFERK4Bits\"></span><span id=\"Bits::OR_SELF__BitsCR\"></span><span class=\"target\" id=\"classBits_1a5c847cb5551d4a3867efe97633c44e3b\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean OR with this Bits, store result here, and return this object. </p><p>Perform a Boolean OR with this Bits object, store result here, and return this object. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits14GetUInt32AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits14GetUInt32AtBitE6size_t\">\n<span id=\"_CPPv3NK4Bits14GetUInt32AtBitE6size_t\"></span><span id=\"_CPPv2NK4Bits14GetUInt32AtBitE6size_t\"></span><span id=\"Bits::GetUInt32AtBit__sC\"></span><span class=\"target\" id=\"classBits_1a7a8486ed0f4623ce37c14cd5e60dea52\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt32AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector9GetAsCharE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector9GetAsCharE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector9GetAsCharE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector9GetAsCharE6size_t\"></span><span id=\"old::BitVector::GetAsChar__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1adb886cf416c5495e459d388b6b8e9eae\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetAsChar</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert a specified bit to a character. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6resizeENSt6size_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6resizeENSt6size_tE\">\n<span id=\"_CPPv3N4Bits6resizeENSt6size_tE\"></span><span id=\"_CPPv2N4Bits6resizeENSt6size_tE\"></span><span id=\"Bits::resize__std::s\"></span><span class=\"target\" id=\"classBits_1aa9ecd23898ecb6b5b6dea9c18524421a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">resize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">new_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray10FIELD_LOG2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10FIELD_LOG2E\">\n<span id=\"_CPPv3N3old8BitArray10FIELD_LOG2E\"></span><span id=\"_CPPv2N3old8BitArray10FIELD_LOG2E\"></span><span id=\"old::BitArray::FIELD_LOG2__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae0c7976aba0c74de451ff531b4d8f9f7\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../math/api/math.html#_CPPv44Log2d\" title=\"Log2\"><span class=\"n\"><span class=\"pre\">Log2</span></span></a><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_BITSE\" title=\"old::BitArray::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray7FindOneEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7FindOneEK6size_t\">\n<span id=\"_CPPv3NK3old8BitArray7FindOneEK6size_t\"></span><span id=\"_CPPv2NK3old8BitArray7FindOneEK6size_t\"></span><span id=\"old::BitArray::FindOne__sCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8fd90698dfa8f740bfc814f85995231e\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first one after start_pos; return -1 if no ones in vector. You can loop through all 1-bit positions of a BitArray \u201cbits\u201d with:</p><p>for (int pos = bits.FindOne(); pos &gt;= 0; pos = bits.FindOne(pos+1)) { \u2026 } </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArraymIERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArraymIERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArraymIERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArraymIERK8BitArray\"></span><span id=\"old::BitArray::sub-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a09eb1faf52b820f15df83d26f58ba3bb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">-=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator minus\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorcvbEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorcvbEv\">\n<span id=\"_CPPv3NK3old9BitVectorcvbEv\"></span><span id=\"_CPPv2NK3old9BitVectorcvbEv\"></span><span id=\"old::BitVector::castto-b-operatorC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a002ecf7eebf810a7cf1c640a5aa58cdc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Casting a bit array to bool identifies if ANY bits are set to 1. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3SUBERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3SUBERK4Bits\">\n<span id=\"_CPPv3NK4Bits3SUBERK4Bits\"></span><span id=\"_CPPv2NK4Bits3SUBERK4Bits\"></span><span id=\"Bits::SUB__BitsCRC\"></span><span class=\"target\" id=\"classBits_1abcdf813f7490e9f15e733c4b0e6e761a\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SUB</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">set2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Subtracts on Bits object from another (following uint rules); returns result. </p><p>Subtraction of two Bitsets. Wraps around if it underflows. Returns result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits10FlipRandomER6RandomKdK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits10FlipRandomER6RandomKdK6size_t6size_t\">\n<span id=\"_CPPv3N4Bits10FlipRandomER6RandomKdK6size_t6size_t\"></span><span id=\"_CPPv2N4Bits10FlipRandomER6RandomKdK6size_t6size_t\"></span><span id=\"Bits::FlipRandom__RandomR.doubleC.sC.s\"></span><span class=\"target\" id=\"classBits_1ac493f3cdc344c4414475e7def503a188\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FlipRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../math/api/constants.html#_CPPv410MAX_SIZE_T\" title=\"MAX_SIZE_T\"><span class=\"n\"><span class=\"pre\">MAX_SIZE_T</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip random bits with a given probability. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitscvbEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitscvbEv\">\n<span id=\"_CPPv3NK4BitscvbEv\"></span><span id=\"_CPPv2NK4BitscvbEv\"></span><span id=\"Bits::castto-b-operatorC\"></span><span class=\"target\" id=\"classBits_1ac90a22c91a3a6c3f74ea6340d5140150\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Casting a bit array to bool identifies if ANY bits are set to 1. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsERK4Bits\">\n<span id=\"_CPPv3N4Bits4BitsERK4Bits\"></span><span id=\"_CPPv2N4Bits4BitsERK4Bits\"></span><span id=\"Bits::Bits__BitsCR\"></span><span class=\"target\" id=\"classBits_1ab26c327a3e21c8f450ebc5b651559c03\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits4BitsERK4Bits\" title=\"Bits::Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd><p>Copy constructor of existing bits object. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8EQU_SELFERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8EQU_SELFERK4Bits\">\n<span id=\"_CPPv3N4Bits8EQU_SELFERK4Bits\"></span><span id=\"_CPPv2N4Bits8EQU_SELFERK4Bits\"></span><span id=\"Bits::EQU_SELF__BitsCR\"></span><span class=\"target\" id=\"classBits_1a4a6d57b49114404e9c8c74ec26f083f3\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EQU_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean EQU with this Bits, store result here, and return this object. </p><p>Perform a Boolean EQU with this Bits object, store result here, and return this object. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix9DownShiftEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix9DownShiftEv\">\n<span id=\"_CPPv3NK9BitMatrix9DownShiftEv\"></span><span id=\"_CPPv2NK9BitMatrix9DownShiftEv\"></span><span id=\"BitMatrix::DownShiftC\"></span><span class=\"target\" id=\"classBitMatrix_1ab4204f14a6ef15d291b449a9bd49c7f5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DownShift</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitsrSEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitsrSEK6size_t\">\n<span id=\"_CPPv3N4BitsrSEK6size_t\"></span><span id=\"_CPPv2N4BitsrSEK6size_t\"></span><span id=\"Bits::rshift-assign-operator__sC\"></span><span class=\"target\" id=\"classBits_1a3e7e65425ccf252eaa7fbf8e2a66ff1f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;&gt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator for shift right\u2026 </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4I_6size_tEN9BitMatrix7MaskRowERK6BitSetIXml4COLS4ROWSEEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN9BitMatrix7MaskRowERK6BitSetIXml4COLS4ROWSEEv\">\n<span id=\"_CPPv3I_6size_tEN9BitMatrix7MaskRowEv\"></span><span id=\"_CPPv2I_6size_tEN9BitMatrix7MaskRowEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROW_ID</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBitMatrix_1a7e98907af51157ab7c1837e82f598b34\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4I_6size_tE6BitSet\" title=\"BitSet\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::COLS\"><span class=\"n\"><span class=\"pre\">COLS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::ROWS\"><span class=\"n\"><span class=\"pre\">ROWS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaskRow</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Keep only a single row of values, reducing all others to zeros. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3XORERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3XORERK4Bits\">\n<span id=\"_CPPv3NK4Bits3XORERK4Bits\"></span><span id=\"_CPPv2NK4Bits3XORERK4Bits\"></span><span id=\"Bits::XOR__BitsCRC\"></span><span class=\"target\" id=\"classBits_1ac09f343ce4be757cd8679f8f7be4a228\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">XOR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean XOR on this Bits and return the result. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7GetSizeEv\">\n<span id=\"_CPPv3NK3old9BitVector7GetSizeEv\"></span><span id=\"_CPPv2NK3old9BitVector7GetSizeEv\"></span><span id=\"old::BitVector::GetSizeC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a66d37912df32b1650b2bdb89c78ea179\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many bits do we currently have? </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6SetAllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6SetAllEv\">\n<span id=\"_CPPv3N3old9BitVector6SetAllEv\"></span><span id=\"_CPPv2N3old9BitVector6SetAllEv\"></span><span id=\"old::BitVector::SetAll\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aaea04a3bf4ef174c52508a86c5ae2993\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetAll</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits to 1. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9GetUInt64E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9GetUInt64E6size_t\">\n<span id=\"_CPPv3NK4Bits9GetUInt64E6size_t\"></span><span id=\"_CPPv2NK4Bits9GetUInt64E6size_t\"></span><span id=\"Bits::GetUInt64__sC\"></span><span class=\"target\" id=\"classBits_1a3df33aa5b8129ae033795278f810a6b2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt64</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 64-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVectorlsERNSt7ostreamERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVectorlsERNSt7ostreamERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVectorlsERNSt7ostreamERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVectorlsERNSt7ostreamERK9BitVector\"></span><span id=\"old::BitVector::lshift-operator__osR.BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a2602a4e815508aec9a69a14beb8f977c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">friend</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Overload ostream operator to return Print. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectoranERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectoranERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVectoranERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVectoranERK9BitVector\"></span><span id=\"old::BitVector::and-operator__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a879d4c8b8542aee744dca9467d2eb977\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise AND\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7FindBitEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7FindBitEK6size_t\">\n<span id=\"_CPPv3NK3old9BitVector7FindBitEK6size_t\"></span><span id=\"_CPPv2NK3old9BitVector7FindBitEK6size_t\"></span><span id=\"old::BitVector::FindBit__sCC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ad7c2f452416f8557e305e2ec497699b4\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Deprecated version of FindOne(). </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0ENK4Bits13GetValueAtBitE1TK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK4Bits13GetValueAtBitE1TK6size_t\">\n<span id=\"_CPPv3I0ENK4Bits13GetValueAtBitEK6size_t\"></span><span id=\"_CPPv2I0ENK4Bits13GetValueAtBitEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a18e1734ed2e9556762d84af55b091a63\"></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK4Bits13GetValueAtBitE1TK6size_t\" title=\"Bits::GetValueAtBit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValueAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>@briefGet specified type starting at a given BIT position. </p><p>Get the specified type starting from a given BIT position. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4I0EN3old9BitVectorcv6vectorI1TEEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old9BitVectorcv6vectorI1TEEv\">\n<span id=\"_CPPv3I0EN3old9BitVectorcv6vectorI1TEEv\"></span><span id=\"_CPPv2I0EN3old9BitVectorcv6vectorI1TEEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a689c25476e02c58f156407efc46c3999\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old9BitVectorcv6vectorI1TEEv\" title=\"old::BitVector::operator vector&lt;T&gt;::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Automatically convert BitVector to other vector types. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector4backEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector4backEv\">\n<span id=\"_CPPv3N3old9BitVector4backEv\"></span><span id=\"_CPPv2N3old9BitVector4backEv\"></span><span id=\"old::BitVector::back\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a1e5390a8b35e8d38dd75fa2429bed692\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">back</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENK4BitsneEbRK4BitsI7DATA2_T3ZL2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENK4BitsneEbRK4BitsI7DATA2_T3ZL2E\">\n<span id=\"_CPPv3I0_bENK4BitsneERK4BitsI7DATA2_T3ZL2E\"></span><span id=\"_CPPv2I0_bENK4BitsneERK4BitsI7DATA2_T3ZL2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a2c05eab9a4e6661ef6ce7fcaa9d7cde4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">!=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsneEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator!=::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitsneEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator!=::ZL2\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector11ClearRandomER6RandomKdK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector11ClearRandomER6RandomKdK6size_t6size_t\">\n<span id=\"_CPPv3N3old9BitVector11ClearRandomER6RandomKdK6size_t6size_t\"></span><span id=\"_CPPv2N3old9BitVector11ClearRandomER6RandomKdK6size_t6size_t\"></span><span id=\"old::BitVector::ClearRandom__RandomR.doubleC.sC.s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae0c7b4c5c926c0762b1a37d170e968fb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector8MAX_BITSE\" title=\"old::BitVector::MAX_BITS\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Unset random bits with a given probability (does not check if already zero.) </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsE6size_tR6RandomKd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsE6size_tR6RandomKd\">\n<span id=\"_CPPv3N4Bits4BitsE6size_tR6RandomKd\"></span><span id=\"_CPPv2N4Bits4BitsE6size_tR6RandomKd\"></span><span id=\"Bits::Bits__s.RandomR.doubleC\"></span><span class=\"target\" id=\"classBits_1afd703ea1d17e71fd939380cd9a617569\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random Bits with provided prob of 1\u2019s. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsE6size_tR6RandomKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsE6size_tR6RandomKi\">\n<span id=\"_CPPv3N4Bits4BitsE6size_tR6RandomKi\"></span><span id=\"_CPPv2N4Bits4BitsE6size_tR6RandomKi\"></span><span id=\"Bits::Bits__s.RandomR.iC\"></span><span class=\"target\" id=\"classBits_1a28f7e8c222212331a4bcb87e213d1ce4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random Bits with provided number of 1\u2019s. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6ResizeE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6ResizeE6size_t\">\n<span id=\"_CPPv3N3old9BitVector6ResizeE6size_t\"></span><span id=\"_CPPv2N3old9BitVector6ResizeE6size_t\"></span><span id=\"old::BitVector::Resize__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a494cf30db6d9d3d8dad01ee54ce3860c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Resize</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">new_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Resize this BitVector to have the specified number of bits. </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv416BitFieldToString12bits_field_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv416BitFieldToString12bits_field_t\">\n<span id=\"_CPPv316BitFieldToString12bits_field_t\"></span><span id=\"_CPPv216BitFieldToString12bits_field_t\"></span><span id=\"BitFieldToString__bits_field_t\"></span><span class=\"target\" id=\"bitset__utils_8hpp_1a3039c6f7848346eb7378c54ca99fa081\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitFieldToString</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv412bits_field_t\" title=\"bits_field_t\"><span class=\"n\"><span class=\"pre\">bits_field_t</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">field</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Convert a single bit field to a string. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector14GetUInt64AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector14GetUInt64AtBitE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector14GetUInt64AtBitE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector14GetUInt64AtBitE6size_t\"></span><span id=\"old::BitVector::GetUInt64AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a4a7ec4590a41314a325fb426b6e60e73\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt64AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector11PrintBinaryERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector11PrintBinaryERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old9BitVector11PrintBinaryERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old9BitVector11PrintBinaryERNSt7ostreamE\"></span><span id=\"old::BitVector::PrintBinary__osRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1aac71cba651bd90fe93ca8d4c88e81b3a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintBinary</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Numerical print function (from most significant bit to least) </p></dd>", "a[href=\"api/Bits_Data.html#_CPPv4N8BitsMode6CAPPEDE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N8BitsMode6CAPPEDE\">\n<span id=\"_CPPv3N8BitsMode6CAPPEDE\"></span><span id=\"_CPPv2N8BitsMode6CAPPEDE\"></span><span class=\"target\" id=\"Bits__Data_8hpp_1af31ec97e6be574fed2c89681498298a7ae9ddbf56905551daa148d3d0defc4412\"></span><span class=\"k\"><span class=\"pre\">enumerator</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CAPPED</span></span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4I0EN3old9BitVector13SetValueAtBitEvK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old9BitVector13SetValueAtBitEvK6size_t1T\">\n<span id=\"_CPPv3I0EN3old9BitVector13SetValueAtBitEK6size_t1T\"></span><span id=\"_CPPv2I0EN3old9BitVector13SetValueAtBitEK6size_t1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1ae27ac28376bf11286cb04813780d5748\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN3old9BitVector13SetValueAtBitEvK6size_t1T\" title=\"old::BitVector::SetValueAtBit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set the specified type starting from a given BIT position. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitsmIERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitsmIERK4Bits\">\n<span id=\"_CPPv3N4BitsmIERK4Bits\"></span><span id=\"_CPPv2N4BitsmIERK4Bits\"></span><span id=\"Bits::sub-assign-operator__BitsCR\"></span><span class=\"target\" id=\"classBits_1a141811899c55506bd595164d1b038b48\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">-=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator minus\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArraycoEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArraycoEv\">\n<span id=\"_CPPv3NK3old8BitArraycoEv\"></span><span id=\"_CPPv2NK3old8BitArraycoEv\"></span><span id=\"old::BitArray::inv-operatorC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac8d9bcd3116864905729352ae0936558\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">~</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise NOT\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector9LastFieldEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector9LastFieldEv\">\n<span id=\"_CPPv3NK3old9BitVector9LastFieldEv\"></span><span id=\"_CPPv2NK3old9BitVector9LastFieldEv\"></span><span id=\"old::BitVector::LastFieldC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a6b0708b083c502822e77922389faff78\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">LastField</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>What is the ID of the last occupied field? </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E11ReverseBits1T1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E11ReverseBits1T1T\">\n<span id=\"_CPPv3I0E11ReverseBits1T\"></span><span id=\"_CPPv2I0E11ReverseBits1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1a3c06449082a990e395bbd2f960914736\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E11ReverseBits1T1T\" title=\"ReverseBits::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ReverseBits</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E11ReverseBits1T1T\" title=\"ReverseBits::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9RandomizeER6RandomKdK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9RandomizeER6RandomKdK6size_t6size_t\">\n<span id=\"_CPPv3N4Bits9RandomizeER6RandomKdK6size_t6size_t\"></span><span id=\"_CPPv2N4Bits9RandomizeER6RandomKdK6size_t6size_t\"></span><span id=\"Bits::Randomize__RandomR.doubleC.sC.s\"></span><span class=\"target\" id=\"classBits_1a4ce5b0c0cd34784d63b479b45ec3bcd6\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Randomize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../math/api/constants.html#_CPPv410MAX_SIZE_T\" title=\"MAX_SIZE_T\"><span class=\"n\"><span class=\"pre\">MAX_SIZE_T</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a given probability of being a one. </p><p>Set all bits randomly, with a given probability of being on. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0EN4Bits15SetValueAtIndexER4BitsI6DATA_T9ZERO_LEFTEK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN4Bits15SetValueAtIndexER4BitsI6DATA_T9ZERO_LEFTEK6size_t1T\">\n<span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1ae0bf713c5ac079911156c77ff156f0d8\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN4Bits15SetValueAtIndexER4BitsI6DATA_T9ZERO_LEFTEK6size_t1T\" title=\"Bits::SetValueAtIndex::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set specified type at a given index (in steps of that type size) </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv49ByteCount\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49ByteCount\">\n<span id=\"_CPPv39ByteCount\"></span><span id=\"_CPPv29ByteCount\"></span><span id=\"ByteCount__sA\"></span><span class=\"target\" id=\"bitset__utils_8hpp_1a951965118edfdd6f9ee02944f0604a7c\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ByteCount</span></span></span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"m\"><span class=\"pre\">256</span></span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">{</span></span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">7</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">7</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">2</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">7</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">7</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">4</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">7</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">5</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">7</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">6</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">7</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">7</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">8</span></span><span class=\"p\"><span class=\"pre\">}</span></span><br/></dt><dd><p>How many bits are set to one in each possible byte? </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector14SetRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector14SetRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N3old9BitVector14SetRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N3old9BitVector14SetRandomCountER6RandomK6size_t\"></span><span id=\"old::BitVector::SetRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab0da163fd632a7361ca9e6845a4cc55d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set a specified number of random bits (does not check if already set.) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray10PrintArrayERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10PrintArrayERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old8BitArray10PrintArrayERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old8BitArray10PrintArrayERNSt7ostreamE\"></span><span id=\"old::BitArray::PrintArray__osRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6c6b47ca5d432bfab01cb507c4342ac7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print from smallest bit position to largest. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7FIELD_0E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7FIELD_0E\">\n<span id=\"_CPPv3N4Bits7FIELD_0E\"></span><span id=\"_CPPv2N4Bits7FIELD_0E\"></span><span id=\"Bits::FIELD_0__field_t\"></span><span class=\"target\" id=\"classBits_1a02abae5f3127861cc8be46ff67661584\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_0</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">0</span></span><br/></dt><dd><p>All bits in a field set to 0. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7EndMaskEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7EndMaskEv\">\n<span id=\"_CPPv3NK3old9BitVector7EndMaskEv\"></span><span id=\"_CPPv2NK3old9BitVector7EndMaskEv\"></span><span id=\"old::BitVector::EndMaskC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a4a1ee11a74b0ffd89fccd28a5c7609b9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector7field_tE\" title=\"old::BitVector::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EndMask</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>A mask to cut off all of the final bits. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7BytePtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7BytePtrEv\">\n<span id=\"_CPPv3N3old8BitArray7BytePtrEv\"></span><span id=\"_CPPv2N3old8BitArray7BytePtrEv\"></span><span id=\"old::BitArray::BytePtr\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad402eb4aafcc50a061902a8b48ac2461\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4I0EN3old8BitArray13SetValueAtBitEvK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray13SetValueAtBitEvK6size_t1T\">\n<span id=\"_CPPv3I0EN3old8BitArray13SetValueAtBitEK6size_t1T\"></span><span id=\"_CPPv2I0EN3old8BitArray13SetValueAtBitEK6size_t1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a030959f6c4224f46b61acae4a37de41c\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray13SetValueAtBitEvK6size_t1T\" title=\"old::BitArray::SetValueAtBit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3NORERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3NORERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3NORERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3NORERK8BitArray\"></span><span id=\"old::BitArray::NOR__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a655d3bb51c82a380781e475e1c678689\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NOR with a second BitArray and return the result. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7GetByteE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7GetByteE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector7GetByteE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector7GetByteE6size_t\"></span><span id=\"old::BitVector::GetByte__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3d971a6b2c8306ff806596251f53a0e5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetByte</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the byte at the specified byte index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NR3old8BitArrayaSERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old8BitArrayaSERKNSt6stringE\">\n<span id=\"_CPPv3NR3old8BitArrayaSERKNSt6stringE\"></span><span id=\"_CPPv2NR3old8BitArrayaSERKNSt6stringE\"></span><span id=\"old::BitArray::assign-operator__ssCRR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aca8dca7139a43ef345cefe749e581611\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bENK3old8BitArrayeqEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArrayeqEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArrayeqERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArrayeqERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a47eccd23c0b52048bfa655c66a37f090\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">==</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayeqEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator==::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayeqEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator==::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Test if two BitArray objects are identical. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrixeoERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrixeoERK9BitMatrix\">\n<span id=\"_CPPv3NK9BitMatrixeoERK9BitMatrix\"></span><span id=\"_CPPv2NK9BitMatrixeoERK9BitMatrix\"></span><span id=\"BitMatrix::xor-operator__BitMatrixCRC\"></span><span class=\"target\" id=\"classBitMatrix_1a3f1b84409cd83ca648ae1b0829ecfe0d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray18LongestSegmentOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray18LongestSegmentOnesEv\">\n<span id=\"_CPPv3NK3old8BitArray18LongestSegmentOnesEv\"></span><span id=\"_CPPv2NK3old8BitArray18LongestSegmentOnesEv\"></span><span id=\"old::BitArray::LongestSegmentOnesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af7c398d2a17b414d0e5d5330cde3388d\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">LongestSegmentOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find the length of the longest continuous series of ones. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3AllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3AllEv\">\n<span id=\"_CPPv3NK4Bits3AllEv\"></span><span id=\"_CPPv2NK4Bits3AllEv\"></span><span id=\"Bits::AllC\"></span><span class=\"target\" id=\"classBits_1ad33f54fe1b968c1a915c0de6664e9d73\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">All</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if ALL bits are set to 1, otherwise return false. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector9GetUInt32E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector9GetUInt32E6size_t\">\n<span id=\"_CPPv3NK3old9BitVector9GetUInt32E6size_t\"></span><span id=\"_CPPv2NK3old9BitVector9GetUInt32E6size_t\"></span><span id=\"old::BitVector::GetUInt32__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a06e72b823d4fda9fe2cc7f77c136855a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt32</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector12SetUIntAtBitEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector12SetUIntAtBitEK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old9BitVector12SetUIntAtBitEK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old9BitVector12SetUIntAtBitEK6size_t8uint32_t\"></span><span id=\"old::BitVector::SetUIntAtBit__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a80cbde69e3a7b588dc600a99214885f3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUIntAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>By default, update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector7SetByteE6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector7SetByteE6size_t7uint8_t\">\n<span id=\"_CPPv3N3old9BitVector7SetByteE6size_t7uint8_t\"></span><span id=\"_CPPv2N3old9BitVector7SetByteE6size_t7uint8_t\"></span><span id=\"old::BitVector::SetByte__s.uint8_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae6fb7bfba5b29497061c06b2765f18aa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetByte</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the byte at the specified byte index. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector4NANDERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector4NANDERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVector4NANDERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVector4NANDERK9BitVector\"></span><span id=\"old::BitVector::NAND__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1adbd34e993c6081632dad53809f2656ef\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NAND</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NAND on this BitVector and return the result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_tEN3old8BitArray9ROTL_SELFER8BitArrayv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN3old8BitArray9ROTL_SELFER8BitArrayv\">\n<span id=\"_CPPv3I_6size_tEN3old8BitArray9ROTL_SELFEv\"></span><span id=\"_CPPv2I_6size_tEN3old8BitArray9ROTL_SELFEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">shift_size_raw</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a10d1b00491126bf793d46d58b9005c26\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTL_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper: call ROTATE with negative number instead. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK4hashIN3old9BitVectorEEclERKN3old9BitVectorE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4hashIN3old9BitVectorEEclERKN3old9BitVectorE\">\n<span id=\"_CPPv3NK4hashIN3old9BitVectorEEclERKN3old9BitVectorE\"></span><span id=\"_CPPv2NK4hashIN3old9BitVectorEEclERKN3old9BitVectorE\"></span><span id=\"hash:old::BitVector:::call-operator__old::BitVectorCRC\"></span><span class=\"target\" id=\"structhash_3_01old_1_1BitVector_01_4_1a25058850d56ae912526b060a220e598f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">()</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/BitArray.html#_CPPv43old\" title=\"old\"><span class=\"n\"><span class=\"pre\">old</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector14GetUInt32AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector14GetUInt32AtBitE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector14GetUInt32AtBitE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector14GetUInt32AtBitE6size_t\"></span><span id=\"old::BitVector::GetUInt32AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1af3209ccc39159bbb1f3b104888237815\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt32AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7FindOneEi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7FindOneEi\">\n<span id=\"_CPPv3NK3old9BitVector7FindOneEi\"></span><span id=\"_CPPv2NK3old9BitVector7FindOneEi\"></span><span id=\"old::BitVector::FindOne__iC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3f65d548d8a0cb3309c5788ea17da1e7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Special version of FindOne takes int; most common way to call. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectoreqERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectoreqERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVectoreqERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVectoreqERK9BitVector\"></span><span id=\"old::BitVector::eq-operator__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1add80f5c0f447baec9a3be899cd4c6726\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">==</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Test if two bit vectors are identical. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix11IsConnectedEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix11IsConnectedEv\">\n<span id=\"_CPPv3NK9BitMatrix11IsConnectedEv\"></span><span id=\"_CPPv2NK9BitMatrix11IsConnectedEv\"></span><span id=\"BitMatrix::IsConnectedC\"></span><span class=\"target\" id=\"classBitMatrix_1a665e5c37da1089013e6f589c9643460e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IsConnected</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Does this bit matrix represent a connected set of ones? </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7FindBitEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7FindBitEv\">\n<span id=\"_CPPv3NK4Bits7FindBitEv\"></span><span id=\"_CPPv2NK4Bits7FindBitEv\"></span><span id=\"Bits::FindBitC\"></span><span class=\"target\" id=\"classBits_1a4fc73bfd1909a3e706b69ede36b0b761\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Deprecated: Return the position of the first one; return -1 if no ones in vector. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9ShiftLeftEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9ShiftLeftEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray9ShiftLeftEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray9ShiftLeftEK6size_t\"></span><span id=\"old::BitArray::ShiftLeft__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a39e5f87b5da8d8586c12dca9fe1bc6f2\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ShiftLeft</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bEN4Bits6ImportER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bEN4Bits6ImportER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\">\n<span id=\"_CPPv3I0_bEN4Bits6ImportERK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\"></span><span id=\"_CPPv2I0_bEN4Bits6ImportERK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a04942664ab39189cf7d1466b83104c3d\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Import</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits6ImportER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\" title=\"Bits::Import::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits6ImportER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\" title=\"Bits::Import::ZERO_LEFT2\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">from_bits</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_copy_bits</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../math/api/constants.html#_CPPv410MAX_SIZE_T\" title=\"MAX_SIZE_T\"><span class=\"n\"><span class=\"pre\">MAX_SIZE_T</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Assignment from another Bits object without changing size. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4IE4hashIN3old9BitVectorEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IE4hashIN3old9BitVectorEE\">\n<span id=\"_CPPv3IE4hashIN3old9BitVectorEE\"></span><span id=\"_CPPv2IE4hashIN3old9BitVectorEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"structhash_3_01old_1_1BitVector_01_4\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">hash</span></span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/BitArray.html#_CPPv43old\" title=\"old\"><span class=\"n\"><span class=\"pre\">old</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>Hash function to allow BitVector to be used with maps and sets. This is added to the std namespace so that BitVectors can be used in data structures that require hashing (such as unordered_map) </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E7MaskLow4TYPENSt6size_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E7MaskLow4TYPENSt6size_tE\">\n<span id=\"_CPPv3I0E7MaskLowNSt6size_tE\"></span><span id=\"_CPPv2I0E7MaskLowNSt6size_tE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1adaa8ec664d009695eb54d151046921c6\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E7MaskLow4TYPENSt6size_tE\" title=\"MaskLow::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaskLow</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Quick bit-mask generator for low bits. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9GetAsCharE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9GetAsCharE6size_t\">\n<span id=\"_CPPv3NK4Bits9GetAsCharE6size_t\"></span><span id=\"_CPPv2NK4Bits9GetAsCharE6size_t\"></span><span id=\"Bits::GetAsChar__sC\"></span><span class=\"target\" id=\"classBits_1ad645b70d0449d5de7b7b62352e7f2fc7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetAsChar</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert a specified bit to a character. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray5countEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray5countEv\">\n<span id=\"_CPPv3NK3old8BitArray5countEv\"></span><span id=\"_CPPv2NK3old8BitArray5countEv\"></span><span id=\"old::BitArray::countC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa714ff6df4a36fd79782544ddfb6f072\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">count</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector11GetNumBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector11GetNumBytesEv\">\n<span id=\"_CPPv3NK3old9BitVector11GetNumBytesEv\"></span><span id=\"_CPPv2NK3old9BitVector11GetNumBytesEv\"></span><span id=\"old::BitVector::GetNumBytesC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1af40d0a9cff6585b8d7b9122e1a632de3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNumBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many bytes are in this BitVector? (includes empty field space) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray10SHIFT_SELFEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10SHIFT_SELFEKi\">\n<span id=\"_CPPv3N3old8BitArray10SHIFT_SELFEKi\"></span><span id=\"_CPPv2N3old8BitArray10SHIFT_SELFEKi\"></span><span id=\"old::BitArray::SHIFT_SELF__iC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a874077c1a0d82f4a10271828ebe74573\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SHIFT_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Positive shifts go right and negative shifts go left (0 does nothing); store result here, and return this object. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray4HashEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4HashEv\">\n<span id=\"_CPPv3NK3old8BitArray4HashEv\"></span><span id=\"_CPPv2NK3old8BitArray4HashEv\"></span><span id=\"old::BitArray::HashC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7872a51b4db974a517611b8a0564f51b\"></span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Hash</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>A simple hash function for bit vectors. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray10Byte2FieldEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10Byte2FieldEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray10Byte2FieldEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray10Byte2FieldEK6size_t\"></span><span id=\"old::BitArray::Byte2Field__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1acd7cf7dacca275c4d96aa20f75752557\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Byte2Field</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray13GetUInt8AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray13GetUInt8AtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray13GetUInt8AtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray13GetUInt8AtBitE6size_t\"></span><span id=\"old::BitArray::GetUInt8AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a35ca91db7ac153d30bcd08a4d7ce0c83\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt8AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 8-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bENK3old8BitArrayltEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArrayltEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArrayltERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArrayltERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a94bd1a331060d5319dc3e7d77b1df982\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayltEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&lt;::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayltEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&lt;::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Compare two BitArray objects, based on the associated binary value. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray4noneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4noneEv\">\n<span id=\"_CPPv3NK3old8BitArray4noneEv\"></span><span id=\"_CPPv2NK3old8BitArray4noneEv\"></span><span id=\"old::BitArray::noneC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1abd9a0273291021438e0ed08c0cef8b33\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">none</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray7GetByteE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7GetByteE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray7GetByteE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray7GetByteE6size_t\"></span><span id=\"old::BitArray::GetByte__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a35237a50abbee21a09b461f4642eae99\"></span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetByte</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the byte at the specified byte index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NR4BitsaSEPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR4BitsaSEPKc\">\n<span id=\"_CPPv3NR4BitsaSEPKc\"></span><span id=\"_CPPv2NR4BitsaSEPKc\"></span><span id=\"Bits::assign-operator__cCPR\"></span><span class=\"target\" id=\"classBits_1af4a6fa852f1a4be5209de551a1e14858\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a literal string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector12ChooseRandomER6RandomK6size_tK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector12ChooseRandomER6RandomK6size_tK6size_t6size_t\">\n<span id=\"_CPPv3N3old9BitVector12ChooseRandomER6RandomK6size_tK6size_t6size_t\"></span><span id=\"_CPPv2N3old9BitVector12ChooseRandomER6RandomK6size_tK6size_t6size_t\"></span><span id=\"old::BitVector::ChooseRandom__RandomR.sC.sC.s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ad3ad1697c6c7b629822cc3bc25b7a09a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ChooseRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector8MAX_BITSE\" title=\"old::BitVector::MAX_BITS\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a given number of ones. </p><p>Set all bits randomly, with a given number of them being on. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVectorrsEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVectorrsEK6size_t\">\n<span id=\"_CPPv3NK3old9BitVectorrsEK6size_t\"></span><span id=\"_CPPv2NK3old9BitVectorrsEK6size_t\"></span><span id=\"old::BitVector::rshift-operator__sCC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3789b4165360df9622e2fb8e51bef9df\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator shift right\u2026 </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix5ToRowE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix5ToRowE6size_t\">\n<span id=\"_CPPv3N9BitMatrix5ToRowE6size_t\"></span><span id=\"_CPPv2N9BitMatrix5ToRowE6size_t\"></span><span id=\"BitMatrix::ToRow__s\"></span><span class=\"target\" id=\"classBitMatrix_1a40592a05f46a7950717a209047448499\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToRow</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Identify which row a specific ID is part of. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray6ByteIDEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6ByteIDEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray6ByteIDEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray6ByteIDEK6size_t\"></span><span id=\"old::BitArray::ByteID__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1d32a7e6b04be4cb53bb370d6b45d3a1\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ByteID</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I0ENK4Bits7GetOnesER6vectorI1TER6vectorI1TE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK4Bits7GetOnesER6vectorI1TER6vectorI1TE\">\n<span id=\"_CPPv3I0ENK4Bits7GetOnesER6vectorI1TE\"></span><span id=\"_CPPv2I0ENK4Bits7GetOnesER6vectorI1TE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a0981ae79bc0d28597e3c1ddf76294129\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK4Bits7GetOnesER6vectorI1TER6vectorI1TE\" title=\"Bits::GetOnes::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetOnes</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK4Bits7GetOnesER6vectorI1TER6vectorI1TE\" title=\"Bits::GetOnes::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out_vals</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Collect positions of ones in the provided vector (allows id type choice) </p><p>Return positions of all ones using a specified type. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bEN4Bits6AppendER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bEN4Bits6AppendER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2E\">\n<span id=\"_CPPv3I0_bEN4Bits6AppendERK4BitsI7DATA2_T10ZERO_LEFT2E\"></span><span id=\"_CPPv2I0_bEN4Bits6AppendERK4BitsI7DATA2_T10ZERO_LEFT2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a5c8ec10c6f922caece99cd3ed330dd54\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Append</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits6AppendER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::Append::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits6AppendER4BitsRK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::Append::ZERO_LEFT2\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>concatenate another Bits object on to the end of this one. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NR3old8BitArrayaSERK6this_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old8BitArrayaSERK6this_t\">\n<span id=\"_CPPv3NR3old8BitArrayaSERK6this_t\"></span><span id=\"_CPPv2NR3old8BitArrayaSERK6this_t\"></span><span id=\"old::BitArray::assign-operator__this_tCRR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa692399466e0c84a25025def5b5950ea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray6this_tE\" title=\"old::BitArray::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_bits</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Assignment operator (no separate move operator since no resources to move\u2026) </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4flipEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4flipEv\">\n<span id=\"_CPPv3N4Bits4flipEv\"></span><span id=\"_CPPv2N4Bits4flipEv\"></span><span id=\"Bits::flip\"></span><span class=\"target\" id=\"classBits_1ae8b040142b06bdfe72b4fe19cf8dfaa1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3AnyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3AnyEv\">\n<span id=\"_CPPv3NK3old8BitArray3AnyEv\"></span><span id=\"_CPPv2NK3old8BitArray3AnyEv\"></span><span id=\"old::BitArray::AnyC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1adb74f28ca26729611537398edcd22158\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Any</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if ANY bits in the BitArray are one, else return false. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector8GetBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector8GetBytesEv\">\n<span id=\"_CPPv3NK3old9BitVector8GetBytesEv\"></span><span id=\"_CPPv2NK3old9BitVector8GetBytesEv\"></span><span id=\"old::BitVector::GetBytesC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a8ee47da708516be814bf13ff30fb2b52\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">span</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get a read-only view into the internal array used by BitVector. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector8RawBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector8RawBytesEv\">\n<span id=\"_CPPv3NK3old9BitVector8RawBytesEv\"></span><span id=\"_CPPv2NK3old9BitVector8RawBytesEv\"></span><span id=\"old::BitVector::RawBytesC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1afe35e9bc3bc143bb7935ae24cc1b74f6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get a read-only pointer to the internal array used by BitVector. (note that bits are NOT in order at the byte level!) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits4sizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits4sizeEv\">\n<span id=\"_CPPv3NK4Bits4sizeEv\"></span><span id=\"_CPPv2NK4Bits4sizeEv\"></span><span id=\"Bits::sizeCCE\"></span><span class=\"target\" id=\"classBits_1a8086e85b93e495cba274c5bd57a80244\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">size</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NR3old9BitVectoraSEPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old9BitVectoraSEPKc\">\n<span id=\"_CPPv3NR3old9BitVectoraSEPKc\"></span><span id=\"_CPPv2NR3old9BitVectoraSEPKc\"></span><span id=\"old::BitVector::assign-operator__cCPR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a31cf546b5a1c22f0c42c79cf5b82104f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a literal string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits10ShiftRightEK6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits10ShiftRightEK6size_tb\">\n<span id=\"_CPPv3N4Bits10ShiftRightEK6size_tb\"></span><span id=\"_CPPv2N4Bits10ShiftRightEK6size_tb\"></span><span id=\"Bits::ShiftRight__sC.bCE\"></span><span class=\"target\" id=\"classBits_1a4398f81397cb5cf9a34c8a00b3831cf3\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ShiftRight</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">raw</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits8GetUInt8E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits8GetUInt8E6size_t\">\n<span id=\"_CPPv3NK4Bits8GetUInt8E6size_t\"></span><span id=\"_CPPv2NK4Bits8GetUInt8E6size_t\"></span><span id=\"Bits::GetUInt8__sC\"></span><span class=\"target\" id=\"classBits_1af67b59ff2fd4d3603a71afa557ef1e79\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt8</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 8-bit uint from the specified uint index. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7GetSizeEv\">\n<span id=\"_CPPv3N3old8BitArray7GetSizeEv\"></span><span id=\"_CPPv2N3old8BitArray7GetSizeEv\"></span><span id=\"old::BitArray::GetSizeCE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1adcab42ee068b4ca0d29c758a8ee5141c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>How many bits are in this BitArray? </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector9GetUInt16E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector9GetUInt16E6size_t\">\n<span id=\"_CPPv3NK3old9BitVector9GetUInt16E6size_t\"></span><span id=\"_CPPv2NK3old9BitVector9GetUInt16E6size_t\"></span><span id=\"old::BitVector::GetUInt16__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a0c8b75eba4e52704cf0128078692add9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt16</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6ToggleE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6ToggleE6size_t\">\n<span id=\"_CPPv3N4Bits6ToggleE6size_t\"></span><span id=\"_CPPv2N4Bits6ToggleE6size_t\"></span><span id=\"Bits::Toggle__s\"></span><span class=\"target\" id=\"classBits_1a1fdf765d5d296473e3557949f34a9c56\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Change a specified bit to the opposite value. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NR3old8BitArrayaSEPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old8BitArrayaSEPKc\">\n<span id=\"_CPPv3NR3old8BitArrayaSEPKc\"></span><span id=\"_CPPv2NR3old8BitArrayaSEPKc\"></span><span id=\"old::BitArray::assign-operator__cCPR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1f66e2214907611f460af2e5bdc781a4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a literal string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitseoERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitseoERK4Bits\">\n<span id=\"_CPPv3NK4BitseoERK4Bits\"></span><span id=\"_CPPv2NK4BitseoERK4Bits\"></span><span id=\"Bits::xor-operator__BitsCRC\"></span><span class=\"target\" id=\"classBits_1ab1863abdcf1a7fcf348ecd0adbb5696f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise XOR\u2026 </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2E\">\n<span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a18ad5fa7a68259aa2def1ad0de853d01\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::operator=::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2E\" title=\"Bits::operator=::ZERO_LEFT2\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Other Bits assignment operator. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector4HashE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector4HashE6size_t\">\n<span id=\"_CPPv3NK3old9BitVector4HashE6size_t\"></span><span id=\"_CPPv2NK3old9BitVector4HashE6size_t\"></span><span id=\"old::BitVector::Hash__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a0e03a68924363ba3340ba42bb9e591d9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Hash</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_field</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>A simple hash function for bit vectors. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix6SetAllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix6SetAllEv\">\n<span id=\"_CPPv3N9BitMatrix6SetAllEv\"></span><span id=\"_CPPv2N9BitMatrix6SetAllEv\"></span><span id=\"BitMatrix::SetAll\"></span><span class=\"target\" id=\"classBitMatrix_1a3e1762cd25dcccb2e2b4370faa794234\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetAll</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4I0EN3old9BitVector10ApplyRangeER9BitVectorRK5FUN_T6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old9BitVector10ApplyRangeER9BitVectorRK5FUN_T6size_t6size_t\">\n<span id=\"_CPPv3I0EN3old9BitVector10ApplyRangeERK5FUN_T6size_t6size_t\"></span><span id=\"_CPPv2I0EN3old9BitVector10ApplyRangeERK5FUN_T6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1ae76ff0bb274d972eae529e604bc161f0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ApplyRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old9BitVector10ApplyRangeER9BitVectorRK5FUN_T6size_t6size_t\" title=\"old::BitVector::ApplyRange::FUN_T\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">fun</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray2ORERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray2ORERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray2ORERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray2ORERK8BitArray\"></span><span id=\"old::BitArray::OR__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae2e584ae47d007c20a7f75ea64903126\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean OR with a second BitArray and return the result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArrayplERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayplERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArrayplERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArrayplERK8BitArray\"></span><span id=\"old::BitArray::add-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a846f8e63a679c9829147e37c17298a7b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">+</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator plus\u2026 </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsE6size_tR6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsE6size_tR6RandomK6size_t\">\n<span id=\"_CPPv3N4Bits4BitsE6size_tR6RandomK6size_t\"></span><span id=\"_CPPv2N4Bits4BitsE6size_tR6RandomK6size_t\"></span><span id=\"Bits::Bits__s.RandomR.sC\"></span><span class=\"target\" id=\"classBits_1a048649407324df7220a0bee3aecf5c47\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random Bits with provided number of 1\u2019s. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits5ClearEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits5ClearEv\">\n<span id=\"_CPPv3N4Bits5ClearEv\"></span><span id=\"_CPPv2N4Bits5ClearEv\"></span><span id=\"Bits::Clear\"></span><span class=\"target\" id=\"classBits_1a3531be8df7bb2b318394642bba859d47\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits to 0. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4I0EN3old9BitVector15SetValueAtIndexEvK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old9BitVector15SetValueAtIndexEvK6size_t1T\">\n<span id=\"_CPPv3I0EN3old9BitVector15SetValueAtIndexEK6size_t1T\"></span><span id=\"_CPPv2I0EN3old9BitVector15SetValueAtIndexEK6size_t1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a6c640c48bcdd031f813944f986d4e922\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN3old9BitVector15SetValueAtIndexEvK6size_t1T\" title=\"old::BitVector::SetValueAtIndex::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set specified type at a given index (in steps of that type size) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7GetByteE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7GetByteE6size_t\">\n<span id=\"_CPPv3NK4Bits7GetByteE6size_t\"></span><span id=\"_CPPv2NK4Bits7GetByteE6size_t\"></span><span id=\"Bits::GetByte__sC\"></span><span class=\"target\" id=\"classBits_1a101775ee183321368eddeb717848daf3\"></span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetByte</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the byte at the specified byte index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7BytePtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7BytePtrEv\">\n<span id=\"_CPPv3N4Bits7BytePtrEv\"></span><span id=\"_CPPv2N4Bits7BytePtrEv\"></span><span id=\"Bits::BytePtr\"></span><span class=\"target\" id=\"classBits_1ac03ffb997cf3d995f8cdb2288846dfdd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7GetSizeEv\">\n<span id=\"_CPPv3NK4Bits7GetSizeEv\"></span><span id=\"_CPPv2NK4Bits7GetSizeEv\"></span><span id=\"Bits::GetSizeCCE\"></span><span class=\"target\" id=\"classBits_1a510f76bd53ac29bdc14be0b27cf9363d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many bits do we currently have? </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv412bits_field_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv412bits_field_t\">\n<span id=\"_CPPv312bits_field_t\"></span><span id=\"_CPPv212bits_field_t\"></span><span class=\"target\" id=\"bitset__utils_8hpp_1ab0e28239af0db97497873e6da96ee40d\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">bits_field_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><br/></dt><dd><p>Use size_t as the default bits field type. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray14SetRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray14SetRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N3old8BitArray14SetRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N3old8BitArray14SetRandomCountER6RandomK6size_t\"></span><span id=\"old::BitArray::SetRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aae8870c1060407e7827d2bd2c63ae130\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set a specified number of random bits (does not check if already set.) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN3old9BitVector9BitVectorE1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN3old9BitVector9BitVectorE1T\">\n<span id=\"_CPPv3I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN3old9BitVector9BitVectorE1T\"></span><span id=\"_CPPv2I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN3old9BitVector9BitVectorE1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">enable_if</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">is_arithmetic</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN3old9BitVector9BitVectorE1T\" title=\"old::BitVector::BitVector::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">type</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1afdac810e1c46c6ada1c66bab86404834\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0_NSt9enable_ifINSt13is_arithmeticI1TE5valueEiE4typeEEN3old9BitVector9BitVectorE1T\" title=\"old::BitVector::BitVector::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Anything not otherwise defined for first argument, convert to size_t. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVectorlSEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVectorlSEK6size_t\">\n<span id=\"_CPPv3N3old9BitVectorlSEK6size_t\"></span><span id=\"_CPPv2N3old9BitVectorlSEK6size_t\"></span><span id=\"old::BitVector::lshift-assign-operator__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a7a993f9945f5c715acc31b172c2acc48\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator for shift left\u2026 </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7SetByteE6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7SetByteE6size_t7uint8_t\">\n<span id=\"_CPPv3N4Bits7SetByteE6size_t7uint8_t\"></span><span id=\"_CPPv2N4Bits7SetByteE6size_t7uint8_t\"></span><span id=\"Bits::SetByte__s.uint8_t\"></span><span class=\"target\" id=\"classBits_1a2af5e53f1a1c87d148423fff3b105fbf\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetByte</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the byte at the specified byte index. </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E8MaskUsed4TYPE4TYPE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E8MaskUsed4TYPE4TYPE\">\n<span id=\"_CPPv3I0E8MaskUsed4TYPE\"></span><span id=\"_CPPv2I0E8MaskUsed4TYPE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1a27e8697b5ae404f6fdc27e9fd9aa5abb\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E8MaskUsed4TYPE4TYPE\" title=\"MaskUsed::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaskUsed</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E8MaskUsed4TYPE4TYPE\" title=\"MaskUsed::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector14SetUInt64AtBitEK6size_t8uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector14SetUInt64AtBitEK6size_t8uint64_t\">\n<span id=\"_CPPv3N3old9BitVector14SetUInt64AtBitEK6size_t8uint64_t\"></span><span id=\"_CPPv2N3old9BitVector14SetUInt64AtBitEK6size_t8uint64_t\"></span><span id=\"old::BitVector::SetUInt64AtBit__sC.uint64_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ad1d91607282e2545130c4d046555bc7f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt64AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 64-bit uint at the specified uint index. </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4I0E15RotateBitsRight1T1T6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E15RotateBitsRight1T1T6size_t\">\n<span id=\"_CPPv3I0E15RotateBitsRight1T6size_t\"></span><span id=\"_CPPv2I0E15RotateBitsRight1T6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1a459d3d46d0ad82a7bc3b82e504a73e4c\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E15RotateBitsRight1T1T6size_t\" title=\"RotateBitsRight::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateBitsRight</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0E15RotateBitsRight1T1T6size_t\" title=\"RotateBitsRight::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector7REVERSEEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector7REVERSEEv\">\n<span id=\"_CPPv3NK3old9BitVector7REVERSEEv\"></span><span id=\"_CPPv2NK3old9BitVector7REVERSEEv\"></span><span id=\"old::BitVector::REVERSEC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae665b66751cecb721c85baae3332d837\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">REVERSE</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Reverse order of bits in the bitset. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector6ROTATEEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector6ROTATEEKi\">\n<span id=\"_CPPv3NK3old9BitVector6ROTATEEKi\"></span><span id=\"_CPPv2NK3old9BitVector6ROTATEEKi\"></span><span id=\"old::BitVector::ROTATE__iCC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab736eadedaa846f2c69a90cbd384cf3a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTATE</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Positive rotates go left and negative rotates go left (0 does nothing); return result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0EN4Bits13SetValueAtBitER4BitsK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN4Bits13SetValueAtBitER4BitsK6size_t1T\">\n<span id=\"_CPPv3I0EN4Bits13SetValueAtBitEK6size_t1T\"></span><span id=\"_CPPv2I0EN4Bits13SetValueAtBitEK6size_t1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a1a69463ae0a478a365f09d0656c0daad\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN4Bits13SetValueAtBitER4BitsK6size_t1T\" title=\"Bits::SetValueAtBit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray10RotateLeftEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10RotateLeftEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray10RotateLeftEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray10RotateLeftEK6size_t\"></span><span id=\"old::BitArray::RotateLeft__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1cb1e3c0b28274fd978e9b5ecc82dded\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateLeft</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size_raw</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper: call ROTATE with negative number instead. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9SetRandomER6RandomKdK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9SetRandomER6RandomKdK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray9SetRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray9SetRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"old::BitArray::SetRandom__RandomR.doubleC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a92e22bff3f7a10f7cb99a758aa65c578\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set random bits with a given probability (does not check if already set.) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector11PrintFieldsERNSt7ostreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector11PrintFieldsERNSt7ostreamERKNSt6stringE\">\n<span id=\"_CPPv3NK3old9BitVector11PrintFieldsERNSt7ostreamERKNSt6stringE\"></span><span id=\"_CPPv2NK3old9BitVector11PrintFieldsERNSt7ostreamERKNSt6stringE\"></span><span id=\"old::BitVector::PrintFields__osR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1add5f21b350408d6c6f5d69f825ebe40d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintFields</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print a space between each field (or other provided spacer) </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8XOR_SELFERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8XOR_SELFERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVector8XOR_SELFERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVector8XOR_SELFERK9BitVector\"></span><span id=\"old::BitVector::XOR_SELF__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a126fa7bd3cae993edcf2b5ea11519274\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">XOR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean XOR with this BitVector, store result here, and return this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector8NumBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector8NumBytesEv\">\n<span id=\"_CPPv3NK3old9BitVector8NumBytesEv\"></span><span id=\"_CPPv2NK3old9BitVector8NumBytesEv\"></span><span id=\"old::BitVector::NumBytesC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a7c3a6fdb4cdd4f2de6aa0828167a5a9e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NumBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many bytes are used for the current set of bits? (rounded up!) </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4BitsEPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4BitsEPKc\">\n<span id=\"_CPPv3N4Bits4BitsEPKc\"></span><span id=\"_CPPv2N4Bits4BitsEPKc\"></span><span id=\"Bits::Bits__cCP\"></span><span class=\"target\" id=\"classBits_1a8644450b33252df874fcb5b41971ef69\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a Bits from a literal string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7FindBitEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7FindBitEK6size_t\">\n<span id=\"_CPPv3NK4Bits7FindBitEK6size_t\"></span><span id=\"_CPPv2NK4Bits7FindBitEK6size_t\"></span><span id=\"Bits::FindBit__sCC\"></span><span class=\"target\" id=\"classBits_1a61931051ab8d262f9e5a89d811c10339\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Deprecated version of FindOne(). </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8SetRangeE6size_t6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8SetRangeE6size_t6size_tb\">\n<span id=\"_CPPv3N4Bits8SetRangeE6size_t6size_tb\"></span><span id=\"_CPPv2N4Bits8SetRangeE6size_t6size_tb\"></span><span id=\"Bits::SetRange__s.s.b\"></span><span class=\"target\" id=\"classBits_1a71e2c3b366df981c368da339c6bee6ab\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set a range of bits to value (default one): [start, stop) </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix10RightShiftEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix10RightShiftEv\">\n<span id=\"_CPPv3NK9BitMatrix10RightShiftEv\"></span><span id=\"_CPPv2NK9BitMatrix10RightShiftEv\"></span><span id=\"BitMatrix::RightShiftC\"></span><span class=\"target\" id=\"classBitMatrix_1ac792aa9ed6b30dc4db87f5b5f49aabd0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RightShift</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix5UnsetE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix5UnsetE6size_t6size_t\">\n<span id=\"_CPPv3N9BitMatrix5UnsetE6size_t6size_t\"></span><span id=\"_CPPv2N9BitMatrix5UnsetE6size_t6size_t\"></span><span id=\"BitMatrix::Unset__s.s\"></span><span class=\"target\" id=\"classBitMatrix_1a41a14e206db89fe39106badb873b06ed\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Unset</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">col</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">row</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits2atE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits2atE6size_t\">\n<span id=\"_CPPv3NK4Bits2atE6size_t\"></span><span id=\"_CPPv2NK4Bits2atE6size_t\"></span><span id=\"Bits::at__sC\"></span><span class=\"target\" id=\"classBits_1a9ff3b7ff106f35675c1cdfdf70b9b314\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">at</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERR4BitsI6DATA_T9ZERO_LEFTE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERR4BitsI6DATA_T9ZERO_LEFTE\">\n<span id=\"_CPPv3I0_bENR4BitsaSERR4BitsI6DATA_T9ZERO_LEFTE\"></span><span id=\"_CPPv2I0_bENR4BitsaSERR4BitsI6DATA_T9ZERO_LEFTE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1ad93a6a24a1b192975bf025f9c8f2e52f\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERR4BitsI6DATA_T9ZERO_LEFTE\" title=\"Bits::operator=::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERR4BitsI6DATA_T9ZERO_LEFTE\" title=\"Bits::operator=::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERR4BitsI6DATA_T9ZERO_LEFTE\" title=\"Bits::operator=::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERR4BitsI6DATA_T9ZERO_LEFTE\" title=\"Bits::operator=::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Move operator. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector5frontEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector5frontEv\">\n<span id=\"_CPPv3N3old9BitVector5frontEv\"></span><span id=\"_CPPv2N3old9BitVector5frontEv\"></span><span id=\"old::BitVector::front\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab57f6118959455f6e96f59a5bd6c72bf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">front</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArrayD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayD0Ev\">\n<span id=\"_CPPv3N3old8BitArrayD0Ev\"></span><span id=\"_CPPv2N3old8BitArrayD0Ev\"></span><span id=\"old::BitArray::~BitArray\"></span><span class=\"target\" id=\"classold_1_1BitArray_1abf155668ff57669863dce5bedd95f401\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd><p>Destructor. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8SetRangeE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8SetRangeE6size_t6size_t\">\n<span id=\"_CPPv3N3old8BitArray8SetRangeE6size_t6size_t\"></span><span id=\"_CPPv2N3old8BitArray8SetRangeE6size_t6size_t\"></span><span id=\"old::BitArray::SetRange__s.s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a77195cd7175cd7ca89f47450713a1fa7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set a range of bits to one: [start, stop) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits3AnyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits3AnyEv\">\n<span id=\"_CPPv3NK4Bits3AnyEv\"></span><span id=\"_CPPv2NK4Bits3AnyEv\"></span><span id=\"Bits::AnyC\"></span><span class=\"target\" id=\"classBits_1a989f4d428426f43d95a315fff434c072\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Any</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if ANY bits are set to 1, otherwise return false. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits5frontEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits5frontEv\">\n<span id=\"_CPPv3N4Bits5frontEv\"></span><span id=\"_CPPv2N4Bits5frontEv\"></span><span id=\"Bits::front\"></span><span class=\"target\" id=\"classBits_1a6948252d4838bae2ab089e60cec2c58c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">front</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArrayoRERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayoRERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArrayoRERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArrayoRERK8BitArray\"></span><span id=\"old::BitArray::or-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a25a94dbf172f8811158b690204ebe777\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise OR\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9SetUInt32EK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9SetUInt32EK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old9BitVector9SetUInt32EK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old9BitVector9SetUInt32EK6size_t8uint32_t\"></span><span id=\"old::BitVector::SetUInt32__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a6f2bc42a0fab3841a43cb23e64492336\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt32</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits11PrintOneIDsERNSt7ostreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits11PrintOneIDsERNSt7ostreamERKNSt6stringE\">\n<span id=\"_CPPv3NK4Bits11PrintOneIDsERNSt7ostreamERKNSt6stringE\"></span><span id=\"_CPPv2NK4Bits11PrintOneIDsERNSt7ostreamERKNSt6stringE\"></span><span id=\"Bits::PrintOneIDs__osR.ssCRC\"></span><span class=\"target\" id=\"classBits_1aa3a0570134f4d5744f5594bb4d94bc63\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintOneIDs</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print the positions of all one bits, spaces are the default separator. </p></dd>", "a[href=\"api/Bits_Data.html#_CPPv4I_6size_tE14Bits_FixedData\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tE14Bits_FixedData\">\n<span id=\"_CPPv3I_6size_tE14Bits_FixedData\"></span><span id=\"_CPPv2I_6size_tE14Bits_FixedData\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"Bits__Data_8hpp_1ad370dc18ea5364779ff1d4f4f0d5b7b7\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Bits_FixedData</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">internal</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">Bits_Data</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">internal</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">Bits_Data_Mem_Fixed</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tE14Bits_FixedData\" title=\"Bits_FixedData::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8NOT_SELFEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8NOT_SELFEv\">\n<span id=\"_CPPv3N3old9BitVector8NOT_SELFEv\"></span><span id=\"_CPPv2N3old9BitVector8NOT_SELFEv\"></span><span id=\"old::BitVector::NOT_SELF\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a50b3330fe1958c08a0a5477b1af3becf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOT_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NOT with this BitVector, store result here, and return this object. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\">\n<span id=\"_CPPv3I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\"></span><span id=\"_CPPv2I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a45b524b39935a6e40b37bc308559e758\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">initializer_list</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\" title=\"old::BitArray::BitArray::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">l</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to fill in a bit array from a vector. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4I_6size_tENR3old9BitVectoraSER9BitVectorRKNSt6bitsetI8NUM_BITSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tENR3old9BitVectoraSER9BitVectorRKNSt6bitsetI8NUM_BITSEE\">\n<span id=\"_CPPv3I_6size_tENR3old9BitVectoraSERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"_CPPv2I_6size_tENR3old9BitVectoraSERKNSt6bitsetI8NUM_BITSEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a2188ef24a87336f58ba9b6fd0bcaed1d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">bitset</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tENR3old9BitVectoraSER9BitVectorRKNSt6bitsetI8NUM_BITSEE\" title=\"old::BitVector::operator=::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitset</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a std::bitset. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector5resetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector5resetEv\">\n<span id=\"_CPPv3N3old9BitVector5resetEv\"></span><span id=\"_CPPv2N3old9BitVector5resetEv\"></span><span id=\"old::BitVector::reset\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a8870a09c3e17e51bbb54552686c8131f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix4ToIDE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix4ToIDE6size_t6size_t\">\n<span id=\"_CPPv3N9BitMatrix4ToIDE6size_t6size_t\"></span><span id=\"_CPPv2N9BitMatrix4ToIDE6size_t6size_t\"></span><span id=\"BitMatrix::ToID__s.s\"></span><span class=\"target\" id=\"classBitMatrix_1a74bab63e63011716a1c2621b5ec60937\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToID</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">col</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">row</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Identify the ID associated with a specified row and column. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits10PrintArrayERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits10PrintArrayERNSt7ostreamE\">\n<span id=\"_CPPv3NK4Bits10PrintArrayERNSt7ostreamE\"></span><span id=\"_CPPv2NK4Bits10PrintArrayERNSt7ostreamE\"></span><span id=\"Bits::PrintArray__osRC\"></span><span class=\"target\" id=\"classBits_1aa7a118a91531baf8c7b332bd153d0137\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print from smallest bit position to largest. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERKNSt6stringE\">\n<span id=\"_CPPv3I0_bENR4BitsaSERKNSt6stringE\"></span><span id=\"_CPPv2I0_bENR4BitsaSERKNSt6stringE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a513b929440b5e95ca9a2d3d8882e7e5c\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERKNSt6stringE\" title=\"Bits::operator=::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENR4BitsaSER4BitsI6DATA_T9ZERO_LEFTERKNSt6stringE\" title=\"Bits::operator=::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits11PrintFieldsERNSt7ostreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits11PrintFieldsERNSt7ostreamERKNSt6stringE\">\n<span id=\"_CPPv3NK4Bits11PrintFieldsERNSt7ostreamERKNSt6stringE\"></span><span id=\"_CPPv2NK4Bits11PrintFieldsERNSt7ostreamERKNSt6stringE\"></span><span id=\"Bits::PrintFields__osR.ssCRC\"></span><span class=\"target\" id=\"classBits_1a089fadb37451bd384e83a689ae90289e\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintFields</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print a space between each field (or other provided spacer) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits8ToStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits8ToStringEv\">\n<span id=\"_CPPv3NK4Bits8ToStringEv\"></span><span id=\"_CPPv2NK4Bits8ToStringEv\"></span><span id=\"Bits::ToStringC\"></span><span class=\"target\" id=\"classBits_1a24554c655d95c59c50551a86a3716d5d\"></span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this Bits to a vector string [index 0 based on ZERO_LEFT]. </p><p>Convert this Bits object to a vector string [0 index on left]. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\">\n<span id=\"_CPPv3I_6size_t_bEN3old16SimpleMatchCoeffERK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\"></span><span id=\"_CPPv2I_6size_t_bEN3old16SimpleMatchCoeffERK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"namespaceold_1a62f4fd289424f61151433105748ae26f\"></span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SimpleMatchCoeff</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\" title=\"old::SimpleMatchCoeff::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\" title=\"old::SimpleMatchCoeff::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\" title=\"old::SimpleMatchCoeff::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\" title=\"old::SimpleMatchCoeff::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Computes simple matching coefficient (<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Simple_matching_coefficient\">https://en.wikipedia.org/wiki/Simple_matching_coefficient</a>). </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7RawCopyEK3PtrIK7field_tE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7RawCopyEK3PtrIK7field_tE6size_t\">\n<span id=\"_CPPv3N4Bits7RawCopyEK3PtrIK7field_tE6size_t\"></span><span id=\"_CPPv2N4Bits7RawCopyEK3PtrIK7field_tE6size_t\"></span><span id=\"Bits::RawCopy__Ptr:field_tC:C.s\"></span><span class=\"target\" id=\"classBits_1a87433ab4d259efbfbfb32ffa44c5584e\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawCopy</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N4Bits7field_tE\" title=\"Bits::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">copy_fields</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../math/api/constants.html#_CPPv410MAX_SIZE_T\" title=\"MAX_SIZE_T\"><span class=\"n\"><span class=\"pre\">MAX_SIZE_T</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#bits\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Bits<a class=\"headerlink\" href=\"#bits\" title=\"Link to this heading\">\uf0c1</a></h1><p>Stuff about bits</p>", "a[href=\"api/Bits.html#_CPPv4N4Bits8NOT_SELFEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8NOT_SELFEv\">\n<span id=\"_CPPv3N4Bits8NOT_SELFEv\"></span><span id=\"_CPPv2N4Bits8NOT_SELFEv\"></span><span id=\"Bits::NOT_SELF\"></span><span class=\"target\" id=\"classBits_1ad31010e7f5454f648da9e8b9c0edc02c\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOT_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NOT with this Bits, store result here, and return this object. </p><p>Perform a Boolean NOT with this Bits object, store result here, and return this object. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitslsEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitslsEK6size_t\">\n<span id=\"_CPPv3NK4BitslsEK6size_t\"></span><span id=\"_CPPv2NK4BitslsEK6size_t\"></span><span id=\"Bits::lshift-operator__sCC\"></span><span class=\"target\" id=\"classBits_1aaa679450a69fb5d4ed4f1443bc815907\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator shift left\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8MAX_BITSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8MAX_BITSE\">\n<span id=\"_CPPv3N3old9BitVector8MAX_BITSE\"></span><span id=\"_CPPv2N3old9BitVector8MAX_BITSE\"></span><span id=\"old::BitVector::MAX_BITS__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a9f0fb0a321c0243dfeac50ade79ab526\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"m\"><span class=\"pre\">1</span></span><br/></dt><dd><p>Value larger than any bit ID. </p></dd>", "a[href=\"api/BitArray.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">BitArray.hpp<a class=\"headerlink\" href=\"#bitarray-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>An Array of a fixed number of bits; similar to std::bitset, but with extra bit magic. Status: RELEASE. </p><p><dl>\n<dt class=\"sig sig-object cpp\">\n<em><span class=\"pre\">Todo:</span></em></dt>\n<dd><p>Some of the functions allow a start bit and end bit; each of these should be checked to make sure that they will work if the start and end are part of the same byte. One option is to do this well ONCE with a macro that properly fills in the details. </p>\n</dd></dl>\n</p>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector4NoneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector4NoneEv\">\n<span id=\"_CPPv3NK3old9BitVector4NoneEv\"></span><span id=\"_CPPv2NK3old9BitVector4NoneEv\"></span><span id=\"old::BitVector::NoneC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae6628801427219066f003b8cc1db6908\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">None</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if NO bits are set to 1, otherwise return false. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8BitArrayEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayEb\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayEb\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayEb\"></span><span id=\"old::BitArray::BitArray__b\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aceae92e354b0a36dc511e58b2f6000fa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">init_val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Constructor: Assume all bits set to zero. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector10ToIDStringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector10ToIDStringERKNSt6stringE\">\n<span id=\"_CPPv3NK3old9BitVector10ToIDStringERKNSt6stringE\"></span><span id=\"_CPPv2NK3old9BitVector10ToIDStringERKNSt6stringE\"></span><span id=\"old::BitVector::ToIDString__ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3720242cab752ee21110b65193a12d4d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToIDString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitVector to a series of IDs. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrixaSERK9BitMatrix\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrixaSERK9BitMatrix\">\n<span id=\"_CPPv3N9BitMatrixaSERK9BitMatrix\"></span><span id=\"_CPPv2N9BitMatrixaSERK9BitMatrix\"></span><span id=\"BitMatrix::assign-operator__BitMatrixCR\"></span><span class=\"target\" id=\"classBitMatrix_1a223eb512b15a8f83a9cb4937acdf5c64\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector9NumFieldsEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector9NumFieldsEv\">\n<span id=\"_CPPv3NK3old9BitVector9NumFieldsEv\"></span><span id=\"_CPPv2NK3old9BitVector9NumFieldsEv\"></span><span id=\"old::BitVector::NumFieldsC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a60c7c617dab369c04b55f768295dc1f6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NumFields</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>How many fields do we need for the current set of bits? </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector2OKEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector2OKEv\">\n<span id=\"_CPPv3NK3old9BitVector2OKEv\"></span><span id=\"_CPPv2NK3old9BitVector2OKEv\"></span><span id=\"old::BitVector::OKC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1af5a8a86640f74c310aec98724e7c0b92\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OK</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits11ClearRandomER6RandomKdK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits11ClearRandomER6RandomKdK6size_t6size_t\">\n<span id=\"_CPPv3N4Bits11ClearRandomER6RandomKdK6size_t6size_t\"></span><span id=\"_CPPv2N4Bits11ClearRandomER6RandomKdK6size_t6size_t\"></span><span id=\"Bits::ClearRandom__RandomR.doubleC.sC.s\"></span><span class=\"target\" id=\"classBits_1ad0dc3dc597e15897721d74f299178a66\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../math/api/constants.html#_CPPv410MAX_SIZE_T\" title=\"MAX_SIZE_T\"><span class=\"n\"><span class=\"pre\">MAX_SIZE_T</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Unset random bits with a given probability (does not check if already zero.) </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9SetRandomER6RandomKdK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9SetRandomER6RandomKdK6size_t6size_t\">\n<span id=\"_CPPv3N4Bits9SetRandomER6RandomKdK6size_t6size_t\"></span><span id=\"_CPPv2N4Bits9SetRandomER6RandomKdK6size_t6size_t\"></span><span id=\"Bits::SetRandom__RandomR.doubleC.sC.s\"></span><span class=\"target\" id=\"classBits_1a36665f6e00d202beb46f694c51396ca0\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../math/api/constants.html#_CPPv410MAX_SIZE_T\" title=\"MAX_SIZE_T\"><span class=\"n\"><span class=\"pre\">MAX_SIZE_T</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set random bits with a given probability (does not check if already set.) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits9GetRangesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits9GetRangesEv\">\n<span id=\"_CPPv3NK4Bits9GetRangesEv\"></span><span id=\"_CPPv2NK4Bits9GetRangesEv\"></span><span id=\"Bits::GetRangesC\"></span><span class=\"target\" id=\"classBits_1a71a02f176dfe93cfcde10235e7e1d86f\"></span><a class=\"reference internal\" href=\"../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../math/api/Range.html#_CPPv4I0_bE5Range\" title=\"Range\"><span class=\"n\"><span class=\"pre\">Range</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetRanges</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find ids of all groups of ones. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4I_N6Random4ProbEEN3old8BitArray10RandomizePER8BitArrayR6RandomK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_N6Random4ProbEEN3old8BitArray10RandomizePER8BitArrayR6RandomK6size_tK6size_t\">\n<span id=\"_CPPv3I_N6Random4ProbEEN3old8BitArray10RandomizePER6RandomK6size_tK6size_t\"></span><span id=\"_CPPv2I_N6Random4ProbEEN3old8BitArray10RandomizePER6RandomK6size_tK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv4N6Random4ProbE\" title=\"Random::Prob\"><span class=\"n\"><span class=\"pre\">Prob</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">P</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a62faf35ea08c68e6530560f2f8340c3b\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RandomizeP</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with probability specified at compile time. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8XOR_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8XOR_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8XOR_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8XOR_SELFERK8BitArray\"></span><span id=\"old::BitArray::XOR_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a51fafcb38fe528c3cc5de7eeca516226\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">XOR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean XOR with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector3NOTEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector3NOTEv\">\n<span id=\"_CPPv3NK3old9BitVector3NOTEv\"></span><span id=\"_CPPv2NK3old9BitVector3NOTEv\"></span><span id=\"old::BitVector::NOTC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a0e3f5e11af3b472af85929302e4fbee8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOT</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NOT on this BitVector and return the result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitsanERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitsanERK4Bits\">\n<span id=\"_CPPv3NK4BitsanERK4Bits\"></span><span id=\"_CPPv2NK4BitsanERK4Bits\"></span><span id=\"Bits::and-operator__BitsCRC\"></span><span class=\"target\" id=\"classBits_1a03e772a18c7cf631ae6e2272174256c8\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise AND\u2026 </p></dd>", "a[href=\"api/bitset_utils.html#_CPPv4IE13UIntMaskFirstIXL0EEE8uint32_tv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4IE13UIntMaskFirstIXL0EEE8uint32_tv\">\n<span id=\"_CPPv3IE13UIntMaskFirstIXL0EEEv\"></span><span id=\"_CPPv2IE13UIntMaskFirstIX0EEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1a19c03fa3fe7fa2f334bbcfef096defe6\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">UIntMaskFirst</span></span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Create an empty bit mask (all zeros) </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits8GetBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits8GetBytesEv\">\n<span id=\"_CPPv3NK4Bits8GetBytesEv\"></span><span id=\"_CPPv2NK4Bits8GetBytesEv\"></span><span id=\"Bits::GetBytesC\"></span><span class=\"target\" id=\"classBits_1ae4f9f960f60f6b0dc286cb13a9f7addc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>et a read-only view into the internal array used by Bits. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7FIELD_0E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7FIELD_0E\">\n<span id=\"_CPPv3N3old8BitArray7FIELD_0E\"></span><span id=\"_CPPv2N3old8BitArray7FIELD_0E\"></span><span id=\"old::BitArray::FIELD_0__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a30d8cc1f5bdea8ab10ee966da1941135\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_0</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">0</span></span><br/></dt><dd><p>All bits in a field set to 0. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7SetByteE6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7SetByteE6size_t7uint8_t\">\n<span id=\"_CPPv3N3old8BitArray7SetByteE6size_t7uint8_t\"></span><span id=\"_CPPv2N3old8BitArray7SetByteE6size_t7uint8_t\"></span><span id=\"old::BitArray::SetByte__s.uint8_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a33e0e7a1719199e437eeedbc7be72558\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetByte</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the byte at the specified byte index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits10CountZerosEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits10CountZerosEv\">\n<span id=\"_CPPv3NK4Bits10CountZerosEv\"></span><span id=\"_CPPv2NK4Bits10CountZerosEv\"></span><span id=\"Bits::CountZerosCCE\"></span><span class=\"target\" id=\"classBits_1a2f7ce7b5c83a86f2ca12bcc1450665ec\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountZeros</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of zeros in Bits. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector8AND_SELFERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector8AND_SELFERK9BitVector\">\n<span id=\"_CPPv3N3old9BitVector8AND_SELFERK9BitVector\"></span><span id=\"_CPPv2N3old9BitVector8AND_SELFERK9BitVector\"></span><span id=\"old::BitVector::AND_SELF__BitVectorCR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a460c6fbe6f64164a667d02c7691c99bf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AND_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean AND with this BitVector, store result here, and return this object. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector10FlipRandomER6RandomKdK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector10FlipRandomER6RandomKdK6size_t6size_t\">\n<span id=\"_CPPv3N3old9BitVector10FlipRandomER6RandomKdK6size_t6size_t\"></span><span id=\"_CPPv2N3old9BitVector10FlipRandomER6RandomKdK6size_t6size_t\"></span><span id=\"old::BitVector::FlipRandom__RandomR.doubleC.sC.s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a526829f2913c4815fd26fa36d54e5464\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FlipRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector8MAX_BITSE\" title=\"old::BitVector::MAX_BITS\"><span class=\"n\"><span class=\"pre\">MAX_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip random bits with a given probability. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6ToggleEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6ToggleEv\">\n<span id=\"_CPPv3N3old9BitVector6ToggleEv\"></span><span id=\"_CPPv2N3old9BitVector6ToggleEv\"></span><span id=\"old::BitVector::Toggle\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ad2f883347e7e234b0ab417bf3e0c3e21\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Change every bit in the sequence. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector10FindMaxOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector10FindMaxOneEv\">\n<span id=\"_CPPv3NK3old9BitVector10FindMaxOneEv\"></span><span id=\"_CPPv2NK3old9BitVector10FindMaxOneEv\"></span><span id=\"old::BitVector::FindMaxOneC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1add4d659a0bc912827f584c05df0c1aad\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindMaxOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find the most-significant set-bit. </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits10HasOverlapERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits10HasOverlapERK4Bits\">\n<span id=\"_CPPv3NK4Bits10HasOverlapERK4Bits\"></span><span id=\"_CPPv2NK4Bits10HasOverlapERK4Bits\"></span><span id=\"Bits::HasOverlap__BitsCRC\"></span><span class=\"target\" id=\"classBits_1a5b88f7326add84f6d7949ddfab3d9cba\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">HasOverlap</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if any ones are in common with another Bits. </p><p>Return true if any ones are in common with another Bits object. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4NK9BitMatrix9GetRegionE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK9BitMatrix9GetRegionE6size_t\">\n<span id=\"_CPPv3NK9BitMatrix9GetRegionE6size_t\"></span><span id=\"_CPPv2NK9BitMatrix9GetRegionE6size_t\"></span><span id=\"BitMatrix::GetRegion__sC\"></span><span class=\"target\" id=\"classBitMatrix_1a48ec399002d9a86d62b5ea7c5ea7849a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetRegion</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find all points reachable from the start position. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray11PrintBinaryERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray11PrintBinaryERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old8BitArray11PrintBinaryERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old8BitArray11PrintBinaryERNSt7ostreamE\"></span><span id=\"old::BitArray::PrintBinary__osRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af4cdfd9d74340573a43ca7d794e045c2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintBinary</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Numerical print function (from most significant bit to least) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray15ClearExcessBitsEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray15ClearExcessBitsEv\">\n<span id=\"_CPPv3N3old8BitArray15ClearExcessBitsEv\"></span><span id=\"_CPPv2N3old8BitArray15ClearExcessBitsEv\"></span><span id=\"old::BitArray::ClearExcessBits\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a51dfb85f71d2c5f925c1fb96b12f704d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearExcessBits</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayRK5FUN_T6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayRK5FUN_T6size_t6size_t\">\n<span id=\"_CPPv3I0EN3old8BitArray10ApplyRangeERK5FUN_T6size_t6size_t\"></span><span id=\"_CPPv2I0EN3old8BitArray10ApplyRangeERK5FUN_T6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a9497e8285dca94d593bc57178babf0bc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ApplyRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayRK5FUN_T6size_t6size_t\" title=\"old::BitArray::ApplyRange::FUN_T\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">fun</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits4noneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits4noneEv\">\n<span id=\"_CPPv3NK4Bits4noneEv\"></span><span id=\"_CPPv2NK4Bits4noneEv\"></span><span id=\"Bits::noneCCE\"></span><span class=\"target\" id=\"classBits_1a722e23d49f3696560e8a37f4df6d3ac9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">none</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray8NOT_SELFEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8NOT_SELFEv\">\n<span id=\"_CPPv3N3old8BitArray8NOT_SELFEv\"></span><span id=\"_CPPv2N3old8BitArray8NOT_SELFEv\"></span><span id=\"old::BitArray::NOT_SELF\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a579dd0847e0d5ce3556ea6ce475037b5\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOT_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NOT on this BitArray, store result here, and return this object. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray4NANDERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4NANDERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray4NANDERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray4NANDERK8BitArray\"></span><span id=\"old::BitArray::NAND__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afb2da7f83f5703803de03e5ebad054cf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NAND</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NAND with a second BitArray and return the result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray9FIELD_255E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9FIELD_255E\">\n<span id=\"_CPPv3N3old8BitArray9FIELD_255E\"></span><span id=\"_CPPv2N3old8BitArray9FIELD_255E\"></span><span id=\"old::BitArray::FIELD_255__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7a3ee2349c373a9bc039335f37e54944\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_255</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">255</span></span><br/></dt><dd><p>Least significant 8 bits set to 1. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector2ORERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector2ORERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVector2ORERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVector2ORERK9BitVector\"></span><span id=\"old::BitVector::OR__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a26764af1add7ada9023932cc083e46a5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bv2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean OR on this BitVector and return the result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray3setE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray3setE6size_t\">\n<span id=\"_CPPv3N3old8BitArray3setE6size_t\"></span><span id=\"_CPPv2N3old8BitArray3setE6size_t\"></span><span id=\"old::BitArray::set__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a846d31877c01405798f8fb4d3420ff76\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4I0ENK3old9BitVector13GetValueAtBitE1TK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK3old9BitVector13GetValueAtBitE1TK6size_t\">\n<span id=\"_CPPv3I0ENK3old9BitVector13GetValueAtBitEK6size_t\"></span><span id=\"_CPPv2I0ENK3old9BitVector13GetValueAtBitEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a228fbf47802abb00620444a5d1a53a95\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0ENK3old9BitVector13GetValueAtBitE1TK6size_t\" title=\"old::BitVector::GetValueAtBit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValueAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get specified type starting at a given BIT position. </p><p>Get the specified type starting from a given BIT position. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits7FieldIDEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits7FieldIDEK6size_t\">\n<span id=\"_CPPv3N4Bits7FieldIDEK6size_t\"></span><span id=\"_CPPv2N4Bits7FieldIDEK6size_t\"></span><span id=\"Bits::FieldID__sCCE\"></span><span class=\"target\" id=\"classBits_1a667a9ca6bf4e9fbabfd51f1250387cfa\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldID</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4I_6size_tENR4BitsaSER4BitsRKNSt6bitsetI8NUM_BITSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tENR4BitsaSER4BitsRKNSt6bitsetI8NUM_BITSEE\">\n<span id=\"_CPPv3I_6size_tENR4BitsaSERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"_CPPv2I_6size_tENR4BitsaSERKNSt6bitsetI8NUM_BITSEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a5c606073fb8e65dcb640b7993dce4b46\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">bitset</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tENR4BitsaSER4BitsRKNSt6bitsetI8NUM_BITSEE\" title=\"Bits::operator=::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitset</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a std::bitset. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector10FIELD_LOG2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector10FIELD_LOG2E\">\n<span id=\"_CPPv3N3old9BitVector10FIELD_LOG2E\"></span><span id=\"_CPPv2N3old9BitVector10FIELD_LOG2E\"></span><span id=\"old::BitVector::FIELD_LOG2__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a64693c5ae099e5ef824d6436e563f749\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">static_cast</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"../math/api/math.html#_CPPv44Log2d\" title=\"Log2\"><span class=\"n\"><span class=\"pre\">Log2</span></span></a><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector10FIELD_BITSE\" title=\"old::BitVector::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector10CountZerosEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector10CountZerosEv\">\n<span id=\"_CPPv3NK3old9BitVector10CountZerosEv\"></span><span id=\"_CPPv2NK3old9BitVector10CountZerosEv\"></span><span id=\"old::BitVector::CountZerosC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a6cb04e2f2d556839fe88c83082bfe982\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountZeros</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of zeros in the BitVector. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector10HasOverlapERK9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector10HasOverlapERK9BitVector\">\n<span id=\"_CPPv3NK3old9BitVector10HasOverlapERK9BitVector\"></span><span id=\"_CPPv2NK3old9BitVector10HasOverlapERK9BitVector\"></span><span id=\"old::BitVector::HasOverlap__BitVectorCRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ab507691d7111d8b3323383cf5a92bbfd\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">HasOverlap</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if any ones are in common with another BitVector. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVectorrSEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVectorrSEK6size_t\">\n<span id=\"_CPPv3N3old9BitVectorrSEK6size_t\"></span><span id=\"_CPPv2N3old9BitVectorrSEK6size_t\"></span><span id=\"old::BitVector::rshift-assign-operator__sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a9884f0562c6beabcfd07228c2b54c400\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;&gt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator for shift right\u2026 </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bEN4Bits6ImportER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bEN4Bits6ImportER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\">\n<span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1a48ff249c96f555478f8cf80abc8fd4cf\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::DATA_T\"><span class=\"n\"><span class=\"pre\">DATA_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Import</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits6ImportER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\" title=\"Bits::Import::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bEN4Bits6ImportER4BitsI6DATA_T9ZERO_LEFTERK4BitsI7DATA2_T10ZERO_LEFT2EK6size_t6size_t\" title=\"Bits::Import::ZERO_LEFT2\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">from_bits</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_start_pos</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">max_copy_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Assign from a Bits object of a different size, while keeping current size. If there are too many bits being imported, extras are cut off. If there are fewer bits, the remainder are zero\u2019d out (up to max_copy_bits) </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9PushFrontEKbK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9PushFrontEKbK6size_t\">\n<span id=\"_CPPv3N4Bits9PushFrontEKbK6size_t\"></span><span id=\"_CPPv2N4Bits9PushFrontEKbK6size_t\"></span><span id=\"Bits::PushFront__bC.sC\"></span><span class=\"target\" id=\"classBits_1a209cd9e0880caa54673484e165d06cc4\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PushFront</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Push given bit(s) onto the front of a vector. </p><p>\nPush given bit(s) onto the front of a vector. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorE6size_tR6RandomKd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorE6size_tR6RandomKd\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorE6size_tR6RandomKd\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorE6size_tR6RandomKd\"></span><span id=\"old::BitVector::BitVector__s.RandomR.doubleC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a92179378fdc00437b700a03cec1831d7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_num_bits</span></span>, <a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitVector with provided prob of 1\u2019s. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector6PopOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector6PopOneEv\">\n<span id=\"_CPPv3N3old9BitVector6PopOneEv\"></span><span id=\"_CPPv2N3old9BitVector6PopOneEv\"></span><span id=\"old::BitVector::PopOne\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a0f1a04ae1029cfdc0ebaff64ed908e2d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return the position of the first one and change it to a zero. Return -1 if no ones. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6InsertEK6size_tKbK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6InsertEK6size_tKbK6size_t\">\n<span id=\"_CPPv3N4Bits6InsertEK6size_tKbK6size_t\"></span><span id=\"_CPPv2N4Bits6InsertEK6size_tKbK6size_t\"></span><span id=\"Bits::Insert__sC.bC.sC\"></span><span class=\"target\" id=\"classBits_1a62e60f0be772c0f4939d80e49184e397\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Insert</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Insert bit(s) into any index of vector using bit magic. Blog post on implementation reasoning: <a class=\"reference external\" href=\"https://devolab.org/?p=2249\">https://devolab.org/?p=2249</a>. </p><p>\nInsert bit(s) into any index of vector using bit magic. Blog post on implementation reasoning: <a class=\"reference external\" href=\"https://devolab.org/?p=2249\">https://devolab.org/?p=2249</a> </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7BytePosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7BytePosEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray7BytePosEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray7BytePosEK6size_t\"></span><span id=\"old::BitArray::BytePos__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad3f2681ca78b211f3083e86ebc8c481d\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4NK4BitscoEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4BitscoEv\">\n<span id=\"_CPPv3NK4BitscoEv\"></span><span id=\"_CPPv2NK4BitscoEv\"></span><span id=\"Bits::inv-operatorC\"></span><span class=\"target\" id=\"classBits_1a0291baec4afd045f9bba35181a111414\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">~</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise NOT\u2026 </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArrayeOERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayeOERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArrayeOERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArrayeOERK8BitArray\"></span><span id=\"old::BitArray::xor-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a0ad8e4215340b093ecad711ad5313ebb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise XOR\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector6ExportE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector6ExportE6size_t6size_t\">\n<span id=\"_CPPv3NK3old9BitVector6ExportE6size_t6size_t\"></span><span id=\"_CPPv2NK3old9BitVector6ExportE6size_t6size_t\"></span><span id=\"old::BitVector::Export__s.sC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1ae4f49ed2d6bbdf7053702c0b6788faa6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVectorE\" title=\"old::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Export</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">out_size</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert to a BitVector of a different size. </p><p>Convert to a Bitset of a different size. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits8PushBackEKbK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits8PushBackEKbK6size_t\">\n<span id=\"_CPPv3N4Bits8PushBackEKbK6size_t\"></span><span id=\"_CPPv2N4Bits8PushBackEKbK6size_t\"></span><span id=\"Bits::PushBack__bC.sC\"></span><span class=\"target\" id=\"classBits_1a949683d6f884ff94948cadea0bc3dcd8\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PushBack</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Push given bit(s) onto the back of a vector. </p><p>\nPush given bit(s) onto the back of a vector. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4I_6size_tEN9BitMatrix7MaskColERK6BitSetIXml4COLS4ROWSEEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN9BitMatrix7MaskColERK6BitSetIXml4COLS4ROWSEEv\">\n<span id=\"_CPPv3I_6size_tEN9BitMatrix7MaskColEv\"></span><span id=\"_CPPv2I_6size_tEN9BitMatrix7MaskColEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">COL_ID</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBitMatrix_1acf894d4195917b149630b3c7e6473da6\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4I_6size_tE6BitSet\" title=\"BitSet\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::COLS\"><span class=\"n\"><span class=\"pre\">COLS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::ROWS\"><span class=\"n\"><span class=\"pre\">ROWS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaskCol</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Keep only a single column of values, reducing all others to zeros. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray3NOTEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3NOTEv\">\n<span id=\"_CPPv3NK3old8BitArray3NOTEv\"></span><span id=\"_CPPv2NK3old8BitArray3NOTEv\"></span><span id=\"old::BitArray::NOTC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af49db6cb1c3cef9fc4216c15a26a3c39\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOT</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NOT on this BitArray and return the result. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray6PopOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6PopOneEv\">\n<span id=\"_CPPv3N3old8BitArray6PopOneEv\"></span><span id=\"_CPPv2N3old8BitArray6PopOneEv\"></span><span id=\"old::BitArray::PopOne\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa368936895d17428f1d7968c84fe8512\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return the position of the first one and change it to a zero. Return -1 if no ones. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray15FIELD_LOG2_MASKE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray15FIELD_LOG2_MASKE\">\n<span id=\"_CPPv3N3old8BitArray15FIELD_LOG2_MASKE\"></span><span id=\"_CPPv2N3old8BitArray15FIELD_LOG2_MASKE\"></span><span id=\"old::BitArray::FIELD_LOG2_MASK__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7910ce174e76ed3ac901781df6537450\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2_MASK</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/bitset_utils.html#_CPPv4I0E7MaskLow4TYPENSt6size_tE\" title=\"MaskLow\"><span class=\"n\"><span class=\"pre\">MaskLow</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_LOG2E\" title=\"old::BitArray::FIELD_LOG2\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits10SHIFT_SELFEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits10SHIFT_SELFEKi\">\n<span id=\"_CPPv3N4Bits10SHIFT_SELFEKi\"></span><span id=\"_CPPv2N4Bits10SHIFT_SELFEKi\"></span><span id=\"Bits::SHIFT_SELF__iC\"></span><span class=\"target\" id=\"classBits_1aa4bed25ed4c572eaea033ab577c8b20d\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SHIFT_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Positive shifts left and negative right; store result here, and return *this. </p><p>Positive shifts go left and negative go right; store result here, and return this object. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits13Byte2FieldPosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits13Byte2FieldPosEK6size_t\">\n<span id=\"_CPPv3N4Bits13Byte2FieldPosEK6size_t\"></span><span id=\"_CPPv2N4Bits13Byte2FieldPosEK6size_t\"></span><span id=\"Bits::Byte2FieldPos__sCCE\"></span><span class=\"target\" id=\"classBits_1a058f3bfad257afdde085115c295c3fc5\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Byte2FieldPos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector5resetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector5resetE6size_t\">\n<span id=\"_CPPv3N3old9BitVector5resetE6size_t\"></span><span id=\"_CPPv2N3old9BitVector5resetE6size_t\"></span><span id=\"old::BitVector::reset__s\"></span><span class=\"target\" id=\"classold_1_1BitVector_1abb83ae41019f6417564fa2ee46604bfa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4I_6size_tEN3old9BitVector9BitVectorERKNSt6bitsetI8NUM_BITSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN3old9BitVector9BitVectorERKNSt6bitsetI8NUM_BITSEE\">\n<span id=\"_CPPv3I_6size_tEN3old9BitVector9BitVectorERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"_CPPv2I_6size_tEN3old9BitVector9BitVectorERKNSt6bitsetI8NUM_BITSEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitVector_1a8c747a2cfb7d92ee91d324df47119847\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">bitset</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_tEN3old9BitVector9BitVectorERKNSt6bitsetI8NUM_BITSEE\" title=\"old::BitVector::BitVector::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitset</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a BitVector from a std::bitset. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits9ROTL_SELFEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits9ROTL_SELFEK6size_t\">\n<span id=\"_CPPv3N4Bits9ROTL_SELFEK6size_t\"></span><span id=\"_CPPv2N4Bits9ROTL_SELFEK6size_t\"></span><span id=\"Bits::ROTL_SELF__sCCE\"></span><span class=\"target\" id=\"classBits_1a7d639c381bb0023aeb0bdd804706563f\"></span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTL_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size_raw</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper: call ROTATE with negative number instead. </p><p>Helper: call ROTATE with negative number. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector9BitVectorERR9BitVector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector9BitVectorERR9BitVector\">\n<span id=\"_CPPv3N3old9BitVector9BitVectorERR9BitVector\"></span><span id=\"_CPPv2N3old9BitVector9BitVectorERR9BitVector\"></span><span id=\"old::BitVector::BitVector__BitVectorRR\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a3049bc97e09134ba7a5dfd2b1fafd9d0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4N3old9BitVector9BitVectorERR9BitVector\" title=\"old::BitVector::BitVector\"><span class=\"n\"><span class=\"pre\">BitVector</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Move constructor of existing bit field. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I0_bENK4BitseqEbRK4BitsI7DATA2_T3ZL2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0_bENK4BitseqEbRK4BitsI7DATA2_T3ZL2E\">\n<span id=\"_CPPv3I0_bENK4BitseqERK4BitsI7DATA2_T3ZL2E\"></span><span id=\"_CPPv2I0_bENK4BitseqERK4BitsI7DATA2_T3ZL2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1ac6f79fc8722a3a29f35b83e5914c10ff\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">==</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitseqEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator==::DATA2_T\"><span class=\"n\"><span class=\"pre\">DATA2_T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bENK4BitseqEbRK4BitsI7DATA2_T3ZL2E\" title=\"Bits::operator==::ZL2\"><span class=\"n\"><span class=\"pre\">ZL2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Compare two bits objects, even with different template arguments. </p><p>Test if two bit vectors are identical. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArrayanERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayanERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArrayanERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArrayanERK8BitArray\"></span><span id=\"old::BitArray::and-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad387266e9909624c0c614ca569fbfdaf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise AND\u2026 </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits7GetUIntE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits7GetUIntE6size_t\">\n<span id=\"_CPPv3NK4Bits7GetUIntE6size_t\"></span><span id=\"_CPPv2NK4Bits7GetUIntE6size_t\"></span><span id=\"Bits::GetUInt__sC\"></span><span class=\"target\" id=\"classBits_1a73a23c17b1c0abd33a5d546463ea17e7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>By default, retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits16ClearRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits16ClearRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N4Bits16ClearRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N4Bits16ClearRandomCountER6RandomK6size_t\"></span><span id=\"Bits::ClearRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classBits_1a3df8e76d37300777ca9a048484923425\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Unset a specified number of random bits (does not check if already zero.) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NR3old8BitArrayaSERKNSt6bitsetI8NUM_BITSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old8BitArrayaSERKNSt6bitsetI8NUM_BITSEE\">\n<span id=\"_CPPv3NR3old8BitArrayaSERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"_CPPv2NR3old8BitArrayaSERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"old::BitArray::assign-operator__std::bitset:NUM_BITS:CRR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aaf8444c088f22f941edb794785064ce8\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">bitset</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitset</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a std::bitset. </p></dd>", "a[href=\"api/Bits.html#_CPPv4I_N6Random4ProbEEN4Bits10RandomizePER4BitsR6RandomK6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_N6Random4ProbEEN4Bits10RandomizePER4BitsR6RandomK6size_t6size_t\">\n<span id=\"_CPPv3I_N6Random4ProbEEN4Bits10RandomizePER6RandomK6size_t6size_t\"></span><span id=\"_CPPv2I_N6Random4ProbEEN4Bits10RandomizePER6RandomK6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv4N6Random4ProbE\" title=\"Random::Prob\"><span class=\"n\"><span class=\"pre\">Prob</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">P</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classBits_1aebe2320ba02cc0f9689f05c99b3de1dd\"></span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RandomizeP</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../math/api/constants.html#_CPPv410MAX_SIZE_T\" title=\"MAX_SIZE_T\"><span class=\"n\"><span class=\"pre\">MAX_SIZE_T</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with probability specified at compile time. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitspLERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitspLERK4Bits\">\n<span id=\"_CPPv3N4BitspLERK4Bits\"></span><span id=\"_CPPv2N4BitspLERK4Bits\"></span><span id=\"Bits::add-assign-operator__BitsCR\"></span><span class=\"target\" id=\"classBits_1a33d74fe405b0ba2025afb814ec5bb2ea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">+=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator plus\u2026 </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector14ToBinaryStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector14ToBinaryStringEv\">\n<span id=\"_CPPv3NK3old9BitVector14ToBinaryStringEv\"></span><span id=\"_CPPv2NK3old9BitVector14ToBinaryStringEv\"></span><span id=\"old::BitVector::ToBinaryStringC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a269c3b9f6f110ed447a06f280d0c845f\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToBinaryString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitVector to a numerical string [index 0 on right]. </p><p>Convert this BitVector to a numerical string [0 index on right]. </p></dd>", "a[href=\"api/BitMatrix.html#_CPPv4N9BitMatrix9BitMatrixERK6BitSetIXml4COLS4ROWSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9BitMatrix9BitMatrixERK6BitSetIXml4COLS4ROWSEE\">\n<span id=\"_CPPv3N9BitMatrix9BitMatrixERK6BitSetIXml4COLS4ROWSEE\"></span><span id=\"_CPPv2N9BitMatrix9BitMatrixERK6BitSetIXCOLS * ROWSEE\"></span><span id=\"BitMatrix::BitMatrix__BitSet:COLS-*-ROWS:CR\"></span><span class=\"target\" id=\"classBitMatrix_1a5d5d14cf3ecfe042a2604cefdab1447e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitMatrix</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4I_6size_tE6BitSet\" title=\"BitSet\"><span class=\"n\"><span class=\"pre\">BitSet</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::COLS\"><span class=\"n\"><span class=\"pre\">COLS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tE9BitMatrix\" title=\"BitMatrix::ROWS\"><span class=\"n\"><span class=\"pre\">ROWS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4BitsD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4BitsD0Ev\">\n<span id=\"_CPPv3N4BitsD0Ev\"></span><span id=\"_CPPv2N4BitsD0Ev\"></span><span id=\"Bits::~Bits\"></span><span class=\"target\" id=\"classBits_1a37802273e6e6bf02a3713beaa8a52b4b\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~Bits</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd><p>Destructor. </p></dd>", "a[href=\"api/BitVector.html#_CPPv4NK3old9BitVector5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old9BitVector5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old9BitVector5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old9BitVector5PrintERNSt7ostreamE\"></span><span id=\"old::BitVector::Print__osRC\"></span><span class=\"target\" id=\"classold_1_1BitVector_1abad15676455fa08d051954811d639df7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Regular print function (from least significant bit to most) </p></dd>", "a[href=\"api/BitArray.html#_CPPv4NK3old8BitArray7FindBitEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7FindBitEK6size_t\">\n<span id=\"_CPPv3NK3old8BitArray7FindBitEK6size_t\"></span><span id=\"_CPPv2NK3old8BitArray7FindBitEK6size_t\"></span><span id=\"old::BitArray::FindBit__sCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae6bb7dab97dba877c4d2f82b6a222e2e\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Deprecated version of FindOne(). </p></dd>", "a[href=\"api/Bits.html#_CPPv4NK4Bits4NANDERK4Bits\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK4Bits4NANDERK4Bits\">\n<span id=\"_CPPv3NK4Bits4NANDERK4Bits\"></span><span id=\"_CPPv2NK4Bits4NANDERK4Bits\"></span><span id=\"Bits::NAND__BitsCRC\"></span><span class=\"target\" id=\"classBits_1a9687287fe6b7cdd396d269a092b4fcde\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NAND</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bits2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NAND on this Bits and return the result. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits5ClearE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits5ClearE6size_t\">\n<span id=\"_CPPv3N4Bits5ClearE6size_t\"></span><span id=\"_CPPv2N4Bits5ClearE6size_t\"></span><span id=\"Bits::Clear__s\"></span><span class=\"target\" id=\"classBits_1a6398d2f5ae74ccfdf8869b1bb4188bb5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set specific bit to 0. </p></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits4dataEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits4dataEv\">\n<span id=\"_CPPv3N4Bits4dataEv\"></span><span id=\"_CPPv2N4Bits4dataEv\"></span><span id=\"Bits::data\"></span><span class=\"target\" id=\"classBits_1adaecc1e6a2b7d5ad289aabccd7da1089\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">data</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/BitVector.html#_CPPv4N3old9BitVector3setEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old9BitVector3setEv\">\n<span id=\"_CPPv3N3old9BitVector3setEv\"></span><span id=\"_CPPv2N3old9BitVector3setEv\"></span><span id=\"old::BitVector::set\"></span><span class=\"target\" id=\"classold_1_1BitVector_1a1beef1639863a2ca60a245589f7297b4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">set</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"api/Bits.html#_CPPv4N4Bits6ToggleEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N4Bits6ToggleEv\">\n<span id=\"_CPPv3N4Bits6ToggleEv\"></span><span id=\"_CPPv2N4Bits6ToggleEv\"></span><span id=\"Bits::Toggle\"></span><span class=\"target\" id=\"classBits_1a051e20ce705bc60a78c59e21f8832e21\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0_bE4Bits\" title=\"Bits\"><span class=\"n\"><span class=\"pre\">Bits</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Change every bit in the sequence. </p></dd>", "a[href=\"api/BitArray.html#_CPPv4N3old8BitArray7SetUIntEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7SetUIntEK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old8BitArray7SetUIntEK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old8BitArray7SetUIntEK6size_t8uint32_t\"></span><span id=\"old::BitArray::SetUInt__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a4d04e60a118622d711a911d6322d52b0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>By default, update the 32-bit uint at the specified uint index. </p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
