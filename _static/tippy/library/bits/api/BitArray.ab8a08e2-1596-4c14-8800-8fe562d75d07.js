selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/Simple_matching_coefficient\"]": "<p>The <b>simple matching coefficient (SMC)</b> or <b>Rand similarity coefficient</b> is a statistic used for comparing the similarity and diversity of sample sets.</p>", "a[href^=\"https://en.wikipedia.org/wiki/Simple_matching_coefficient#\"]": "<p>The <b>simple matching coefficient (SMC)</b> or <b>Rand similarity coefficient</b> is a statistic used for comparing the similarity and diversity of sample sets.</p>", "a[href=\"#_CPPv4NR3old8BitArrayaSERKNSt6bitsetI8NUM_BITSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old8BitArrayaSERKNSt6bitsetI8NUM_BITSEE\">\n<span id=\"_CPPv3NR3old8BitArrayaSERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"_CPPv2NR3old8BitArrayaSERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"old::BitArray::assign-operator__std::bitset:NUM_BITS:CRR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aaf8444c088f22f941edb794785064ce8\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">bitset</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitset</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a std::bitset. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7FIELD_0E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7FIELD_0E\">\n<span id=\"_CPPv3N3old8BitArray7FIELD_0E\"></span><span id=\"_CPPv2N3old8BitArray7FIELD_0E\"></span><span id=\"old::BitArray::FIELD_0__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a30d8cc1f5bdea8ab10ee966da1941135\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_0</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">0</span></span><br/></dt><dd><p>All bits in a field set to 0. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray5resetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5resetE6size_t\">\n<span id=\"_CPPv3N3old8BitArray5resetE6size_t\"></span><span id=\"_CPPv2N3old8BitArray5resetE6size_t\"></span><span id=\"old::BitArray::reset__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a81b95d806e83288c23198dfea236609b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray9RandomizeER6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9RandomizeER6Random\">\n<span id=\"_CPPv3N3old8BitArray9RandomizeER6Random\"></span><span id=\"_CPPv2N3old8BitArray9RandomizeER6Random\"></span><span id=\"old::BitArray::Randomize__RandomR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af008df7bfd9ccccc9b742a0b6fe4ae51\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Randomize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a 50% probability of being a 0 or 1. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3anyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3anyEv\">\n<span id=\"_CPPv3NK3old8BitArray3anyEv\"></span><span id=\"_CPPv2NK3old8BitArray3anyEv\"></span><span id=\"old::BitArray::anyC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a230eea8ffa85170455efb757b46cc071\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">any</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray11GetNumBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11GetNumBytesEv\">\n<span id=\"_CPPv3N3old8BitArray11GetNumBytesEv\"></span><span id=\"_CPPv2N3old8BitArray11GetNumBytesEv\"></span><span id=\"old::BitArray::GetNumBytesCE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a4084acca2eecde2ba624ca196eff3a47\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNumBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>How many bytes are in this BitArray? </p></dd>", "a[href=\"#_CPPv4NK3old8BitArraycoEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArraycoEv\">\n<span id=\"_CPPv3NK3old8BitArraycoEv\"></span><span id=\"_CPPv2NK3old8BitArraycoEv\"></span><span id=\"old::BitArray::inv-operatorC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac8d9bcd3116864905729352ae0936558\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">~</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise NOT\u2026 </p></dd>", "a[href=\"#_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayI8NUM_BITS9ZERO_LEFTERK5FUN_T6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayI8NUM_BITS9ZERO_LEFTERK5FUN_T6size_t6size_t\">\n<span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a024587fcf500fc2fbe07136bfd5b16e9\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ApplyRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayI8NUM_BITS9ZERO_LEFTERK5FUN_T6size_t6size_t\" title=\"old::BitArray::ApplyRange::FUN_T\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">fun</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray11ClearRandomER6RandomKdK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11ClearRandomER6RandomKdK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray11ClearRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray11ClearRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"old::BitArray::ClearRandom__RandomR.doubleC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8005745b43ea0d68123f9155b38c2403\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Unset random bits with a given probability (does not check if already zero.) </p></dd>", "a[href=\"#_CPPv4NK3old8BitArraycvbEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArraycvbEv\">\n<span id=\"_CPPv3NK3old8BitArraycvbEv\"></span><span id=\"_CPPv2NK3old8BitArraycvbEv\"></span><span id=\"old::BitArray::castto-b-operatorC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8a511e2bae948793650b6c7d554cf89d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Casting a BitArray to bool identifies if ANY bits are set to 1. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray11PrintBinaryERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray11PrintBinaryERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old8BitArray11PrintBinaryERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old8BitArray11PrintBinaryERNSt7ostreamE\"></span><span id=\"old::BitArray::PrintBinary__osRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af4cdfd9d74340573a43ca7d794e045c2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintBinary</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Numerical print function (from most significant bit to least) </p></dd>", "a[href=\"#_CPPv4N3old8BitArray15ClearExcessBitsEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray15ClearExcessBitsEv\">\n<span id=\"_CPPv3N3old8BitArray15ClearExcessBitsEv\"></span><span id=\"_CPPv2N3old8BitArray15ClearExcessBitsEv\"></span><span id=\"old::BitArray::ClearExcessBits\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a51dfb85f71d2c5f925c1fb96b12f704d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearExcessBits</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayRK5FUN_T6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayRK5FUN_T6size_t6size_t\">\n<span id=\"_CPPv3I0EN3old8BitArray10ApplyRangeERK5FUN_T6size_t6size_t\"></span><span id=\"_CPPv2I0EN3old8BitArray10ApplyRangeERK5FUN_T6size_t6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a9497e8285dca94d593bc57178babf0bc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ApplyRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray10ApplyRangeER8BitArrayRK5FUN_T6size_t6size_t\" title=\"old::BitArray::ApplyRange::FUN_T\"><span class=\"n\"><span class=\"pre\">FUN_T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">fun</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#bitarray-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">BitArray.hpp<a class=\"headerlink\" href=\"#bitarray-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>An Array of a fixed number of bits; similar to std::bitset, but with extra bit magic. Status: RELEASE. </p><p><dl>\n<dt class=\"sig sig-object cpp\">\n<em><span class=\"pre\">Todo:</span></em></dt>\n<dd><p>Some of the functions allow a start bit and end bit; each of these should be checked to make sure that they will work if the start and end are part of the same byte. One option is to do this well ONCE with a macro that properly fills in the details. </p>\n</dd></dl>\n</p>", "a[href=\"#_CPPv4N3old8BitArray6ToggleE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6ToggleE6size_t\">\n<span id=\"_CPPv3N3old8BitArray6ToggleE6size_t\"></span><span id=\"_CPPv2N3old8BitArray6ToggleE6size_t\"></span><span id=\"old::BitArray::Toggle__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac9358d53fe65b2fbcc3ba052171ad0bf\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip a single bit. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray6this_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6this_tE\">\n<span id=\"_CPPv3N3old8BitArray6this_tE\"></span><span id=\"_CPPv2N3old8BitArray6this_tE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1abadbce4c85e36dff54b65583fdd7d22d\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">this_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray3SetE6size_tb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray3SetE6size_tb\">\n<span id=\"_CPPv3N3old8BitArray3SetE6size_tb\"></span><span id=\"_CPPv2N3old8BitArray3SetE6size_tb\"></span><span id=\"old::BitArray::Set__s.b\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a5dd87fb46f968c5bb5dc85299e94306b\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set the bit at a specified index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3AllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3AllEv\">\n<span id=\"_CPPv3NK3old8BitArray3AllEv\"></span><span id=\"_CPPv2NK3old8BitArray3AllEv\"></span><span id=\"old::BitArray::AllC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a87e37b67c683c87276fb7d4f5dc8e761\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">All</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if ALL bits in the BitArray are one, else return false. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray6PopBitEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6PopBitEv\">\n<span id=\"_CPPv3N3old8BitArray6PopBitEv\"></span><span id=\"_CPPv2N3old8BitArray6PopBitEv\"></span><span id=\"old::BitArray::PopBit\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a539a291699a124a2c589782b98f6f7cb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Deprecated version of PopOne(). </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8NOT_SELFEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8NOT_SELFEv\">\n<span id=\"_CPPv3N3old8BitArray8NOT_SELFEv\"></span><span id=\"_CPPv2N3old8BitArray8NOT_SELFEv\"></span><span id=\"old::BitArray::NOT_SELF\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a579dd0847e0d5ce3556ea6ce475037b5\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOT_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NOT on this BitArray, store result here, and return this object. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray14SetUInt16AtBitEK6size_t8uint16_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray14SetUInt16AtBitEK6size_t8uint16_t\">\n<span id=\"_CPPv3N3old8BitArray14SetUInt16AtBitEK6size_t8uint16_t\"></span><span id=\"_CPPv2N3old8BitArray14SetUInt16AtBitEK6size_t8uint16_t\"></span><span id=\"old::BitArray::SetUInt16AtBit__sC.uint16_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa545ee5099b799501cba1d22faf5166a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt16AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 16-bit uint at the specified uint index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArrayeoERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayeoERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArrayeoERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArrayeoERK8BitArray\"></span><span id=\"old::BitArray::xor-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a0180b751be8470fb4d2ed4b95631c5ce\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise XOR\u2026 </p></dd>", "a[href=\"#_CPPv4N3old8BitArray12NUM_END_BITSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12NUM_END_BITSE\">\n<span id=\"_CPPv3N3old8BitArray12NUM_END_BITSE\"></span><span id=\"_CPPv2N3old8BitArray12NUM_END_BITSE\"></span><span id=\"old::BitArray::NUM_END_BITS__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6f09a1631f22a9b0246e913c128943f8\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_END_BITS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">&amp;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_BITSE\" title=\"old::BitArray::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray9SetUInt16EK6size_t8uint16_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9SetUInt16EK6size_t8uint16_t\">\n<span id=\"_CPPv3N3old8BitArray9SetUInt16EK6size_t8uint16_t\"></span><span id=\"_CPPv2N3old8BitArray9SetUInt16EK6size_t8uint16_t\"></span><span id=\"old::BitArray::SetUInt16__sC.uint16_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab2ae739ff1c231971e2d322a485ac6d7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt16</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 16-bit uint at the specified uint index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3XORERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3XORERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3XORERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3XORERK8BitArray\"></span><span id=\"old::BitArray::XOR__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8f6fd71dfa33f16b0823ef244dcd0334\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">XOR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean XOR with a second BitArray and return the result. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray5ClearEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5ClearEv\">\n<span id=\"_CPPv3N3old8BitArray5ClearEv\"></span><span id=\"_CPPv2N3old8BitArray5ClearEv\"></span><span id=\"old::BitArray::Clear\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8873cb619abe3bafd046d83f9c68df01\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Set all bits to zero. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray16CountOnes_SparseEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray16CountOnes_SparseEv\">\n<span id=\"_CPPv3NK3old8BitArray16CountOnes_SparseEv\"></span><span id=\"_CPPv2NK3old8BitArray16CountOnes_SparseEv\"></span><span id=\"old::BitArray::CountOnes_SparseC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa6b395a359ba4e3ce9352e4c07c7a369\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes_Sparse</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Faster counting of ones for very sparse bit vectors. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray9FIELD_255E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9FIELD_255E\">\n<span id=\"_CPPv3N3old8BitArray9FIELD_255E\"></span><span id=\"_CPPv2N3old8BitArray9FIELD_255E\"></span><span id=\"old::BitArray::FIELD_255__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7a3ee2349c373a9bc039335f37e54944\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_255</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">255</span></span><br/></dt><dd><p>Least significant 8 bits set to 1. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7BytePtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7BytePtrEv\">\n<span id=\"_CPPv3N3old8BitArray7BytePtrEv\"></span><span id=\"_CPPv2N3old8BitArray7BytePtrEv\"></span><span id=\"old::BitArray::BytePtr\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad402eb4aafcc50a061902a8b48ac2461\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray6ToggleE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6ToggleE6size_t6size_t\">\n<span id=\"_CPPv3N3old8BitArray6ToggleE6size_t6size_t\"></span><span id=\"_CPPv2N3old8BitArray6ToggleE6size_t6size_t\"></span><span id=\"old::BitArray::Toggle__s.s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a2b0abcaefe9df0eb45f751586e9531a0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flips all the bits in a range [start, stop) </p></dd>", "a[href=\"#_CPPv4I0EN3old8BitArray13SetValueAtBitEvK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray13SetValueAtBitEvK6size_t1T\">\n<span id=\"_CPPv3I0EN3old8BitArray13SetValueAtBitEK6size_t1T\"></span><span id=\"_CPPv2I0EN3old8BitArray13SetValueAtBitEK6size_t1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a030959f6c4224f46b61acae4a37de41c\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray13SetValueAtBitEvK6size_t1T\" title=\"old::BitArray::SetValueAtBit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray4testE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4testE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray4testE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray4testE6size_t\"></span><span id=\"old::BitArray::test__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac0afad9d99cc50c47c08d4afdca222eb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">test</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray3setE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray3setE6size_t\">\n<span id=\"_CPPv3N3old8BitArray3setE6size_t\"></span><span id=\"_CPPv2N3old8BitArray3setE6size_t\"></span><span id=\"old::BitArray::set__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a846d31877c01405798f8fb4d3420ff76\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">set</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray9FIELD_ALLE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9FIELD_ALLE\">\n<span id=\"_CPPv3N3old8BitArray9FIELD_ALLE\"></span><span id=\"_CPPv2N3old8BitArray9FIELD_ALLE\"></span><span id=\"old::BitArray::FIELD_ALL__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1add437d171673fa499738118d41987b95\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_ALL</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">~</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7FIELD_0E\" title=\"old::BitArray::FIELD_0\"><span class=\"n\"><span class=\"pre\">FIELD_0</span></span></a><br/></dt><dd><p>All bits in a field set to 1. </p></dd>", "a[href=\"#_CPPv4NR3old8BitArrayaSERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old8BitArrayaSERKNSt6stringE\">\n<span id=\"_CPPv3NR3old8BitArrayaSERKNSt6stringE\"></span><span id=\"_CPPv2NR3old8BitArrayaSERKNSt6stringE\"></span><span id=\"old::BitArray::assign-operator__ssCRR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aca8dca7139a43ef345cefe749e581611\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray10FIELD_LOG2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10FIELD_LOG2E\">\n<span id=\"_CPPv3N3old8BitArray10FIELD_LOG2E\"></span><span id=\"_CPPv2N3old8BitArray10FIELD_LOG2E\"></span><span id=\"old::BitArray::FIELD_LOG2__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae0c7976aba0c74de451ff531b4d8f9f7\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../math/api/math.html#_CPPv44Log2d\" title=\"Log2\"><span class=\"n\"><span class=\"pre\">Log2</span></span></a><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_BITSE\" title=\"old::BitArray::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray7FindOneEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7FindOneEK6size_t\">\n<span id=\"_CPPv3NK3old8BitArray7FindOneEK6size_t\"></span><span id=\"_CPPv2NK3old8BitArray7FindOneEK6size_t\"></span><span id=\"old::BitArray::FindOne__sCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8fd90698dfa8f740bfc814f85995231e\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first one after start_pos; return -1 if no ones in vector. You can loop through all 1-bit positions of a BitArray \u201cbits\u201d with:</p><p>for (int pos = bits.FindOne(); pos &gt;= 0; pos = bits.FindOne(pos+1)) { \u2026 } </p></dd>", "a[href=\"#_CPPv4N3old8BitArray3setEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray3setEv\">\n<span id=\"_CPPv3N3old8BitArray3setEv\"></span><span id=\"_CPPv2N3old8BitArray3setEv\"></span><span id=\"old::BitArray::set\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1fe28092dec036a5726e73bd6d028009\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">set</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray7BytePtrEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7BytePtrEv\">\n<span id=\"_CPPv3NK3old8BitArray7BytePtrEv\"></span><span id=\"_CPPv2NK3old8BitArray7BytePtrEv\"></span><span id=\"old::BitArray::BytePtrC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1abbf457be0f78029b17e6d3ad39f1fae9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePtr</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray4flipE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4flipE6size_t\">\n<span id=\"_CPPv3N3old8BitArray4flipE6size_t\"></span><span id=\"_CPPv2N3old8BitArray4flipE6size_t\"></span><span id=\"old::BitArray::flip__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a0ea1849817554d4439d039cbd32632f2\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">pos</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray7FIELD_1E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7FIELD_1E\">\n<span id=\"_CPPv3N3old8BitArray7FIELD_1E\"></span><span id=\"_CPPv2N3old8BitArray7FIELD_1E\"></span><span id=\"old::BitArray::FIELD_1__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aff67491a74cd6c240721707735d5219c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_1</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"m\"><span class=\"pre\">1</span></span><br/></dt><dd><p>Least significant bit set to 1. </p></dd>", "a[href=\"bitset_utils.html#_CPPv4I0E7MaskLow4TYPENSt6size_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E7MaskLow4TYPENSt6size_tE\">\n<span id=\"_CPPv3I0E7MaskLowNSt6size_tE\"></span><span id=\"_CPPv2I0E7MaskLowNSt6size_tE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"bitset__utils_8hpp_1adaa8ec664d009695eb54d151046921c6\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0E7MaskLow4TYPENSt6size_tE\" title=\"MaskLow::TYPE\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MaskLow</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Quick bit-mask generator for low bits. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray14GetUInt32AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray14GetUInt32AtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray14GetUInt32AtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray14GetUInt32AtBitE6size_t\"></span><span id=\"old::BitArray::GetUInt32AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a3c6b529df9a043eb8ada5f29eaf42bd6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt32AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray14GetUInt64AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray14GetUInt64AtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray14GetUInt64AtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray14GetUInt64AtBitE6size_t\"></span><span id=\"old::BitArray::GetUInt64AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a291ab20662b0941f56e54e2019afeff6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt64AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 64-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray10LAST_FIELDE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10LAST_FIELDE\">\n<span id=\"_CPPv3N3old8BitArray10LAST_FIELDE\"></span><span id=\"_CPPv2N3old8BitArray10LAST_FIELDE\"></span><span id=\"old::BitArray::LAST_FIELD__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad35795ad059fa3d87f059b5aefd3c861\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">LAST_FIELD</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10NUM_FIELDSE\" title=\"old::BitArray::NUM_FIELDS\"><span class=\"n\"><span class=\"pre\">NUM_FIELDS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray6PopOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6PopOneEv\">\n<span id=\"_CPPv3N3old8BitArray6PopOneEv\"></span><span id=\"_CPPv2N3old8BitArray6PopOneEv\"></span><span id=\"old::BitArray::PopOne\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa368936895d17428f1d7968c84fe8512\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PopOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Return the position of the first one and change it to a zero. Return -1 if no ones. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray15FIELD_LOG2_MASKE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray15FIELD_LOG2_MASKE\">\n<span id=\"_CPPv3N3old8BitArray15FIELD_LOG2_MASKE\"></span><span id=\"_CPPv2N3old8BitArray15FIELD_LOG2_MASKE\"></span><span id=\"old::BitArray::FIELD_LOG2_MASK__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7910ce174e76ed3ac901781df6537450\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2_MASK</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"bitset_utils.html#_CPPv4I0E7MaskLow4TYPENSt6size_tE\" title=\"MaskLow\"><span class=\"n\"><span class=\"pre\">MaskLow</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_LOG2E\" title=\"old::BitArray::FIELD_LOG2\"><span class=\"n\"><span class=\"pre\">FIELD_LOG2</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray9GetUInt64E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9GetUInt64E6size_t\">\n<span id=\"_CPPv3NK3old8BitArray9GetUInt64E6size_t\"></span><span id=\"_CPPv2NK3old8BitArray9GetUInt64E6size_t\"></span><span id=\"old::BitArray::GetUInt64__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa8f1ade7a0064fe0b3cb447865c9c4d1\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt64</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 64-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray9SetUInt32EK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9SetUInt32EK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old8BitArray9SetUInt32EK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old8BitArray9SetUInt32EK6size_t8uint32_t\"></span><span id=\"old::BitArray::SetUInt32__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a30f3ac110aff432168a02d036f3a1de6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt32</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0E3Ptr\">\n<span id=\"_CPPv3I0E3Ptr\"></span><span id=\"_CPPv2I0E3Ptr\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TYPE</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classPtr\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray8BitArrayERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayERKNSt6stringE\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayERKNSt6stringE\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayERKNSt6stringE\"></span><span id=\"old::BitArray::BitArray__ssCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab9e372f2900efab2394e15d502f76730\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a BitArray from a string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"#_CPPv4I_6size_t_6size_tEN3old8BitArray4CopyER8BitArrayA9IN_FIELDS_K7field_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_6size_tEN3old8BitArray4CopyER8BitArrayA9IN_FIELDS_K7field_t\">\n<span id=\"_CPPv3I_6size_t_6size_tEN3old8BitArray4CopyEA9IN_FIELDS_K7field_t\"></span><span id=\"_CPPv2I_6size_t_6size_tEN3old8BitArray4CopyEAIN_FIELDS_K7field_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">IN_FIELDS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">COPY_FIELDS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10NUM_FIELDSE\" title=\"old::BitArray::NUM_FIELDS\"><span class=\"n\"><span class=\"pre\">NUM_FIELDS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1acc61e9aab9e8abf7e5c3bc8e13c4888a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Copy</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">in_bits</span></span><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old8BitArray4CopyER8BitArrayA9IN_FIELDS_K7field_t\" title=\"old::BitArray::Copy::IN_FIELDS\"><span class=\"n\"><span class=\"pre\">IN_FIELDS</span></span></a><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArrayanERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayanERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArrayanERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArrayanERK8BitArray\"></span><span id=\"old::BitArray::and-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad387266e9909624c0c614ca569fbfdaf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise AND\u2026 </p></dd>", "a[href=\"#_CPPv4I0ENK3old8BitArray13GetValueAtBitE1TK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK3old8BitArray13GetValueAtBitE1TK6size_t\">\n<span id=\"_CPPv3I0ENK3old8BitArray13GetValueAtBitEK6size_t\"></span><span id=\"_CPPv2I0ENK3old8BitArray13GetValueAtBitEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a57c9a30e0e2623573574adc6c6a1b3da\"></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK3old8BitArray13GetValueAtBitE1TK6size_t\" title=\"old::BitArray::GetValueAtBit::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValueAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get specified type starting at a given BIT position. </p></dd>", "a[href=\"Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray9RandomizeER6RandomKdK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9RandomizeER6RandomKdK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray9RandomizeER6RandomKdK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray9RandomizeER6RandomKdK6size_tK6size_t\"></span><span id=\"old::BitArray::Randomize__RandomR.doubleC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae82317aacadbfda294baba2d3b6ae4df\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Randomize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a given probability of being a one. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray12PrintAsRangeERNSt7ostreamERKNSt6stringERKNSt6stringE\"></span><span id=\"old::BitArray::PrintAsRange__osR.ssCR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af8c1edfdc143c3edaeae02d5c734f3b6\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintAsRange</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\",\"</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ranger</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"-\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print the ones in a range format. E.g., 2-5,7,10-15. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray9SetUInt64EK6size_t8uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9SetUInt64EK6size_t8uint64_t\">\n<span id=\"_CPPv3N3old8BitArray9SetUInt64EK6size_t8uint64_t\"></span><span id=\"_CPPv2N3old8BitArray9SetUInt64EK6size_t8uint64_t\"></span><span id=\"old::BitArray::SetUInt64__sC.uint64_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab66abe165a02574a8227c54f9e4f5b91\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt64</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 64-bit uint at the specified uint index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray7REVERSEEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7REVERSEEv\">\n<span id=\"_CPPv3NK3old8BitArray7REVERSEEv\"></span><span id=\"_CPPv2NK3old8BitArray7REVERSEEv\"></span><span id=\"old::BitArray::REVERSEC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a563345ba4e2cf5ada8d8cb0166ec2dba\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">REVERSE</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Reverse order of bits in the BitArray. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray7FindBitEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7FindBitEK6size_t\">\n<span id=\"_CPPv3NK3old8BitArray7FindBitEK6size_t\"></span><span id=\"_CPPv2NK3old8BitArray7FindBitEK6size_t\"></span><span id=\"old::BitArray::FindBit__sCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae6bb7dab97dba877c4d2f82b6a222e2e\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Deprecated version of FindOne(). </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray4HashEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4HashEv\">\n<span id=\"_CPPv3NK3old8BitArray4HashEv\"></span><span id=\"_CPPv2NK3old8BitArray4HashEv\"></span><span id=\"old::BitArray::HashC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7872a51b4db974a517611b8a0564f51b\"></span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Hash</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>A simple hash function for bit vectors. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray10Byte2FieldEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10Byte2FieldEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray10Byte2FieldEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray10Byte2FieldEK6size_t\"></span><span id=\"old::BitArray::Byte2Field__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1acd7cf7dacca275c4d96aa20f75752557\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Byte2Field</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"../../math/api/Random.html#_CPPv46Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv46Random\">\n<span id=\"_CPPv36Random\"></span><span id=\"_CPPv26Random\"></span><span id=\"Random\"></span><span class=\"target\" id=\"classRandom\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Random</span></span></span><br/></dt><dd><p>Middle Square Weyl Sequence: A versatile and non-patterned pseudo-random-number generator. Based on: <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Middle-square_method\">https://en.wikipedia.org/wiki/Middle-square_method</a></p></dd>", "a[href=\"#_CPPv4N3old8BitArray12GetNumStatesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12GetNumStatesEv\">\n<span id=\"_CPPv3N3old8BitArray12GetNumStatesEv\"></span><span id=\"_CPPv2N3old8BitArray12GetNumStatesEv\"></span><span id=\"old::BitArray::GetNumStatesCE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa1b714bcc226f90fa5be4ac48ed50945\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetNumStates</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>How many distinct values could be held in this BitArray? </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray13GetUInt8AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray13GetUInt8AtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray13GetUInt8AtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray13GetUInt8AtBitE6size_t\"></span><span id=\"old::BitArray::GetUInt8AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a35ca91db7ac153d30bcd08a4d7ce0c83\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt8AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 8-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4I_6size_t_bENK3old8BitArrayltEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArrayltEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArrayltERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArrayltERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a94bd1a331060d5319dc3e7d77b1df982\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayltEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&lt;::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayltEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&lt;::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Compare two BitArray objects, based on the associated binary value. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7SetUIntEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7SetUIntEK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old8BitArray7SetUIntEK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old8BitArray7SetUIntEK6size_t8uint32_t\"></span><span id=\"old::BitArray::SetUInt__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a4d04e60a118622d711a911d6322d52b0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>By default, update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8BitArrayER6Randomd\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayER6Randomd\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayER6Randomd\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayER6Randomd\"></span><span id=\"old::BitArray::BitArray__RandomR.double\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a394c09ca6317f648d2e832292cbdd2e4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p1</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitArray with provided PROBABILITY of 1\u2019s. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray4NoneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4NoneEv\">\n<span id=\"_CPPv3NK3old8BitArray4NoneEv\"></span><span id=\"_CPPv2NK3old8BitArray4NoneEv\"></span><span id=\"old::BitArray::NoneC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aff45aa6b27cc78187d9d2503e95623a4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">None</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if NO bits in the BitArray are one, else return false. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray12SetUIntAtBitEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12SetUIntAtBitEK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old8BitArray12SetUIntAtBitEK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old8BitArray12SetUIntAtBitEK6size_t8uint32_t\"></span><span id=\"old::BitArray::SetUIntAtBit__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a26343500678fe2bcee69f585a3896c5d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUIntAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>By default, update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray10PrintArrayERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10PrintArrayERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old8BitArray10PrintArrayERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old8BitArray10PrintArrayERNSt7ostreamE\"></span><span id=\"old::BitArray::PrintArray__osRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6c6b47ca5d432bfab01cb507c4342ac7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print from smallest bit position to largest. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray16ClearRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray16ClearRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N3old8BitArray16ClearRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N3old8BitArray16ClearRandomCountER6RandomK6size_t\"></span><span id=\"old::BitArray::ClearRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afc4160e635c52b8b99e4114babe78b60\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ClearRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Unset a specified number of random bits (does not check if already zero.) </p></dd>", "a[href=\"#_CPPv4NK3old8BitArraylsEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArraylsEK6size_t\">\n<span id=\"_CPPv3NK3old8BitArraylsEK6size_t\"></span><span id=\"_CPPv2NK3old8BitArraylsEK6size_t\"></span><span id=\"old::BitArray::lshift-operator__sCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a385234ab12bfcad24ba8d5ba5f4d4bbb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator shift left\u2026 </p></dd>", "a[href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bEN3old8BitArrayE\">\n<span id=\"_CPPv3I_6size_t_bEN3old8BitArrayE\"></span><span id=\"_CPPv2I_6size_t_bEN3old8BitArrayE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><br/></dt><dd><p>A fixed-sized (but arbitrarily large) array of bits, and optimizes operations on those bits to be as fast as possible. </p></dd>", "a[href=\"../../meta/api/type_traits.html#_CPPv4I_6size_t0E16uint_bit_count_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t0E16uint_bit_count_t\">\n<span id=\"_CPPv3I_6size_t0E16uint_bit_count_t\"></span><span id=\"_CPPv2I_6size_t0E16uint_bit_count_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BIT_COUNT</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">DEFAULT</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"type__traits_8hpp_1adaa36c7803c02faa4101b6afef287591\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">uint_bit_count_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E14uint_bit_count\" title=\"uint_bit_count\"><span class=\"n\"><span class=\"pre\">uint_bit_count</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E16uint_bit_count_t\" title=\"uint_bit_count_t::BIT_COUNT\"><span class=\"n\"><span class=\"pre\">BIT_COUNT</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t0E16uint_bit_count_t\" title=\"uint_bit_count_t::DEFAULT\"><span class=\"n\"><span class=\"pre\">DEFAULT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">type</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray8EQU_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8EQU_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8EQU_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8EQU_SELFERK8BitArray\"></span><span id=\"old::BitArray::EQU_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a812447f2ee46bad88344ee3a68767239\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EQU_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean EQU with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3NORERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3NORERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3NORERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3NORERK8BitArray\"></span><span id=\"old::BitArray::NOR__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a655d3bb51c82a380781e475e1c678689\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NOR with a second BitArray and return the result. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray13Byte2FieldPosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray13Byte2FieldPosEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray13Byte2FieldPosEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray13Byte2FieldPosEK6size_t\"></span><span id=\"old::BitArray::Byte2FieldPos__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae399b0fc2436e4dc19f90d007ab5c7f3\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Byte2FieldPos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"../../math/api/math.html#_CPPv44Log2d\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv44Log2d\">\n<span id=\"_CPPv34Log2d\"></span><span id=\"_CPPv24Log2d\"></span><span id=\"Log2__doubleCE\"></span><span class=\"target\" id=\"math_8hpp_1abc450d351bd3b6169f345a1ca4a7a455\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Log2</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">x</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compile-time log base 2 calculator. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray8GetBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8GetBytesEv\">\n<span id=\"_CPPv3NK3old8BitArray8GetBytesEv\"></span><span id=\"_CPPv2NK3old8BitArray8GetBytesEv\"></span><span id=\"old::BitArray::GetBytesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aad533bb91ab148e4073bd8f535f31735\"></span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">span</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">byte</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get a read-only view into the internal array used by BitArray. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray9NAND_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9NAND_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray9NAND_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray9NAND_SELFERK8BitArray\"></span><span id=\"old::BitArray::NAND_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab44610d3c97cc4cc10970cf437a0bad0\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NAND_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NAND with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray13SetUInt8AtBitEK6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray13SetUInt8AtBitEK6size_t7uint8_t\">\n<span id=\"_CPPv3N3old8BitArray13SetUInt8AtBitEK6size_t7uint8_t\"></span><span id=\"_CPPv2N3old8BitArray13SetUInt8AtBitEK6size_t7uint8_t\"></span><span id=\"old::BitArray::SetUInt8AtBit__sC.uint8_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a230f1976ba8606e03abb5e6b60ae8e06\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt8AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 8-bit uint at the specified uint index. </p></dd>", "a[href=\"#_CPPv4I_6size_t_bENK3old8BitArrayeqEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArrayeqEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArrayeqERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArrayeqERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a47eccd23c0b52048bfa655c66a37f090\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">==</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayeqEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator==::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayeqEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator==::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Test if two BitArray objects are identical. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray9CountOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9CountOnesEv\">\n<span id=\"_CPPv3NK3old8BitArray9CountOnesEv\"></span><span id=\"_CPPv2NK3old8BitArray9CountOnesEv\"></span><span id=\"old::BitArray::CountOnesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a13465a51b832252a0fbb5dbf3e75d4f5\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of ones in the BitArray. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3ADDERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3ADDERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3ADDERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3ADDERK8BitArray\"></span><span id=\"old::BitArray::ADD__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a428cfd79a150956cce1a9876fdfce207\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ADD</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Addition of two BitArrays. Wraps if it overflows. Returns result. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3allEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3allEv\">\n<span id=\"_CPPv3NK3old8BitArray3allEv\"></span><span id=\"_CPPv2NK3old8BitArray3allEv\"></span><span id=\"old::BitArray::allC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad74bb0131adf0aef18e5a505902035aa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">all</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArraylSEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArraylSEK6size_t\">\n<span id=\"_CPPv3N3old8BitArraylSEK6size_t\"></span><span id=\"_CPPv2N3old8BitArraylSEK6size_t\"></span><span id=\"old::BitArray::lshift-assign-operator__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a24b854f502449c26e24d0d7ca3182d0a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator shift left\u2026 </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray7FindOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7FindOneEv\">\n<span id=\"_CPPv3NK3old8BitArray7FindOneEv\"></span><span id=\"_CPPv2NK3old8BitArray7FindOneEv\"></span><span id=\"old::BitArray::FindOneC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab82382ab6cf415bcdad47f6fda7d0e4a\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return the position of the first one; return -1 if no ones in vector. </p></dd>", "a[href=\"#_CPPv4N3old8BitArrayaNERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayaNERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArrayaNERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArrayaNERK8BitArray\"></span><span id=\"old::BitArray::and-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6a6e25ba0d5d3fcb442e75b14a33bc08\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise AND\u2026 </p></dd>", "a[href=\"#_CPPv4I_6size_t_bEN3old8BitArray6ImportER8BitArrayRK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bEN3old8BitArray6ImportER8BitArrayRK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\">\n<span id=\"_CPPv3I_6size_t_bEN3old8BitArray6ImportERK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\"></span><span id=\"_CPPv2I_6size_t_bEN3old8BitArray6ImportERK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FROM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FROM_LEFT</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a01f25a44d12b11f9017879ab95fb1302\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Import</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArray6ImportER8BitArrayRK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\" title=\"old::BitArray::Import::FROM_BITS\"><span class=\"n\"><span class=\"pre\">FROM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArray6ImportER8BitArrayRK8BitArrayI9FROM_BITS9FROM_LEFTEK6size_t\" title=\"old::BitArray::Import::FROM_LEFT\"><span class=\"n\"><span class=\"pre\">FROM_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">from_bits</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">from_bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Assignment from another BitArray of a different size. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7GetSizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7GetSizeEv\">\n<span id=\"_CPPv3N3old8BitArray7GetSizeEv\"></span><span id=\"_CPPv2N3old8BitArray7GetSizeEv\"></span><span id=\"old::BitArray::GetSizeCE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1adcab42ee068b4ca0d29c758a8ee5141c\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSize</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>How many bits are in this BitArray? </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray18LongestSegmentOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray18LongestSegmentOnesEv\">\n<span id=\"_CPPv3NK3old8BitArray18LongestSegmentOnesEv\"></span><span id=\"_CPPv2NK3old8BitArray18LongestSegmentOnesEv\"></span><span id=\"old::BitArray::LongestSegmentOnesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af7c398d2a17b414d0e5d5330cde3388d\"></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">LongestSegmentOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find the length of the longest continuous series of ones. </p></dd>", "a[href=\"#_CPPv4NR3old8BitArrayaSEPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old8BitArrayaSEPKc\">\n<span id=\"_CPPv3NR3old8BitArrayaSEPKc\"></span><span id=\"_CPPv2NR3old8BitArrayaSEPKc\"></span><span id=\"old::BitArray::assign-operator__cCPR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1f66e2214907611f460af2e5bdc781a4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><br/></dt><dd><p>Assignment operator from a literal string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"#_CPPv4N3old8BitArraylsERNSt7ostreamERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArraylsERNSt7ostreamERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArraylsERNSt7ostreamERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArraylsERNSt7ostreamERK8BitArray\"></span><span id=\"old::BitArray::lshift-operator__osR.BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1adcc482760b9ab048016aabf7f7c39171\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">friend</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;&lt;</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bs</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Overload ostream operator to return Print. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8SetUInt8EK6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8SetUInt8EK6size_t7uint8_t\">\n<span id=\"_CPPv3N3old8BitArray8SetUInt8EK6size_t7uint8_t\"></span><span id=\"_CPPv2N3old8BitArray8SetUInt8EK6size_t7uint8_t\"></span><span id=\"old::BitArray::SetUInt8__sC.uint8_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab56a458e4c9a2ef13c7f9ba6ee504e46\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt8</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 8-bit uint at the specified uint index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray2OKEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray2OKEv\">\n<span id=\"_CPPv3NK3old8BitArray2OKEv\"></span><span id=\"_CPPv2NK3old8BitArray2OKEv\"></span><span id=\"old::BitArray::OKC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1ffe0624443d98510f55db7795ff05dc\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OK</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>For debugging: make sure that there are no obvious problems with a BitArray object. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray2ORERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray2ORERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray2ORERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray2ORERK8BitArray\"></span><span id=\"old::BitArray::OR__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae2e584ae47d007c20a7f75ea64903126\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OR</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean OR with a second BitArray and return the result. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray10PrintDebugERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10PrintDebugERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old8BitArray10PrintDebugERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old8BitArray10PrintDebugERNSt7ostreamE\"></span><span id=\"old::BitArray::PrintDebug__osRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a283fc58808e0f908acacf6816793b977\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintDebug</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print out details about the internals of the BitArray. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray13ToRangeStringERKNSt6stringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray13ToRangeStringERKNSt6stringERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray13ToRangeStringERKNSt6stringERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray13ToRangeStringERKNSt6stringERKNSt6stringE\"></span><span id=\"old::BitArray::ToRangeString__ssCR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1a871fdd17104f9bf7b3954e9a9f7e30\"></span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToRangeString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\",\"</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ranger</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"-\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to a series of IDs with ranges condensed. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray8GetValueEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8GetValueEv\">\n<span id=\"_CPPv3NK3old8BitArray8GetValueEv\"></span><span id=\"_CPPv2NK3old8BitArray8GetValueEv\"></span><span id=\"old::BitArray::GetValueC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7dfcd08c798de75f7ccc70296fe2a832\"></span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValue</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get the overall value of this BitArray, using a uint encoding, but including all bits and returning the value as a double. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArrayixE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayixE6size_t\">\n<span id=\"_CPPv3NK3old8BitArrayixE6size_t\"></span><span id=\"_CPPv2NK3old8BitArrayixE6size_t\"></span><span id=\"old::BitArray::subscript-operator__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6d0c9f4fc49e3f19bb6a1c549944dde5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">[]</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Index into a const BitArray (i.e., cannot be set this way.) </p></dd>", "a[href=\"../../math/api/Random.html#_CPPv4N6Random4ProbE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N6Random4ProbE\">\n<span id=\"_CPPv3N6Random4ProbE\"></span><span id=\"_CPPv2N6Random4ProbE\"></span><span class=\"target\" id=\"classRandom_1a8cf2d1c0166f1439b7da141891ab5543\"></span><span class=\"k\"><span class=\"pre\">enum</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Prob</span></span></span><br/></dt><dd><p>Enumeration for common probabilities. (not class, so can be referred to elsewhere as e.g., Random::PROB_50) </p><p><em>Values:</em></p></dd>", "a[href=\"#_CPPv4NK3old8BitArray8RawBytesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8RawBytesEv\">\n<span id=\"_CPPv3NK3old8BitArray8RawBytesEv\"></span><span id=\"_CPPv2NK3old8BitArray8RawBytesEv\"></span><span id=\"old::BitArray::RawBytesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a3bf46397c32395e983c9bf7fa3e60aa9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../base/api/Ptr.html#_CPPv4I0E3Ptr\" title=\"Ptr\"><span class=\"n\"><span class=\"pre\">Ptr</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">unsigned</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RawBytes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get a read-only pointer to the internal array used by BitArray. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8SUB_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8SUB_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8SUB_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8SUB_SELFERK8BitArray\"></span><span id=\"old::BitArray::SUB_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a194c68b1d4d4f948b983855c98d02e40\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SUB_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Subtraction of two BitArrays. Wraps if it underflows. Returns this object. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray11RotateRightEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11RotateRightEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray11RotateRightEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray11RotateRightEK6size_t\"></span><span id=\"old::BitArray::RotateRight__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a85f7961b9364116b72e43d9409b4c53f\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateRight</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size_raw</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper for calling ROTATE with positive number. </p></dd>", "a[href=\"#_CPPv4I_6size_tEN3old8BitArray9ROTL_SELFER8BitArrayv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN3old8BitArray9ROTL_SELFER8BitArrayv\">\n<span id=\"_CPPv3I_6size_tEN3old8BitArray9ROTL_SELFEv\"></span><span id=\"_CPPv2I_6size_tEN3old8BitArray9ROTL_SELFEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">shift_size_raw</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a10d1b00491126bf793d46d58b9005c26\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTL_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper: call ROTATE with negative number instead. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7END_GAPE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7END_GAPE\">\n<span id=\"_CPPv3N3old8BitArray7END_GAPE\"></span><span id=\"_CPPv2N3old8BitArray7END_GAPE\"></span><span id=\"old::BitArray::END_GAP__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7a4d64a57f811b78b66b24e764a3b0c8\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">END_GAP</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray12NUM_END_BITSE\" title=\"old::BitArray::NUM_END_BITS\"><span class=\"n\"><span class=\"pre\">NUM_END_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">?</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_BITSE\" title=\"old::BitArray::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray12NUM_END_BITSE\" title=\"old::BitArray::NUM_END_BITS\"><span class=\"n\"><span class=\"pre\">NUM_END_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray8NOR_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8NOR_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8NOR_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8NOR_SELFERK8BitArray\"></span><span id=\"old::BitArray::NOR_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afbdea77bcd8bd9e28ebece24c3947e38\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean NOR with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray14SetRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray14SetRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N3old8BitArray14SetRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N3old8BitArray14SetRandomCountER6RandomK6size_t\"></span><span id=\"old::BitArray::SetRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aae8870c1060407e7827d2bd2c63ae130\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set a specified number of random bits (does not check if already set.) </p></dd>", "a[href=\"#_CPPv4N3old8BitArrayrSEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayrSEK6size_t\">\n<span id=\"_CPPv3N3old8BitArrayrSEK6size_t\"></span><span id=\"_CPPv2N3old8BitArrayrSEK6size_t\"></span><span id=\"old::BitArray::rshift-assign-operator__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a5562bdb3b26c0f6a68d8cb33d1c75033\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;&gt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator shift right\u2026 </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7field_tE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7field_tE\">\n<span id=\"_CPPv3N3old8BitArray7field_tE\"></span><span id=\"_CPPv2N3old8BitArray7field_tE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a48a88648b8f00b6a4e744b56fcb15eed\"></span><span class=\"k\"><span class=\"pre\">using</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">field_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../meta/api/type_traits.html#_CPPv4I_6size_t0E16uint_bit_count_t\" title=\"uint_bit_count_t\"><span class=\"n\"><span class=\"pre\">uint_bit_count_t</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray14ToBinaryStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray14ToBinaryStringEv\">\n<span id=\"_CPPv3NK3old8BitArray14ToBinaryStringEv\"></span><span id=\"_CPPv2NK3old8BitArray14ToBinaryStringEv\"></span><span id=\"old::BitArray::ToBinaryStringC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a769470280788e19e9881dfbda0bc17bb\"></span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToBinaryString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to a numerical string [index 0 on right]. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray11TOTAL_BYTESE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11TOTAL_BYTESE\">\n<span id=\"_CPPv3N3old8BitArray11TOTAL_BYTESE\"></span><span id=\"_CPPv2N3old8BitArray11TOTAL_BYTESE\"></span><span id=\"old::BitArray::TOTAL_BYTES__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa4050780197bbedef1b626e264c5fac6\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TOTAL_BYTES</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">+</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">&gt;&gt;</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">3</span></span><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArraypLERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArraypLERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArraypLERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArraypLERK8BitArray\"></span><span id=\"old::BitArray::add-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a4db98e2c9006d48df47fa1c42c2f1885\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">+=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator plus\u2026 </p></dd>", "a[href=\"#_CPPv4N3old8BitArray9ShiftLeftEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9ShiftLeftEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray9ShiftLeftEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray9ShiftLeftEK6size_t\"></span><span id=\"old::BitArray::ShiftLeft__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a39e5f87b5da8d8586c12dca9fe1bc6f2\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ShiftLeft</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray3EQUERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3EQUERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3EQUERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3EQUERK8BitArray\"></span><span id=\"old::BitArray::EQU__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af553757cf164d0392d245ce2396b5886\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">EQU</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean EQU with a second BitArray and return the result. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray5PrintERNSt7ostreamE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray5PrintERNSt7ostreamE\">\n<span id=\"_CPPv3NK3old8BitArray5PrintERNSt7ostreamE\"></span><span id=\"_CPPv2NK3old8BitArray5PrintERNSt7ostreamE\"></span><span id=\"old::BitArray::Print__osRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a2b06fef566e2e345256c6e88cb669a9a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Print</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Regular print function (from least significant bit to most) </p></dd>", "a[href=\"#_CPPv4N3old8BitArray4sizeEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4sizeEv\">\n<span id=\"_CPPv3N3old8BitArray4sizeEv\"></span><span id=\"_CPPv2N3old8BitArray4sizeEv\"></span><span id=\"old::BitArray::sizeCE\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad4de8b3c01698041da93dea166cf11b9\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">size</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>STL COMPATIBILITY A set of functions to allow drop-in replacement with std::bitset. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray6ToggleEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6ToggleEv\">\n<span id=\"_CPPv3N3old8BitArray6ToggleEv\"></span><span id=\"_CPPv2N3old8BitArray6ToggleEv\"></span><span id=\"old::BitArray::Toggle\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a261da7a156972be35fcead40e358bf5d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Toggle</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip all bits in this BitArray. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8BitArrayERKNSt6bitsetI8NUM_BITSEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayERKNSt6bitsetI8NUM_BITSEE\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayERKNSt6bitsetI8NUM_BITSEE\"></span><span id=\"old::BitArray::BitArray__std::bitset:NUM_BITS:CR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae5e48befca6e305f184495b1d40b9d71\"></span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">bitset</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">bitset</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a BitArray from a std::bitset. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray4flipE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4flipE6size_t6size_t\">\n<span id=\"_CPPv3N3old8BitArray4flipE6size_t6size_t\"></span><span id=\"_CPPv2N3old8BitArray4flipE6size_t6size_t\"></span><span id=\"old::BitArray::flip__s.s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1acee2fbe30f7c019263c9442094ad85d3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray8ToStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8ToStringEv\">\n<span id=\"_CPPv3NK3old8BitArray8ToStringEv\"></span><span id=\"_CPPv2NK3old8BitArray8ToStringEv\"></span><span id=\"old::BitArray::ToStringC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a86f892bbb043cc3fca7b951e02b1bff2\"></span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to a string. </p></dd>", "a[href=\"#_CPPv4I_6size_t_bENK3old8BitArraygtEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArraygtEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArraygtERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArraygtERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a999ecd4d9b51b02611957b1da470d0a3\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArraygtEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&gt;::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArraygtEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&gt;::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray8ADD_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8ADD_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8ADD_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8ADD_SELFERK8BitArray\"></span><span id=\"old::BitArray::ADD_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6c89ca3a3bfa0730e39c0624004307a2\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ADD_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Addition of two BitArrays. Wraps if it overflows. Returns this object. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray10FIELD_BITSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10FIELD_BITSE\">\n<span id=\"_CPPv3N3old8BitArray10FIELD_BITSE\"></span><span id=\"_CPPv2N3old8BitArray10FIELD_BITSE\"></span><span id=\"old::BitArray::FIELD_BITS__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac956d4430f27b145d2f323f91d94763a\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">8</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">sizeof</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\">\n<span id=\"_CPPv3I_6size_t_6size_tEN3old4joinERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\"></span><span id=\"_CPPv2I_6size_t_6size_tEN3old4joinERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS1</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"namespaceold_1a2b66d41f2b36e24431004b723be8e61c\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\" title=\"old::join::NUM_BITS1\"><span class=\"n\"><span class=\"pre\">NUM_BITS1</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">+</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\" title=\"old::join::NUM_BITS2\"><span class=\"n\"><span class=\"pre\">NUM_BITS2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">join</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\" title=\"old::join::NUM_BITS1\"><span class=\"n\"><span class=\"pre\">NUM_BITS1</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_6size_tEN3old4joinE8BitArrayIXpl9NUM_BITS19NUM_BITS2EERK8BitArrayI9NUM_BITS1ERK8BitArrayI9NUM_BITS2E\" title=\"old::join::NUM_BITS2\"><span class=\"n\"><span class=\"pre\">NUM_BITS2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray5resetEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5resetEv\">\n<span id=\"_CPPv3N3old8BitArray5resetEv\"></span><span id=\"_CPPv2N3old8BitArray5resetEv\"></span><span id=\"old::BitArray::reset\"></span><span class=\"target\" id=\"classold_1_1BitArray_1adc12916262ecf322401780e4f8a9c93e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">reset</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray5ClearE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5ClearE6size_t\">\n<span id=\"_CPPv3N3old8BitArray5ClearE6size_t\"></span><span id=\"_CPPv2N3old8BitArray5ClearE6size_t\"></span><span id=\"old::BitArray::Clear__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae5b64568bfd17e5bf3f33b1978f862dc\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set specific bit to 0. </p></dd>", "a[href=\"#_CPPv4I0ENK3old8BitArray15GetValueAtIndexE1TK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0ENK3old8BitArray15GetValueAtIndexE1TK6size_t\">\n<span id=\"_CPPv3I0ENK3old8BitArray15GetValueAtIndexEK6size_t\"></span><span id=\"_CPPv2I0ENK3old8BitArray15GetValueAtIndexEK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1ad3200967a4aadaa1de24b478a9c841fc\"></span><a class=\"reference internal\" href=\"#_CPPv4I0ENK3old8BitArray15GetValueAtIndexE1TK6size_t\" title=\"old::BitArray::GetValueAtIndex::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetValueAtIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Get specified type at a given index (in steps of that type size) </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7OR_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7OR_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray7OR_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray7OR_SELFERK8BitArray\"></span><span id=\"old::BitArray::OR_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad953526077996a92e10d01abc1a753dc\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">OR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean OR with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray5countEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray5countEv\">\n<span id=\"_CPPv3NK3old8BitArray5countEv\"></span><span id=\"_CPPv2NK3old8BitArray5countEv\"></span><span id=\"old::BitArray::countC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa714ff6df4a36fd79782544ddfb6f072\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">count</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray10NUM_FIELDSE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10NUM_FIELDSE\">\n<span id=\"_CPPv3N3old8BitArray10NUM_FIELDSE\"></span><span id=\"_CPPv2N3old8BitArray10NUM_FIELDSE\"></span><span id=\"old::BitArray::NUM_FIELDS__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae868a2ad5a1349eac39ec08b2e4f03dc\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_FIELDS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">+</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">-</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">1</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">/</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10FIELD_BITSE\" title=\"old::BitArray::FIELD_BITS\"><span class=\"n\"><span class=\"pre\">FIELD_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray10SHIFT_SELFEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10SHIFT_SELFEKi\">\n<span id=\"_CPPv3N3old8BitArray10SHIFT_SELFEKi\"></span><span id=\"_CPPv2N3old8BitArray10SHIFT_SELFEKi\"></span><span id=\"old::BitArray::SHIFT_SELF__iC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a874077c1a0d82f4a10271828ebe74573\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SHIFT_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Positive shifts go right and negative shifts go left (0 does nothing); store result here, and return this object. </p></dd>", "a[href=\"#_CPPv4I0EN3old8BitArray9serializeEvR7Archive\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray9serializeEvR7Archive\">\n<span id=\"_CPPv3I0EN3old8BitArray9serializeER7Archive\"></span><span id=\"_CPPv2I0EN3old8BitArray9serializeER7Archive\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Archive</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a8fc383d33fa293f5cdeaaceac61d9622\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">serialize</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray9serializeEvR7Archive\" title=\"old::BitArray::serialize::Archive\"><span class=\"n\"><span class=\"pre\">Archive</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray3HasE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3HasE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray3HasE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray3HasE6size_t\"></span><span id=\"old::BitArray::Has__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a088e58d4f58a5eab4cab32ed21219a84\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Has</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>A safe version of Get() for indexing out of range. Useful for representing collections. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8SetRangeE6size_t6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8SetRangeE6size_t6size_t\">\n<span id=\"_CPPv3N3old8BitArray8SetRangeE6size_t6size_t\"></span><span id=\"_CPPv2N3old8BitArray8SetRangeE6size_t6size_t\"></span><span id=\"old::BitArray::SetRange__s.s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a77195cd7175cd7ca89f47450713a1fa7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRange</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set a range of bits to one: [start, stop) </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7FieldIDEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7FieldIDEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray7FieldIDEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray7FieldIDEK6size_t\"></span><span id=\"old::BitArray::FieldID__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab5aff40a64367d432405d1d72f1b2dcc\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldID</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray11PrintFieldsERNSt7ostreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray11PrintFieldsERNSt7ostreamERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray11PrintFieldsERNSt7ostreamERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray11PrintFieldsERNSt7ostreamERKNSt6stringE\"></span><span id=\"old::BitArray::PrintFields__osR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7e8735008b9541544a71dcff637a3963\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintFields</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print a space between each field (or other provided spacer) </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray4noneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4noneEv\">\n<span id=\"_CPPv3NK3old8BitArray4noneEv\"></span><span id=\"_CPPv2NK3old8BitArray4noneEv\"></span><span id=\"old::BitArray::noneC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1abd9a0273291021438e0ed08c0cef8b33\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">none</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray3GetE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3GetE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray3GetE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray3GetE6size_t\"></span><span id=\"old::BitArray::Get__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afcc369eac0994753860a1a71221e6662\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Get</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the bit as a specified index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray7GetByteE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7GetByteE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray7GetByteE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray7GetByteE6size_t\"></span><span id=\"old::BitArray::GetByte__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a35237a50abbee21a09b461f4642eae99\"></span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetByte</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the byte at the specified byte index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray8GetSizeTE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8GetSizeTE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray8GetSizeTE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray8GetSizeTE6size_t\"></span><span id=\"old::BitArray::GetSizeT__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a60f18425a2e5fa018dd08826170eec51\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetSizeT</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve a \u2018size_t\u2019 chunk from the current bits at the specified index. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray12ChooseRandomER6RandomK6size_tK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12ChooseRandomER6RandomK6size_tK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray12ChooseRandomER6RandomK6size_tK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray12ChooseRandomER6RandomK6size_tK6size_tK6size_t\"></span><span id=\"old::BitArray::ChooseRandom__RandomR.sC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae756bf151d547df7429151c72d209155\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ChooseRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">target_ones</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with a fixed number of them being ones. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray8GetUInt8E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray8GetUInt8E6size_t\">\n<span id=\"_CPPv3NK3old8BitArray8GetUInt8E6size_t\"></span><span id=\"_CPPv2NK3old8BitArray8GetUInt8E6size_t\"></span><span id=\"old::BitArray::GetUInt8__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a21c7bdb82fecae866b2f8faedd384e4b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt8</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 8-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8BitArrayER6Random6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayER6Random6size_t\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayER6Random6size_t\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayER6Random6size_t\"></span><span id=\"old::BitArray::BitArray__RandomR.s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a33767c91554fa9dd62db8008def8a343\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitArray with provided NUMBER of 1\u2019s. </p></dd>", "a[href=\"#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\">\n<span id=\"_CPPv3I_6size_t_bEN3old16SimpleMatchCoeffERK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\"></span><span id=\"_CPPv2I_6size_t_bEN3old16SimpleMatchCoeffERK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"namespaceold_1a62f4fd289424f61151433105748ae26f\"></span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SimpleMatchCoeff</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\" title=\"old::SimpleMatchCoeff::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\" title=\"old::SimpleMatchCoeff::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in1</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\" title=\"old::SimpleMatchCoeff::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old16SimpleMatchCoeffEdRK8BitArrayI8NUM_BITS9ZERO_LEFTERK8BitArrayI8NUM_BITS9ZERO_LEFTE\" title=\"old::SimpleMatchCoeff::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Computes simple matching coefficient (<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Simple_matching_coefficient\">https://en.wikipedia.org/wiki/Simple_matching_coefficient</a>). </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray9GetAsCharE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9GetAsCharE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray9GetAsCharE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray9GetAsCharE6size_t\"></span><span id=\"old::BitArray::GetAsChar__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a48db094d4671b4c12c0481a2b1c1c2f9\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetAsChar</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">id</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert a specified bit to a character. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray6ByteIDEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6ByteIDEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray6ByteIDEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray6ByteIDEK6size_t\"></span><span id=\"old::BitArray::ByteID__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1d32a7e6b04be4cb53bb370d6b45d3a1\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ByteID</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NR3old8BitArrayaSERK6this_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NR3old8BitArrayaSERK6this_t\">\n<span id=\"_CPPv3NR3old8BitArrayaSERK6this_t\"></span><span id=\"_CPPv2NR3old8BitArrayaSERK6this_t\"></span><span id=\"old::BitArray::assign-operator__this_tCRR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa692399466e0c84a25025def5b5950ea\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray6this_tE\" title=\"old::BitArray::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in_bits</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Assignment operator (no separate move operator since no resources to move\u2026) </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray9GetUInt32E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9GetUInt32E6size_t\">\n<span id=\"_CPPv3NK3old8BitArray9GetUInt32E6size_t\"></span><span id=\"_CPPv2NK3old8BitArray9GetUInt32E6size_t\"></span><span id=\"old::BitArray::GetUInt32__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a27471ecaf559d55d0232ee5ea5157db6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt32</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3AnyEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3AnyEv\">\n<span id=\"_CPPv3NK3old8BitArray3AnyEv\"></span><span id=\"_CPPv2NK3old8BitArray3AnyEv\"></span><span id=\"old::BitArray::AnyC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1adb74f28ca26729611537398edcd22158\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Any</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return true if ANY bits in the BitArray are one, else return false. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray4flipEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4flipEv\">\n<span id=\"_CPPv3N3old8BitArray4flipEv\"></span><span id=\"_CPPv2N3old8BitArray4flipEv\"></span><span id=\"old::BitArray::flip\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a47eda9be6fc67da19ab953c3d7b2aff0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flip</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArrayrsEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayrsEK6size_t\">\n<span id=\"_CPPv3NK3old8BitArrayrsEK6size_t\"></span><span id=\"_CPPv2NK3old8BitArrayrsEK6size_t\"></span><span id=\"old::BitArray::rshift-operator__sCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad9655f405ac61cd0a066171b21332304\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator shift right\u2026 </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray10ToIDStringERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10ToIDStringERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray10ToIDStringERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray10ToIDStringERKNSt6stringE\"></span><span id=\"old::BitArray::ToIDString__ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a7c64b5422c179634a09077cf422ebe97\"></span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToIDString</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to a series of IDs. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray11ROTATE_SELFEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray11ROTATE_SELFEKi\">\n<span id=\"_CPPv3N3old8BitArray11ROTATE_SELFEKi\"></span><span id=\"_CPPv2N3old8BitArray11ROTATE_SELFEKi\"></span><span id=\"old::BitArray::ROTATE_SELF__iC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8760b6649c7fbdce709f1b04311622e3\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTATE_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Positive rotates go right and negative rotates go left (0 does nothing); store result here, and return this object. </p></dd>", "a[href=\"#_CPPv4I0EN3old8BitArray15SetValueAtIndexEvK6size_t1T\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray15SetValueAtIndexEvK6size_t1T\">\n<span id=\"_CPPv3I0EN3old8BitArray15SetValueAtIndexEK6size_t1T\"></span><span id=\"_CPPv2I0EN3old8BitArray15SetValueAtIndexEK6size_t1T\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1ad70ef67dc3a5135990c91f1eae57aa53\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetValueAtIndex</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray15SetValueAtIndexEvK6size_t1T\" title=\"old::BitArray::SetValueAtIndex::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set specified type at a given index (in steps of that type size) </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray6ROTATEEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray6ROTATEEKi\">\n<span id=\"_CPPv3NK3old8BitArray6ROTATEEKi\"></span><span id=\"_CPPv2NK3old8BitArray6ROTATEEKi\"></span><span id=\"old::BitArray::ROTATE__iCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a98906d3e7487379a2becbfb3027236bf\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTATE</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">rotate_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Positive rotates go left and negative rotates go left (0 does nothing); return result. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArrayplERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayplERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArrayplERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArrayplERK8BitArray\"></span><span id=\"old::BitArray::add-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a846f8e63a679c9829147e37c17298a7b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">+</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator plus\u2026 </p></dd>", "a[href=\"#_CPPv4N3old8BitArray10FlipRandomER6RandomKdK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10FlipRandomER6RandomKdK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray10FlipRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray10FlipRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"old::BitArray::FlipRandom__RandomR.doubleC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aec4cea5b59bfa888e18b12568b7a5ce0\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FlipRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip random bits with a given probability. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray4bitsE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray4bitsE\">\n<span id=\"_CPPv3N3old8BitArray4bitsE\"></span><span id=\"_CPPv2N3old8BitArray4bitsE\"></span><span id=\"old::BitArray::bits__field_tA\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac15e669dbf50b3ef22eae8c2abb01cee\"></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">bits</span></span></span><span class=\"p\"><span class=\"pre\">[</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray10NUM_FIELDSE\" title=\"old::BitArray::NUM_FIELDS\"><span class=\"n\"><span class=\"pre\">NUM_FIELDS</span></span></a><span class=\"p\"><span class=\"pre\">]</span></span><br/></dt><dd><p>Fields to hold the actual bits for this BitArray. </p></dd>", "a[href=\"#_CPPv4I_N6Random4ProbEEN3old8BitArray10RandomizePER8BitArrayR6RandomK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_N6Random4ProbEEN3old8BitArray10RandomizePER8BitArrayR6RandomK6size_tK6size_t\">\n<span id=\"_CPPv3I_N6Random4ProbEEN3old8BitArray10RandomizePER6RandomK6size_tK6size_t\"></span><span id=\"_CPPv2I_N6Random4ProbEEN3old8BitArray10RandomizePER6RandomK6size_tK6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv4N6Random4ProbE\" title=\"Random::Prob\"><span class=\"n\"><span class=\"pre\">Prob</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">P</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a62faf35ea08c68e6530560f2f8340c3b\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RandomizeP</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set all bits randomly, with probability specified at compile time. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray12GetUIntAtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray12GetUIntAtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray12GetUIntAtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray12GetUIntAtBitE6size_t\"></span><span id=\"old::BitArray::GetUIntAtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a31d11eebc38eee07424650bae562d984\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUIntAtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>By default, retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8END_MASKE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8END_MASKE\">\n<span id=\"_CPPv3N3old8BitArray8END_MASKE\"></span><span id=\"_CPPv2N3old8BitArray8END_MASKE\"></span><span id=\"old::BitArray::END_MASK__field_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afbf653dd1a7cdebe51ca45f9651a4c85\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">constexpr</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">END_MASK</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"bitset_utils.html#_CPPv4I0E7MaskLow4TYPENSt6size_tE\" title=\"MaskLow\"><span class=\"n\"><span class=\"pre\">MaskLow</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray7field_tE\" title=\"old::BitArray::field_t\"><span class=\"n\"><span class=\"pre\">field_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray12NUM_END_BITSE\" title=\"old::BitArray::NUM_END_BITS\"><span class=\"n\"><span class=\"pre\">NUM_END_BITS</span></span></a><span class=\"p\"><span class=\"pre\">)</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArrayorERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArrayorERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArrayorERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArrayorERK8BitArray\"></span><span id=\"old::BitArray::or-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aff64764d0c7d51b72b165a54c393b6f7\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator bitwise OR\u2026 </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray7GetUIntE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7GetUIntE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray7GetUIntE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray7GetUIntE6size_t\"></span><span id=\"old::BitArray::GetUInt__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a47de2617fb4044e9c2918eb73f8806ca\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>By default, retrieve the 32-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray14SetUInt32AtBitEK6size_t8uint32_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray14SetUInt32AtBitEK6size_t8uint32_t\">\n<span id=\"_CPPv3N3old8BitArray14SetUInt32AtBitEK6size_t8uint32_t\"></span><span id=\"_CPPv2N3old8BitArray14SetUInt32AtBitEK6size_t8uint32_t\"></span><span id=\"old::BitArray::SetUInt32AtBit__sC.uint32_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ae9b5dbf47adf1333e5d04bf03bbf0093\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt32AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint32_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 32-bit uint at the specified uint index. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray15FlipRandomCountER6RandomK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray15FlipRandomCountER6RandomK6size_t\">\n<span id=\"_CPPv3N3old8BitArray15FlipRandomCountER6RandomK6size_t\"></span><span id=\"_CPPv2N3old8BitArray15FlipRandomCountER6RandomK6size_t\"></span><span id=\"old::BitArray::FlipRandomCount__RandomR.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a97e71cb6fe5e916fd70728482a17d347\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FlipRandomCount</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_bits</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Flip a specified number of random bits. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray10FindMaxOneEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10FindMaxOneEv\">\n<span id=\"_CPPv3NK3old8BitArray10FindMaxOneEv\"></span><span id=\"_CPPv2NK3old8BitArray10FindMaxOneEv\"></span><span id=\"old::BitArray::FindMaxOneC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8c9b01c8d6e968bfa30f9af2f8ed417d\"></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindMaxOne</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Find the most-significant set-bit. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray7GetOnesEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7GetOnesEv\">\n<span id=\"_CPPv3NK3old8BitArray7GetOnesEv\"></span><span id=\"_CPPv2NK3old8BitArray7GetOnesEv\"></span><span id=\"old::BitArray::GetOnesC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ac1d8b0573d129a855a631c742e91903c\"></span><a class=\"reference internal\" href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\" title=\"vector\"><span class=\"n\"><span class=\"pre\">vector</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetOnes</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Return positions of all ones. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7SetByteE6size_t7uint8_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7SetByteE6size_t7uint8_t\">\n<span id=\"_CPPv3N3old8BitArray7SetByteE6size_t7uint8_t\"></span><span id=\"_CPPv2N3old8BitArray7SetByteE6size_t7uint8_t\"></span><span id=\"old::BitArray::SetByte__s.uint8_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a33e0e7a1719199e437eeedbc7be72558\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetByte</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint8_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the byte at the specified byte index. </p></dd>", "a[href=\"#_CPPv4I_6size_t_bENK3old8BitArray6ExportE8BitArrayI7TO_BITS7TO_LEFTE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArray6ExportE8BitArrayI7TO_BITS7TO_LEFTE6size_t\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArray6ExportE6size_t\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArray6ExportE6size_t\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TO_BITS</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">TO_LEFT</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::ZERO_LEFT\"><span class=\"n\"><span class=\"pre\">ZERO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1ae1b3a4619ff16c8ec1c8c22c13fb14f8\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArray6ExportE8BitArrayI7TO_BITS7TO_LEFTE6size_t\" title=\"old::BitArray::Export::TO_BITS\"><span class=\"n\"><span class=\"pre\">TO_BITS</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArray6ExportE8BitArrayI7TO_BITS7TO_LEFTE6size_t\" title=\"old::BitArray::Export::TO_LEFT\"><span class=\"n\"><span class=\"pre\">TO_LEFT</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Export</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_bit</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert to a BitArray of a different size. </p></dd>", "a[href=\"../../base/api/vector.html#_CPPv4I0DpE6vector\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0DpE6vector\">\n<span id=\"_CPPv3I0DpE6vector\"></span><span id=\"_CPPv2I0DpE6vector\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Ts</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classvector\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">vector</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">vector</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I0DpE6vector\" title=\"vector::Ts\"><span class=\"n\"><span class=\"pre\">Ts</span></span></a><span class=\"p\"><span class=\"pre\">...</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/></dt><dd><p>Build a debug wrapper vector around std::vector. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3SUBERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3SUBERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3SUBERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3SUBERK8BitArray\"></span><span id=\"old::BitArray::SUB__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aa27b45a4109f12a382cb2071eac2355b\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SUB</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Subtraction of two BitArrays. Wraps around if it underflows. Returns result. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8BitArrayEPKc\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayEPKc\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayEPKc\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayEPKc\"></span><span id=\"old::BitArray::BitArray__cCP\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1f4991fc4923d94218ffa2e48f472533\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">bitstring</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a BitArray from a literal string of \u20180\u2019s and \u20181\u2019s. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray14SetUInt64AtBitEK6size_t8uint64_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray14SetUInt64AtBitEK6size_t8uint64_t\">\n<span id=\"_CPPv3N3old8BitArray14SetUInt64AtBitEK6size_t8uint64_t\"></span><span id=\"_CPPv2N3old8BitArray14SetUInt64AtBitEK6size_t8uint64_t\"></span><span id=\"old::BitArray::SetUInt64AtBit__sC.uint64_t\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a9093c439820a622e0b2393abbf7c4581\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetUInt64AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span>, <span class=\"n\"><span class=\"pre\">uint64_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">value</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Update the 64-bit uint at the specified uint index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray13ToArrayStringEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray13ToArrayStringEv\">\n<span id=\"_CPPv3NK3old8BitArray13ToArrayStringEv\"></span><span id=\"_CPPv2NK3old8BitArray13ToArrayStringEv\"></span><span id=\"old::BitArray::ToArrayStringC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a29b6bf207a61e451bdb1ac27356df7f1\"></span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ToArrayString</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Convert this BitArray to an array-based string [index 0 on left]. </p></dd>", "a[href=\"#_CPPv4I_6size_t_bENK3old8BitArrayleEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArrayleEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArrayleERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArrayleERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a8f6b8754c93e8b8c59a00caba1d24556\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayleEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&lt;=::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayleEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&lt;=::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray10RotateLeftEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10RotateLeftEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray10RotateLeftEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray10RotateLeftEK6size_t\"></span><span id=\"old::BitArray::RotateLeft__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1cb1e3c0b28274fd978e9b5ecc82dded\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">RotateLeft</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size_raw</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper: call ROTATE with negative number instead. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray9SetRandomER6RandomKdK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray9SetRandomER6RandomKdK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray9SetRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray9SetRandomER6RandomKdK6size_tK6size_t\"></span><span id=\"old::BitArray::SetRandom__RandomR.doubleC.sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a92e22bff3f7a10f7cb99a758aa65c578\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetRandom</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">double</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">p</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop_pos</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray::NUM_BITS\"><span class=\"n\"><span class=\"pre\">NUM_BITS</span></span></a><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set random bits with a given probability (does not check if already set.) </p></dd>", "a[href=\"#_CPPv4N3old8BitArray6SetAllEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray6SetAllEv\">\n<span id=\"_CPPv3N3old8BitArray6SetAllEv\"></span><span id=\"_CPPv2N3old8BitArray6SetAllEv\"></span><span id=\"old::BitArray::SetAll\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af4fabf2175902b7a767eed9e9b5ea8b4\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SetAll</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Set all bits to one. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8FieldPosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8FieldPosEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray8FieldPosEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray8FieldPosEK6size_t\"></span><span id=\"old::BitArray::FieldPos__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a202db85a59563193adc03860ea532473\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FieldPos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray7FindBitEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray7FindBitEv\">\n<span id=\"_CPPv3NK3old8BitArray7FindBitEv\"></span><span id=\"_CPPv2NK3old8BitArray7FindBitEv\"></span><span id=\"old::BitArray::FindBitC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ab8f6121932adc8dc634ebb30a99b3987\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FindBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Deprecated: Return the position of the first one; return -1 if no ones in vector. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray9GetUInt16E6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray9GetUInt16E6size_t\">\n<span id=\"_CPPv3NK3old8BitArray9GetUInt16E6size_t\"></span><span id=\"_CPPv2NK3old8BitArray9GetUInt16E6size_t\"></span><span id=\"old::BitArray::GetUInt16__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afd0badb711750acbae725e37948436b0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt16</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 16-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4N3old8BitArrayixE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayixE6size_t\">\n<span id=\"_CPPv3N3old8BitArrayixE6size_t\"></span><span id=\"_CPPv2N3old8BitArrayixE6size_t\"></span><span id=\"old::BitArray::subscript-operator__s\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a40e2511ecc30ebed42a52ea849a01690\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">BitProxy</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray6this_tE\" title=\"old::BitArray::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">[]</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Index into a BitArray, returning a proxy that will allow bit assignment to work. </p></dd>", "a[href=\"#_CPPv4I_6size_t_bENK3old8BitArrayneEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArrayneEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArrayneERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArrayneERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1acc16320bfaf823c5cd3841add90f1b3c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">!=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayneEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator!=::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArrayneEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator!=::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK3old8BitArray14GetUInt16AtBitE6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray14GetUInt16AtBitE6size_t\">\n<span id=\"_CPPv3NK3old8BitArray14GetUInt16AtBitE6size_t\"></span><span id=\"_CPPv2NK3old8BitArray14GetUInt16AtBitE6size_t\"></span><span id=\"old::BitArray::GetUInt16AtBit__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a1d6526ccbf6718b698c53aecfed84197\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">uint16_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">GetUInt16AtBit</span></span></span><span class=\"sig-paren\">(</span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Retrieve the 16-bit uint from the specified uint index. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray4NANDERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray4NANDERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray4NANDERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray4NANDERK8BitArray\"></span><span id=\"old::BitArray::NAND__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1afb2da7f83f5703803de03e5ebad054cf\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NAND</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NAND with a second BitArray and return the result. </p></dd>", "a[href=\"#_CPPv4N3old8BitArrayD0Ev\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayD0Ev\">\n<span id=\"_CPPv3N3old8BitArrayD0Ev\"></span><span id=\"_CPPv2N3old8BitArrayD0Ev\"></span><span id=\"old::BitArray::~BitArray\"></span><span class=\"target\" id=\"classold_1_1BitArray_1abf155668ff57669863dce5bedd95f401\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd><p>Destructor. </p></dd>", "a[href=\"#_CPPv4N3old8BitArrayoRERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayoRERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArrayoRERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArrayoRERK8BitArray\"></span><span id=\"old::BitArray::or-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a25a94dbf172f8811158b690204ebe777\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">|=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise OR\u2026 </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray11PrintOneIDsERNSt7ostreamERKNSt6stringE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray11PrintOneIDsERNSt7ostreamERKNSt6stringE\">\n<span id=\"_CPPv3NK3old8BitArray11PrintOneIDsERNSt7ostreamERKNSt6stringE\"></span><span id=\"_CPPv2NK3old8BitArray11PrintOneIDsERNSt7ostreamERKNSt6stringE\"></span><span id=\"old::BitArray::PrintOneIDs__osR.ssCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a15edc9f36b2aae96706c3ca1f883fb7e\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PrintOneIDs</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">ostream</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">out</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">cout</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">string</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">spacer</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">\"</span> <span class=\"pre\">\"</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Print the locations of all one bits, using the provided spacer (default is a single space) </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8AND_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8AND_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8AND_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8AND_SELFERK8BitArray\"></span><span id=\"old::BitArray::AND_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a59cad230d5c8473244a8a1c385807538\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AND_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean AND with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"#_CPPv4I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\">\n<span id=\"_CPPv3I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\"></span><span id=\"_CPPv2I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a45b524b39935a6e40b37bc308559e758\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">initializer_list</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I0EN3old8BitArray8BitArrayEKNSt16initializer_listI1TEE\" title=\"old::BitArray::BitArray::T\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">l</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to fill in a bit array from a vector. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8BitArrayER6Randomi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayER6Randomi\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayER6Randomi\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayER6Randomi\"></span><span id=\"old::BitArray::BitArray__RandomR.i\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af3e1ea43aaa727e790ed7455c3e1c729\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span>, <span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">num_ones</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitArray with provided NUMBER of 1\u2019s. </p></dd>", "a[href=\"#_CPPv43old\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv43old\">\n<span id=\"_CPPv33old\"></span><span id=\"_CPPv23old\"></span><span id=\"old\"></span><span class=\"target\" id=\"namespaceold\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">old</span></span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArraymIERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArraymIERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArraymIERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArraymIERK8BitArray\"></span><span id=\"old::BitArray::sub-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a09eb1faf52b820f15df83d26f58ba3bb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">-=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator minus\u2026 </p></dd>", "a[href=\"#_CPPv4N3old8BitArray5ClearEK6size_tK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray5ClearEK6size_tK6size_t\">\n<span id=\"_CPPv3N3old8BitArray5ClearEK6size_tK6size_t\"></span><span id=\"_CPPv2N3old8BitArray5ClearEK6size_tK6size_t\"></span><span id=\"old::BitArray::Clear__sC.sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aceb70db11b49da965ec261d059cb8f3d\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">Clear</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">start</span></span>, <span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">stop</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Set bits to 0 in the range [start, stop) </p></dd>", "a[href=\"#_CPPv4NK3old8BitArraymiERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArraymiERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArraymiERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArraymiERK8BitArray\"></span><span id=\"old::BitArray::sub-operator__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a0b0ebe9a686d369d32b1301c6e049d0b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">-</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Operator minus\u2026 </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8BitArrayERK6this_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayERK6this_t\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayERK6this_t\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayERK6this_t\"></span><span id=\"old::BitArray::BitArray__this_tCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af65dde55ca219190bcedefafc469068e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N3old8BitArray6this_tE\" title=\"old::BitArray::this_t\"><span class=\"n\"><span class=\"pre\">this_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">_in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray12REVERSE_SELFEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray12REVERSE_SELFEv\">\n<span id=\"_CPPv3N3old8BitArray12REVERSE_SELFEv\"></span><span id=\"_CPPv2N3old8BitArray12REVERSE_SELFEv\"></span><span id=\"old::BitArray::REVERSE_SELF\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aea55f4bf07958ba9ac05124dab5f49a4\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">REVERSE_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Reverse the order of bits in the BitArray. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray7BytePosEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray7BytePosEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray7BytePosEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray7BytePosEK6size_t\"></span><span id=\"old::BitArray::BytePos__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1ad3f2681ca78b211f3083e86ebc8c481d\"></span><span class=\"k\"><span class=\"pre\">static</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BytePos</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">index</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArrayeOERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArrayeOERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArrayeOERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArrayeOERK8BitArray\"></span><span id=\"old::BitArray::xor-assign-operator__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a0ad8e4215340b093ecad711ad5313ebb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">^=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">ar2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Compound operator bitwise XOR\u2026 </p></dd>", "a[href=\"#_CPPv4N3old8BitArray8BitArrayEb\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayEb\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayEb\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayEb\"></span><span id=\"old::BitArray::BitArray__b\"></span><span class=\"target\" id=\"classold_1_1BitArray_1aceae92e354b0a36dc511e58b2f6000fa\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">explicit</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">init_val</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd><p>Constructor: Assume all bits set to zero. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray10CountZerosEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray10CountZerosEv\">\n<span id=\"_CPPv3NK3old8BitArray10CountZerosEv\"></span><span id=\"_CPPv2NK3old8BitArray10CountZerosEv\"></span><span id=\"old::BitArray::CountZerosC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a490a68473d79cbb0f5884122196d4a37\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">CountZeros</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Count the number of zeros in the BitArray. </p></dd>", "a[href=\"#_CPPv4I_6size_tEN3old8BitArray9ROTR_SELFER8BitArrayv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_tEN3old8BitArray9ROTR_SELFER8BitArrayv\">\n<span id=\"_CPPv3I_6size_tEN3old8BitArray9ROTR_SELFEv\"></span><span id=\"_CPPv2I_6size_tEN3old8BitArray9ROTR_SELFEv\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">shift_size_raw</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a03fd19f29706443b6c1d701e5abd079f\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ROTR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Helper for calling ROTATE with positive number. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3ANDERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3ANDERK8BitArray\">\n<span id=\"_CPPv3NK3old8BitArray3ANDERK8BitArray\"></span><span id=\"_CPPv2NK3old8BitArray3ANDERK8BitArray\"></span><span id=\"old::BitArray::AND__BitArrayCRC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a331f6e819ae037981c6aeb96b78838d5\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">AND</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean AND with a second BitArray and return the result. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray3NOTEv\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray3NOTEv\">\n<span id=\"_CPPv3NK3old8BitArray3NOTEv\"></span><span id=\"_CPPv2NK3old8BitArray3NOTEv\"></span><span id=\"old::BitArray::NOTC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1af49db6cb1c3cef9fc4216c15a26a3c39\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">NOT</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Perform a Boolean NOT on this BitArray and return the result. </p></dd>", "a[href=\"#_CPPv4N3old8BitArray10ShiftRightEK6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray10ShiftRightEK6size_t\">\n<span id=\"_CPPv3N3old8BitArray10ShiftRightEK6size_t\"></span><span id=\"_CPPv2N3old8BitArray10ShiftRightEK6size_t\"></span><span id=\"old::BitArray::ShiftRight__sC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a6bc51908ef4812e16314555ab73a2b9e\"></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">ShiftRight</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray8BitArrayER6Random\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8BitArrayER6Random\">\n<span id=\"_CPPv3N3old8BitArray8BitArrayER6Random\"></span><span id=\"_CPPv2N3old8BitArray8BitArrayER6Random\"></span><span id=\"old::BitArray::BitArray__RandomR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a8ecd38c291d0e97d96018dae8f795050\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></span><span class=\"sig-paren\">(</span><a class=\"reference internal\" href=\"../../math/api/Random.html#_CPPv46Random\" title=\"Random\"><span class=\"n\"><span class=\"pre\">Random</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">random</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Constructor to generate a random BitArray (with equal prob of 0 or 1). </p></dd>", "a[href=\"#_CPPv4I_6size_t_bENK3old8BitArraygeEbRK8BitArrayI2T22L2E\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4I_6size_t_bENK3old8BitArraygeEbRK8BitArrayI2T22L2E\">\n<span id=\"_CPPv3I_6size_t_bENK3old8BitArraygeERK8BitArrayI2T22L2E\"></span><span id=\"_CPPv2I_6size_t_bENK3old8BitArraygeERK8BitArrayI2T22L2E\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">T2</span></span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">L2</span></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classold_1_1BitArray_1a4db64875c60a334e3d16fbe373036a2b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&gt;=</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArraygeEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&gt;=::T2\"><span class=\"n\"><span class=\"pre\">T2</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bENK3old8BitArraygeEbRK8BitArrayI2T22L2E\" title=\"old::BitArray::operator&gt;=::L2\"><span class=\"n\"><span class=\"pre\">L2</span></span></a><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">in</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N3old8BitArray8XOR_SELFERK8BitArray\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N3old8BitArray8XOR_SELFERK8BitArray\">\n<span id=\"_CPPv3N3old8BitArray8XOR_SELFERK8BitArray\"></span><span id=\"_CPPv2N3old8BitArray8XOR_SELFERK8BitArray\"></span><span id=\"old::BitArray::XOR_SELF__BitArrayCR\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a51fafcb38fe528c3cc5de7eeca516226\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">XOR_SELF</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"n sig-param\"><span class=\"pre\">array2</span></span><span class=\"sig-paren\">)</span><br/></dt><dd><p>Perform a Boolean XOR with a second BitArray, store result here, and return this object. </p></dd>", "a[href=\"#_CPPv4NK3old8BitArray5SHIFTEKi\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4NK3old8BitArray5SHIFTEKi\">\n<span id=\"_CPPv3NK3old8BitArray5SHIFTEKi\"></span><span id=\"_CPPv2NK3old8BitArray5SHIFTEKi\"></span><span id=\"old::BitArray::SHIFT__iCC\"></span><span class=\"target\" id=\"classold_1_1BitArray_1a67d18cc358deae02aeffeb643c440121\"></span><a class=\"reference internal\" href=\"#_CPPv4I_6size_t_bEN3old8BitArrayE\" title=\"old::BitArray\"><span class=\"n\"><span class=\"pre\">BitArray</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">SHIFT</span></span></span><span class=\"sig-paren\">(</span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">shift_size</span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Positive shifts go right and negative shifts go left (0 does nothing); return result. </p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
