selector_to_html = {"a[href=\"../../bits/api/Bits.html#_CPPv4St\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4St\">\n<span id=\"_CPPv3St\"></span><span id=\"_CPPv2St\"></span><span id=\"std\"></span><span class=\"target\" id=\"namespacestd\"></span><span class=\"k\"><span class=\"pre\">namespace</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">std</span></span></span><br/></dt><dd><p>STL namespace. </p></dd>", "a[href=\"#_CPPv4N9MemoryBuf9MemoryBufEPKc6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N9MemoryBuf9MemoryBufEPKc6size_t\">\n<span id=\"_CPPv3N9MemoryBuf9MemoryBufEPKc6size_t\"></span><span id=\"_CPPv2N9MemoryBuf9MemoryBufEPKc6size_t\"></span><span id=\"MemoryBuf::MemoryBuf__cCP.s\"></span><span class=\"target\" id=\"structMemoryBuf_1aacc66f7df63d3d42438035d67c913260\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MemoryBuf</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">base</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#memoryistream-hpp\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">MemoryIStream.hpp<a class=\"headerlink\" href=\"#memoryistream-hpp\" title=\"Link to this heading\">\uf0c1</a></h1><p>Useful for streaming data from contiguous memory. Status: RELEASE. </p>", "a[href=\"#_CPPv49MemoryBuf\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv49MemoryBuf\">\n<span id=\"_CPPv39MemoryBuf\"></span><span id=\"_CPPv29MemoryBuf\"></span><span id=\"MemoryBuf\"></span><span class=\"target\" id=\"structMemoryBuf\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MemoryBuf</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">streambuf</span></span><br/></dt><dd><p>Subclassed by MemoryIStream</p></dd>", "a[href=\"#_CPPv413MemoryIStream\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv413MemoryIStream\">\n<span id=\"_CPPv313MemoryIStream\"></span><span id=\"_CPPv213MemoryIStream\"></span><span id=\"MemoryIStream\"></span><span class=\"target\" id=\"structMemoryIStream\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MemoryIStream</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv49MemoryBuf\" title=\"MemoryBuf\"><span class=\"n\"><span class=\"pre\">MemoryBuf</span></span></a><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"../../bits/api/Bits.html#_CPPv4St\" title=\"std\"><span class=\"n\"><span class=\"pre\">std</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">istream</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N13MemoryIStream13MemoryIStreamEPKc6size_t\"]": "<dt class=\"sig sig-object cpp\" id=\"_CPPv4N13MemoryIStream13MemoryIStreamEPKc6size_t\">\n<span id=\"_CPPv3N13MemoryIStream13MemoryIStreamEPKc6size_t\"></span><span id=\"_CPPv2N13MemoryIStream13MemoryIStreamEPKc6size_t\"></span><span id=\"MemoryIStream::MemoryIStream__cCP.s\"></span><span class=\"target\" id=\"structMemoryIStream_1aa03528431a2a816fecef1d3fa760226c\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MemoryIStream</span></span></span><span class=\"sig-paren\">(</span><span class=\"kt\"><span class=\"pre\">char</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"n sig-param\"><span class=\"pre\">base</span></span>, <span class=\"n\"><span class=\"pre\">size_t</span></span><span class=\"w\"> </span><span class=\"n sig-param\"><span class=\"pre\">size</span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
