selector_to_html = {"a[href=\"#web-tools\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Web Tools<a class=\"headerlink\" href=\"#web-tools\" title=\"Link to this heading\">\uf0c1</a></h1><p>The web tools in Empirical are structured to allow the developer to\nfully control components of a web page from C++. Note that you must have\nthe emscripten compiler installed for web utilities to function\nproperly.</p><p>Empirical web Widgets include Text, Buttons, Images, Tables, or many\nother HTML components. All widgets are derived from <code class=\"docutils literal notranslate\"><span class=\"pre\">emp::Widget</span></code> and\nstructured such that multiple widgets can properly refer to and modify\nthe same component.</p>", "a[href=\"#finding-and-modifying-existing-widgets\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Finding and Modifying Existing Widgets<a class=\"headerlink\" href=\"#finding-and-modifying-existing-widgets\" title=\"Link to this heading\">\uf0c1</a></h2><p>There are two ways to keep track of Widgets in Empirical. One is to\nsimply hold on to a variable associated with the Widget, such as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">my_button</span></code> in our previous examples. At any point we can still modify\nsomething about <code class=\"docutils literal notranslate\"><span class=\"pre\">my_button</span></code>. For example, if we added a line at the end\nof main:</p>", "a[href=\"#a-simple-example\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">A Simple Example<a class=\"headerlink\" href=\"#a-simple-example\" title=\"Link to this heading\">\uf0c1</a></h2><p>In order to get a simple example working, you need:</p>", "a[href=\"#live-variables-and-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">\u201cLive\u201d Variables and Function<a class=\"headerlink\" href=\"#live-variables-and-function\" title=\"Link to this heading\">\uf0c1</a></h2><p>Anything sent to a web page that is inside a <code class=\"docutils literal notranslate\"><span class=\"pre\">UI::Live()</span></code> function will\nalways have its most current value used whenever that portion of the\npage is redrawn. For example, let\u2019s make our button modify the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code> and redraw it.</p>", "a[href=\"#canvas\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Canvas<a class=\"headerlink\" href=\"#canvas\" title=\"Link to this heading\">\uf0c1</a></h2><p>Canvas widgets in Empirical are a slightly streamlined version of\ncanvases in HTML. To build one, you simply need to create an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">emp::Canvas</span></code> object (with the appropriate size) and place it into the\ndocument. For example</p>", "a[href=\"#controlling-css\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Controlling CSS<a class=\"headerlink\" href=\"#controlling-css\" title=\"Link to this heading\">\uf0c1</a></h2><p>Web page aesthetics are controlled by adjusting the CSS of the widgets,\nand Empirical is no different. You have two options for controlling CSS\n\u2013 you can do it the traditional way by modifying the HTML file (often\nwith the help of other packages) or else you can control specific CSS\nsettings with the <code class=\"docutils literal notranslate\"><span class=\"pre\">.CSS</span></code> member function associated with all Widgets.</p><p>For example, if we wanted our button to be green with red text, we could\nadd to the end of <code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code> the statement</p>", "a[href=\"#controlling-a-web-page-the-basics\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Controlling a Web Page: The Basics<a class=\"headerlink\" href=\"#controlling-a-web-page-the-basics\" title=\"Link to this heading\">\uf0c1</a></h2><p>To understand how most of the HTML widgets work we need only change the\nmain code file; the current HTML file and compiler options can be left\nthe same.</p><p>As indicated by our starting point, text can be streamed into an HTML\ndocument in a similar way to an output stream in the standard library.\nFor example, we can update our main function to mix text and variables:</p>", "a[href=\"#empirical-tables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Empirical Tables<a class=\"headerlink\" href=\"#empirical-tables\" title=\"Link to this heading\">\uf0c1</a></h2><p>Tables are one of the features of Empirical that differs most in style\nfrom the underlying HTML it modifies, preferring a more exact form where\nthe user sets the number of rows and columns to be used.</p><p>For example, to build a table with 7 rows and 3 columns, we can declare</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
