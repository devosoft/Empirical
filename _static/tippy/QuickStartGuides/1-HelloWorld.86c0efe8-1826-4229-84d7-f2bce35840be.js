selector_to_html = {"a[href=\"4-UsingProjectTemplate.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Using the Project Template<a class=\"headerlink\" href=\"#using-the-project-template\" title=\"Link to this heading\">\uf0c1</a></h1><p>Goals of the project template - Simple web interface - Easy toggle -\nEasy debug</p><p>Organizing core code files</p>", "a[href=\"#compile-run-command-line\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Compile &amp; Run: Command Line<a class=\"headerlink\" href=\"#compile-run-command-line\" title=\"Link to this heading\">\uf0c1</a></h2><p>Assuming you haven\u2019t already pulled down a clone of Empirical, let\u2019s\nget your working environment all set.</p>", "a[href=\"#hello-world\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Hello World<a class=\"headerlink\" href=\"#hello-world\" title=\"Link to this heading\">\uf0c1</a></h1><p>Empirical allows you to compile your C++ to target</p>", "a[href=\"#compile-run-web-browser\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Compile &amp; Run: Web Browser<a class=\"headerlink\" href=\"#compile-run-web-browser\" title=\"Link to this heading\">\uf0c1</a></h2><p>Assuming your working directory is still\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Empirical/examples/ProjectTemplate</span></code> and you have loaded up emscripten\n(e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">source</span> <span class=\"pre\">./emsdk_env.sh</span></code>), compiling for web is a snap!</p><p>Let\u2019s take a look at what we want to compile first, though.</p>", "a[href=\"#install-web-c-compiler\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Install: Web C++ Compiler<a class=\"headerlink\" href=\"#install-web-c-compiler\" title=\"Link to this heading\">\uf0c1</a></h2><p>In order to compile for web, you\u2019ll need the <a class=\"reference external\" href=\"https://emscripten.org\">emscripten LLVM-to-Web\nCompiler</a>. If you\u2019re a new user, you (probably)\ndon\u2019t have this set up so we\u2019ll walk you through step-by-step.</p><p>We aim for Empirical to track the current release of emscripten. As of\nmid-February 2019, Empirical is compatible with emscripten\u2019s\ncontemporary release, version <code class=\"docutils literal notranslate\"><span class=\"pre\">v1.38.27</span></code>. Your best bet for compiling\nwith Empirical is to install the latest version of emscripten. However,\nif you run into roadblocks later on and think it might be because of\nbreaking changes in emscripten that Empirical hasn\u2019t tracked, let us\nknow by posting on <a class=\"reference external\" href=\"https://github.com/devosoft/Empirical/issues\">our issue\ntracker</a>!</p>", "a[href=\"#extending-the-project-template\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Extending the Project Template<a class=\"headerlink\" href=\"#extending-the-project-template\" title=\"Link to this heading\">\uf0c1</a></h2><p>We\u2019ve used the project template to run some simple \u201chello world\u201d code\nnatively and in the browser.</p><p>If you\u2019re wondering how to extend the project template, we have a quick\nstart guide on exactly that <a class=\"reference internal\" href=\"4-UsingProjectTemplate.html\"><span class=\"doc std std-doc\">here</span></a>.</p>", "a[href=\"3-WebTools.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Web Tools<a class=\"headerlink\" href=\"#web-tools\" title=\"Link to this heading\">\uf0c1</a></h1><p>The web tools in Empirical are structured to allow the developer to\nfully control components of a web page from C++. Note that you must have\nthe emscripten compiler installed for web utilities to function\nproperly.</p><p>Empirical web Widgets include Text, Buttons, Images, Tables, or many\nother HTML components. All widgets are derived from <code class=\"docutils literal notranslate\"><span class=\"pre\">emp::Widget</span></code> and\nstructured such that multiple widgets can properly refer to and modify\nthe same component.</p>", "a[href=\"#install-native-c-compiler\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Install: Native C++ Compiler<a class=\"headerlink\" href=\"#install-native-c-compiler\" title=\"Link to this heading\">\uf0c1</a></h2><p>In the Unix-verse (e.g., Linux / macOS) commonly used compilers include\n<code class=\"docutils literal notranslate\"><span class=\"pre\">gcc</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">clang</span></code>. From this point onwards, we assume that you\u2019re\nworking with <code class=\"docutils literal notranslate\"><span class=\"pre\">gcc</span></code>. Unless you really know what you\u2019re doing, you\u2019ll\nwant to have <code class=\"docutils literal notranslate\"><span class=\"pre\">gcc</span></code> installed. The good news is: you might already!</p><p>Bring up a terminal and try entering:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
